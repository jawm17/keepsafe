{"ast":null,"code":"export {};","map":{"version":3,"names":[],"sources":["/Users/envyhose/Desktop/programs/keepsafe_repo/keepsafe/client/node_modules/viem/types/chain.ts"],"sourcesContent":["import type { Address } from 'abitype'\n\nimport type { EstimateFeesPerGasReturnType } from '../actions/public/estimateFeesPerGas.js'\nimport type { PrepareTransactionRequestParameters } from '../actions/wallet/prepareTransactionRequest.js'\nimport type { Client } from '../clients/createClient.js'\nimport type { Transport } from '../clients/transports/createTransport.js'\nimport type { Account } from '../types/account.js'\nimport type { FeeValuesType } from '../types/fee.js'\nimport type {\n  TransactionSerializable,\n  TransactionSerializableGeneric,\n} from '../types/transaction.js'\nimport type { IsUndefined, Prettify } from '../types/utils.js'\nimport type { FormattedBlock } from '../utils/formatters/block.js'\nimport type { SerializeTransactionFn } from '../utils/transaction/serializeTransaction.js'\n\nexport type Chain<\n  formatters extends ChainFormatters | undefined = ChainFormatters | undefined,\n> = ChainConstants & ChainConfig<formatters>\n\n/////////////////////////////////////////////////////////////////////\n// Constants\n\nexport type ChainBlockExplorer = {\n  name: string\n  url: string\n}\n\nexport type ChainConstants = {\n  /** Collection of block explorers */\n  blockExplorers?: {\n    default: ChainBlockExplorer\n    etherscan?: ChainBlockExplorer\n  }\n  /** Collection of contracts */\n  contracts?: {\n    [key: string]: ChainContract | { [chainId: number]: ChainContract }\n  } & {\n    ensRegistry?: ChainContract\n    ensUniversalResolver?: ChainContract\n    multicall3?: ChainContract\n  }\n  /** ID in number form */\n  id: number\n  /** Human-readable name */\n  name: string\n  /**\n   * Internal network name\n   * @deprecated will be removed in v2 - use `id` instead.\n   */\n  network: string\n  /** Currency used by chain */\n  nativeCurrency: ChainNativeCurrency\n  /** Collection of RPC endpoints */\n  rpcUrls: {\n    [key: string]: ChainRpcUrls\n    default: ChainRpcUrls\n    public: ChainRpcUrls\n  }\n  /** Source Chain ID (ie. the L1 chain) */\n  sourceId?: number\n  /** Flag for test networks */\n  testnet?: boolean\n\n  // TODO(v2): remove `rpcUrls` in favor of `publicRpcUrls`.\n  // publicRpcUrls: ChainRpcUrls,\n}\n\nexport type ChainContract = {\n  address: Address\n  blockCreated?: number\n}\n\nexport type ChainNativeCurrency = {\n  name: string\n  /** 2-6 characters long */\n  symbol: string\n  decimals: number\n}\n\nexport type ChainRpcUrls = {\n  http: readonly string[]\n  webSocket?: readonly string[]\n}\n\n/////////////////////////////////////////////////////////////////////\n// Config\n\nexport type ChainConfig<\n  formatters extends ChainFormatters | undefined = ChainFormatters | undefined,\n> = {\n  /**\n   * Modifies how chain data structures (ie. Blocks, Transactions, etc)\n   * are formatted & typed.\n   */\n  formatters?: formatters | undefined\n  /** Modifies how data (ie. Transactions) is serialized. */\n  serializers?: ChainSerializers<formatters> | undefined\n  /** Modifies how fees are derived. */\n  fees?: ChainFees<formatters> | undefined\n}\n\nexport type ChainFees<\n  formatters extends ChainFormatters | undefined = ChainFormatters | undefined,\n> = {\n  /**\n   * The fee multiplier to use to account for fee fluctuations.\n   * Used in the [`estimateFeesPerGas` Action](/docs/actions/public/estimateFeesPerGas).\n   *\n   * @default 1.2\n   */\n  baseFeeMultiplier?:\n    | number\n    | ((args: ChainFeesFnParameters<formatters>) => Promise<number> | number)\n  /**\n   * The default `maxPriorityFeePerGas` to use when a priority\n   * fee is not defined upon sending a transaction.\n   *\n   * Overrides the return value in the [`estimateMaxPriorityFeePerGas` Action](/docs/actions/public/estimateMaxPriorityFeePerGas).\n   */\n  defaultPriorityFee?:\n    | bigint\n    | ((args: ChainFeesFnParameters<formatters>) => Promise<bigint> | bigint)\n  /**\n   * Allows customization of fee per gas values (e.g. `maxFeePerGas`/`maxPriorityFeePerGas`).\n   *\n   * Overrides the return value in the [`estimateFeesPerGas` Action](/docs/actions/public/estimateFeesPerGas).\n   */\n  estimateFeesPerGas?: (\n    args: ChainEstimateFeesPerGasFnParameters<formatters>,\n  ) => Promise<EstimateFeesPerGasReturnType> | bigint\n}\n\nexport type ChainFormatters = {\n  /** Modifies how the Block structure is formatted & typed. */\n  block?: ChainFormatter<'block'>\n  /** Modifies how the Transaction structure is formatted & typed. */\n  transaction?: ChainFormatter<'transaction'>\n  /** Modifies how the TransactionReceipt structure is formatted & typed. */\n  transactionReceipt?: ChainFormatter<'transactionReceipt'>\n  /** Modifies how the TransactionRequest structure is formatted & typed. */\n  transactionRequest?: ChainFormatter<'transactionRequest'>\n}\n\nexport type ChainFormatter<type extends string = string> = {\n  format: (args: any) => any\n  type: type\n}\n\nexport type ChainSerializers<\n  formatters extends ChainFormatters | undefined = undefined,\n> = {\n  /** Modifies how Transactions are serialized. */\n  transaction?: SerializeTransactionFn<\n    formatters extends ChainFormatters\n      ? formatters['transactionRequest'] extends ChainFormatter\n        ? TransactionSerializableGeneric &\n            Parameters<formatters['transactionRequest']['format']>[0]\n        : TransactionSerializable\n      : TransactionSerializable\n  >\n}\n\n/////////////////////////////////////////////////////////////////////\n// Parameters\n\nexport type ChainFeesFnParameters<\n  formatters extends ChainFormatters | undefined = ChainFormatters | undefined,\n> = {\n  /** The latest block. */\n  block: Prettify<FormattedBlock<{ formatters: formatters }>>\n  client: Client<Transport, Chain>\n  /**\n   * A transaction request. This value will be undefined if the caller\n   * is outside of a transaction request context (e.g. a direct call to\n   * the `estimateFeesPerGas` Action).\n   */\n  request?: PrepareTransactionRequestParameters<\n    Omit<Chain, 'formatters'> & { formatters: formatters },\n    Account | undefined,\n    undefined\n  >\n}\n\nexport type ChainEstimateFeesPerGasFnParameters<\n  formatters extends ChainFormatters | undefined = ChainFormatters | undefined,\n> = {\n  /**\n   * A function to multiply the base fee based on the `baseFeeMultiplier` value.\n   */\n  multiply(x: bigint): bigint\n  /**\n   * The type of fees to return.\n   */\n  type: FeeValuesType\n} & ChainFeesFnParameters<formatters>\n\n/////////////////////////////////////////////////////////////////////\n// Utils\n\nexport type ExtractChainFormatterExclude<\n  chain extends { formatters?: Chain['formatters'] } | undefined,\n  type extends keyof ChainFormatters,\n> = chain extends { formatters?: infer _Formatters extends ChainFormatters }\n  ? _Formatters[type] extends { exclude: infer Exclude }\n    ? Extract<Exclude, string[]>[number]\n    : ''\n  : ''\n\nexport type ExtractChainFormatterParameters<\n  chain extends { formatters?: Chain['formatters'] } | undefined,\n  type extends keyof ChainFormatters,\n  fallback,\n> = chain extends { formatters?: infer _Formatters extends ChainFormatters }\n  ? _Formatters[type] extends ChainFormatter\n    ? Parameters<_Formatters[type]['format']>[0]\n    : fallback\n  : fallback\n\nexport type ExtractChainFormatterReturnType<\n  chain extends { formatters?: Chain['formatters'] } | undefined,\n  type extends keyof ChainFormatters,\n  fallback,\n> = chain extends { formatters?: infer _Formatters extends ChainFormatters }\n  ? _Formatters[type] extends ChainFormatter\n    ? ReturnType<_Formatters[type]['format']>\n    : fallback\n  : fallback\n\nexport type GetChain<\n  chain extends Chain | undefined,\n  chainOverride extends Chain | undefined = undefined,\n> = IsUndefined<chain> extends true\n  ? { chain: chainOverride | null }\n  : { chain?: chainOverride | null }\n"],"mappings":""},"metadata":{},"sourceType":"module","externalDependencies":[]}