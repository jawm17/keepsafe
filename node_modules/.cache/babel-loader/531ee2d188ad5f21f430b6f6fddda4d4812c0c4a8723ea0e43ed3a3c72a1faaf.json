{"ast":null,"code":"import { TransactionNotFoundError } from '../../errors/transaction.js';\nimport { numberToHex } from '../../utils/encoding/toHex.js';\nimport { formatTransaction } from '../../utils/formatters/transaction.js';\n/**\n * Returns information about a [Transaction](https://viem.sh/docs/glossary/terms.html#transaction) given a hash or block identifier.\n *\n * - Docs: https://viem.sh/docs/actions/public/getTransaction.html\n * - Example: https://stackblitz.com/github/wagmi-dev/viem/tree/main/examples/transactions/fetching-transactions\n * - JSON-RPC Methods: [`eth_getTransactionByHash`](https://ethereum.org/en/developers/docs/apis/json-rpc/#eth_getTransactionByHash)\n *\n * @param client - Client to use\n * @param parameters - {@link GetTransactionParameters}\n * @returns The transaction information. {@link GetTransactionReturnType}\n *\n * @example\n * import { createPublicClient, http } from 'viem'\n * import { mainnet } from 'viem/chains'\n * import { getTransaction } from 'viem/public'\n *\n * const client = createPublicClient({\n *   chain: mainnet,\n *   transport: http(),\n * })\n * const transaction = await getTransaction(client, {\n *   hash: '0x4ca7ee652d57678f26e887c149ab0735f41de37bcad58c9f6d3ed5824f15b74d',\n * })\n */\nexport async function getTransaction(client, {\n  blockHash,\n  blockNumber,\n  blockTag: blockTag_,\n  hash,\n  index\n}) {\n  const blockTag = blockTag_ || 'latest';\n  const blockNumberHex = blockNumber !== undefined ? numberToHex(blockNumber) : undefined;\n  let transaction = null;\n  if (hash) {\n    transaction = await client.request({\n      method: 'eth_getTransactionByHash',\n      params: [hash]\n    });\n  } else if (blockHash) {\n    transaction = await client.request({\n      method: 'eth_getTransactionByBlockHashAndIndex',\n      params: [blockHash, numberToHex(index)]\n    });\n  } else if (blockNumberHex || blockTag) {\n    transaction = await client.request({\n      method: 'eth_getTransactionByBlockNumberAndIndex',\n      params: [blockNumberHex || blockTag, numberToHex(index)]\n    });\n  }\n  if (!transaction) throw new TransactionNotFoundError({\n    blockHash,\n    blockNumber,\n    blockTag,\n    hash,\n    index\n  });\n  const format = client.chain?.formatters?.transaction?.format || formatTransaction;\n  return format(transaction);\n}","map":{"version":3,"names":["TransactionNotFoundError","numberToHex","formatTransaction","getTransaction","client","blockHash","blockNumber","blockTag","blockTag_","hash","index","blockNumberHex","undefined","transaction","request","method","params","format","chain","formatters"],"sources":["/Users/envyhose/Desktop/programs/keepsafe_repo/keepsafe/client/node_modules/viem/actions/public/getTransaction.ts"],"sourcesContent":["import type { Client } from '../../clients/createClient.js'\nimport type { Transport } from '../../clients/transports/createTransport.js'\nimport { TransactionNotFoundError } from '../../errors/transaction.js'\nimport type { BlockTag } from '../../types/block.js'\nimport type { Chain } from '../../types/chain.js'\nimport type { Hash } from '../../types/misc.js'\nimport type { RpcTransaction } from '../../types/rpc.js'\nimport { numberToHex } from '../../utils/encoding/toHex.js'\nimport {\n  type FormattedTransaction,\n  formatTransaction,\n} from '../../utils/formatters/transaction.js'\n\nexport type GetTransactionParameters<TBlockTag extends BlockTag = 'latest'> =\n  | {\n      /** The block hash */\n      blockHash: Hash\n      blockNumber?: never\n      blockTag?: never\n      hash?: never\n      /** The index of the transaction on the block. */\n      index: number\n    }\n  | {\n      blockHash?: never\n      /** The block number */\n      blockNumber: bigint\n      blockTag?: never\n      hash?: never\n      /** The index of the transaction on the block. */\n      index: number\n    }\n  | {\n      blockHash?: never\n      blockNumber?: never\n      /** The block tag. */\n      blockTag: TBlockTag | BlockTag\n      hash?: never\n      /** The index of the transaction on the block. */\n      index: number\n    }\n  | {\n      blockHash?: never\n      blockNumber?: never\n      blockTag?: never\n      /** The hash of the transaction. */\n      hash: Hash\n      index?: number\n    }\n\nexport type GetTransactionReturnType<\n  TChain extends Chain | undefined = Chain,\n  TBlockTag extends BlockTag = 'latest',\n> = FormattedTransaction<TChain, TBlockTag>\n\n/**\n * Returns information about a [Transaction](https://viem.sh/docs/glossary/terms.html#transaction) given a hash or block identifier.\n *\n * - Docs: https://viem.sh/docs/actions/public/getTransaction.html\n * - Example: https://stackblitz.com/github/wagmi-dev/viem/tree/main/examples/transactions/fetching-transactions\n * - JSON-RPC Methods: [`eth_getTransactionByHash`](https://ethereum.org/en/developers/docs/apis/json-rpc/#eth_getTransactionByHash)\n *\n * @param client - Client to use\n * @param parameters - {@link GetTransactionParameters}\n * @returns The transaction information. {@link GetTransactionReturnType}\n *\n * @example\n * import { createPublicClient, http } from 'viem'\n * import { mainnet } from 'viem/chains'\n * import { getTransaction } from 'viem/public'\n *\n * const client = createPublicClient({\n *   chain: mainnet,\n *   transport: http(),\n * })\n * const transaction = await getTransaction(client, {\n *   hash: '0x4ca7ee652d57678f26e887c149ab0735f41de37bcad58c9f6d3ed5824f15b74d',\n * })\n */\nexport async function getTransaction<\n  TChain extends Chain | undefined,\n  TBlockTag extends BlockTag = 'latest',\n>(\n  client: Client<Transport, TChain>,\n  {\n    blockHash,\n    blockNumber,\n    blockTag: blockTag_,\n    hash,\n    index,\n  }: GetTransactionParameters<TBlockTag>,\n): Promise<GetTransactionReturnType<TChain, TBlockTag>> {\n  const blockTag = blockTag_ || 'latest'\n\n  const blockNumberHex =\n    blockNumber !== undefined ? numberToHex(blockNumber) : undefined\n\n  let transaction: RpcTransaction | null = null\n  if (hash) {\n    transaction = await client.request({\n      method: 'eth_getTransactionByHash',\n      params: [hash],\n    })\n  } else if (blockHash) {\n    transaction = await client.request({\n      method: 'eth_getTransactionByBlockHashAndIndex',\n      params: [blockHash, numberToHex(index)],\n    })\n  } else if (blockNumberHex || blockTag) {\n    transaction = await client.request({\n      method: 'eth_getTransactionByBlockNumberAndIndex',\n      params: [blockNumberHex || blockTag, numberToHex(index)],\n    })\n  }\n\n  if (!transaction)\n    throw new TransactionNotFoundError({\n      blockHash,\n      blockNumber,\n      blockTag,\n      hash,\n      index,\n    })\n\n  const format =\n    client.chain?.formatters?.transaction?.format || formatTransaction\n  return format(transaction)\n}\n"],"mappings":"AAEA,SAASA,wBAAwB,QAAQ,6BAA6B;AAKtE,SAASC,WAAW,QAAQ,+BAA+B;AAC3D,SAEEC,iBAAiB,QACZ,uCAAuC;AA4C9C;;;;;;;;;;;;;;;;;;;;;;;;AAwBA,OAAO,eAAeC,cAAcA,CAIlCC,MAAiC,EACjC;EACEC,SAAS;EACTC,WAAW;EACXC,QAAQ,EAAEC,SAAS;EACnBC,IAAI;EACJC;AAAK,CAC+B;EAEtC,MAAMH,QAAQ,GAAGC,SAAS,IAAI,QAAQ;EAEtC,MAAMG,cAAc,GAClBL,WAAW,KAAKM,SAAS,GAAGX,WAAW,CAACK,WAAW,CAAC,GAAGM,SAAS;EAElE,IAAIC,WAAW,GAA0B,IAAI;EAC7C,IAAIJ,IAAI,EAAE;IACRI,WAAW,GAAG,MAAMT,MAAM,CAACU,OAAO,CAAC;MACjCC,MAAM,EAAE,0BAA0B;MAClCC,MAAM,EAAE,CAACP,IAAI;KACd,CAAC;GACH,MAAM,IAAIJ,SAAS,EAAE;IACpBQ,WAAW,GAAG,MAAMT,MAAM,CAACU,OAAO,CAAC;MACjCC,MAAM,EAAE,uCAAuC;MAC/CC,MAAM,EAAE,CAACX,SAAS,EAAEJ,WAAW,CAACS,KAAK,CAAC;KACvC,CAAC;GACH,MAAM,IAAIC,cAAc,IAAIJ,QAAQ,EAAE;IACrCM,WAAW,GAAG,MAAMT,MAAM,CAACU,OAAO,CAAC;MACjCC,MAAM,EAAE,yCAAyC;MACjDC,MAAM,EAAE,CAACL,cAAc,IAAIJ,QAAQ,EAAEN,WAAW,CAACS,KAAK,CAAC;KACxD,CAAC;;EAGJ,IAAI,CAACG,WAAW,EACd,MAAM,IAAIb,wBAAwB,CAAC;IACjCK,SAAS;IACTC,WAAW;IACXC,QAAQ;IACRE,IAAI;IACJC;GACD,CAAC;EAEJ,MAAMO,MAAM,GACVb,MAAM,CAACc,KAAK,EAAEC,UAAU,EAAEN,WAAW,EAAEI,MAAM,IAAIf,iBAAiB;EACpE,OAAOe,MAAM,CAACJ,WAAW,CAAC;AAC5B"},"metadata":{},"sourceType":"module","externalDependencies":[]}