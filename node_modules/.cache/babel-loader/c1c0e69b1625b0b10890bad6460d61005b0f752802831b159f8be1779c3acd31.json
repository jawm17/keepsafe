{"ast":null,"code":"import { Eip1559FeesNotSupportedError } from '../../errors/fee.js';\nimport { hexToBigInt } from '../../utils/encoding/fromHex.js';\nimport { getBlock } from './getBlock.js';\nimport { getGasPrice } from './getGasPrice.js';\n/**\n * Returns an estimate for the max priority fee per gas (in wei) for a\n * transaction to be likely included in the next block.\n * Defaults to [`chain.fees.defaultPriorityFee`](/docs/clients/chains.html#fees-defaultpriorityfee) if set.\n *\n * - Docs: https://viem.sh/docs/actions/public/estimateMaxPriorityFeePerGas.html\n *\n * @param client - Client to use\n * @returns An estimate (in wei) for the max priority fee per gas. {@link EstimateMaxPriorityFeePerGasReturnType}\n *\n * @example\n * import { createPublicClient, http } from 'viem'\n * import { mainnet } from 'viem/chains'\n * import { estimateMaxPriorityFeePerGas } from 'viem/actions'\n *\n * const client = createPublicClient({\n *   chain: mainnet,\n *   transport: http(),\n * })\n * const maxPriorityFeePerGas = await estimateMaxPriorityFeePerGas(client)\n * // 10000000n\n */\nexport async function estimateMaxPriorityFeePerGas(client, args) {\n  return internal_estimateMaxPriorityFeePerGas(client, args);\n}\nexport async function internal_estimateMaxPriorityFeePerGas(client, args) {\n  const {\n    block: block_,\n    chain = client.chain,\n    request\n  } = args || {};\n  if (typeof chain?.fees?.defaultPriorityFee === 'function') {\n    const block = block_ || (await getBlock(client));\n    return chain.fees.defaultPriorityFee({\n      block,\n      client,\n      request\n    });\n  } else if (chain?.fees?.defaultPriorityFee) return chain?.fees?.defaultPriorityFee;\n  try {\n    const maxPriorityFeePerGasHex = await client.request({\n      method: 'eth_maxPriorityFeePerGas'\n    });\n    return hexToBigInt(maxPriorityFeePerGasHex);\n  } catch {\n    // If the RPC Provider does not support `eth_maxPriorityFeePerGas`\n    // fall back to calculating it manually via `gasPrice - baseFeePerGas`.\n    // See: https://github.com/ethereum/pm/issues/328#:~:text=eth_maxPriorityFeePerGas%20after%20London%20will%20effectively%20return%20eth_gasPrice%20%2D%20baseFee\n    const [block, gasPrice] = await Promise.all([block_ ? Promise.resolve(block_) : getBlock(client), getGasPrice(client)]);\n    if (typeof block.baseFeePerGas !== 'bigint') throw new Eip1559FeesNotSupportedError();\n    const maxPriorityFeePerGas = gasPrice - block.baseFeePerGas;\n    if (maxPriorityFeePerGas < 0n) return 0n;\n    return maxPriorityFeePerGas;\n  }\n}","map":{"version":3,"names":["Eip1559FeesNotSupportedError","hexToBigInt","getBlock","getGasPrice","estimateMaxPriorityFeePerGas","client","args","internal_estimateMaxPriorityFeePerGas","block","block_","chain","request","fees","defaultPriorityFee","maxPriorityFeePerGasHex","method","gasPrice","Promise","all","resolve","baseFeePerGas","maxPriorityFeePerGas"],"sources":["/Users/envyhose/Desktop/programs/keepsafe_repo/keepsafe/client/node_modules/viem/actions/public/estimateMaxPriorityFeePerGas.ts"],"sourcesContent":["import type { Client } from '../../clients/createClient.js'\nimport type { Transport } from '../../clients/transports/createTransport.js'\nimport { Eip1559FeesNotSupportedError } from '../../errors/fee.js'\nimport type { Account } from '../../types/account.js'\nimport type { Block } from '../../types/block.js'\nimport type { Chain, ChainFeesFnParameters } from '../../types/chain.js'\nimport type { GetChain } from '../../types/chain.js'\nimport { hexToBigInt } from '../../utils/encoding/fromHex.js'\nimport type { PrepareTransactionRequestParameters } from '../wallet/prepareTransactionRequest.js'\nimport { getBlock } from './getBlock.js'\nimport { getGasPrice } from './getGasPrice.js'\n\nexport type EstimateMaxPriorityFeePerGasParameters<\n  chain extends Chain | undefined = Chain | undefined,\n  chainOverride extends Chain | undefined = Chain | undefined,\n> = GetChain<chain, chainOverride>\nexport type EstimateMaxPriorityFeePerGasReturnType = bigint\n\n/**\n * Returns an estimate for the max priority fee per gas (in wei) for a\n * transaction to be likely included in the next block.\n * Defaults to [`chain.fees.defaultPriorityFee`](/docs/clients/chains.html#fees-defaultpriorityfee) if set.\n *\n * - Docs: https://viem.sh/docs/actions/public/estimateMaxPriorityFeePerGas.html\n *\n * @param client - Client to use\n * @returns An estimate (in wei) for the max priority fee per gas. {@link EstimateMaxPriorityFeePerGasReturnType}\n *\n * @example\n * import { createPublicClient, http } from 'viem'\n * import { mainnet } from 'viem/chains'\n * import { estimateMaxPriorityFeePerGas } from 'viem/actions'\n *\n * const client = createPublicClient({\n *   chain: mainnet,\n *   transport: http(),\n * })\n * const maxPriorityFeePerGas = await estimateMaxPriorityFeePerGas(client)\n * // 10000000n\n */\nexport async function estimateMaxPriorityFeePerGas<\n  chain extends Chain | undefined,\n  chainOverride extends Chain | undefined,\n>(\n  client: Client<Transport, chain>,\n  args?: EstimateMaxPriorityFeePerGasParameters<chain, chainOverride>,\n): Promise<EstimateMaxPriorityFeePerGasReturnType> {\n  return internal_estimateMaxPriorityFeePerGas(client, args as any)\n}\n\nexport async function internal_estimateMaxPriorityFeePerGas<\n  chain extends Chain | undefined,\n  chainOverride extends Chain | undefined,\n>(\n  client: Client<Transport, chain>,\n  args: EstimateMaxPriorityFeePerGasParameters<chain, chainOverride> & {\n    block?: Block\n    request?: PrepareTransactionRequestParameters<\n      chain,\n      Account | undefined,\n      chainOverride\n    >\n  },\n): Promise<EstimateMaxPriorityFeePerGasReturnType> {\n  const { block: block_, chain = client.chain, request } = args || {}\n  if (typeof chain?.fees?.defaultPriorityFee === 'function') {\n    const block = block_ || (await getBlock(client))\n    return chain.fees.defaultPriorityFee({\n      block,\n      client,\n      request,\n    } as ChainFeesFnParameters)\n  } else if (chain?.fees?.defaultPriorityFee)\n    return chain?.fees?.defaultPriorityFee\n\n  try {\n    const maxPriorityFeePerGasHex = await client.request({\n      method: 'eth_maxPriorityFeePerGas',\n    })\n    return hexToBigInt(maxPriorityFeePerGasHex)\n  } catch {\n    // If the RPC Provider does not support `eth_maxPriorityFeePerGas`\n    // fall back to calculating it manually via `gasPrice - baseFeePerGas`.\n    // See: https://github.com/ethereum/pm/issues/328#:~:text=eth_maxPriorityFeePerGas%20after%20London%20will%20effectively%20return%20eth_gasPrice%20%2D%20baseFee\n    const [block, gasPrice] = await Promise.all([\n      block_ ? Promise.resolve(block_) : getBlock(client),\n      getGasPrice(client),\n    ])\n\n    if (typeof block.baseFeePerGas !== 'bigint')\n      throw new Eip1559FeesNotSupportedError()\n\n    const maxPriorityFeePerGas = gasPrice - block.baseFeePerGas\n\n    if (maxPriorityFeePerGas < 0n) return 0n\n    return maxPriorityFeePerGas\n  }\n}\n"],"mappings":"AAEA,SAASA,4BAA4B,QAAQ,qBAAqB;AAKlE,SAASC,WAAW,QAAQ,iCAAiC;AAE7D,SAASC,QAAQ,QAAQ,eAAe;AACxC,SAASC,WAAW,QAAQ,kBAAkB;AAQ9C;;;;;;;;;;;;;;;;;;;;;;AAsBA,OAAO,eAAeC,4BAA4BA,CAIhDC,MAAgC,EAChCC,IAAmE;EAEnE,OAAOC,qCAAqC,CAACF,MAAM,EAAEC,IAAW,CAAC;AACnE;AAEA,OAAO,eAAeC,qCAAqCA,CAIzDF,MAAgC,EAChCC,IAOC;EAED,MAAM;IAAEE,KAAK,EAAEC,MAAM;IAAEC,KAAK,GAAGL,MAAM,CAACK,KAAK;IAAEC;EAAO,CAAE,GAAGL,IAAI,IAAI,EAAE;EACnE,IAAI,OAAOI,KAAK,EAAEE,IAAI,EAAEC,kBAAkB,KAAK,UAAU,EAAE;IACzD,MAAML,KAAK,GAAGC,MAAM,KAAK,MAAMP,QAAQ,CAACG,MAAM,CAAC,CAAC;IAChD,OAAOK,KAAK,CAACE,IAAI,CAACC,kBAAkB,CAAC;MACnCL,KAAK;MACLH,MAAM;MACNM;KACwB,CAAC;GAC5B,MAAM,IAAID,KAAK,EAAEE,IAAI,EAAEC,kBAAkB,EACxC,OAAOH,KAAK,EAAEE,IAAI,EAAEC,kBAAkB;EAExC,IAAI;IACF,MAAMC,uBAAuB,GAAG,MAAMT,MAAM,CAACM,OAAO,CAAC;MACnDI,MAAM,EAAE;KACT,CAAC;IACF,OAAOd,WAAW,CAACa,uBAAuB,CAAC;GAC5C,CAAC,MAAM;IACN;IACA;IACA;IACA,MAAM,CAACN,KAAK,EAAEQ,QAAQ,CAAC,GAAG,MAAMC,OAAO,CAACC,GAAG,CAAC,CAC1CT,MAAM,GAAGQ,OAAO,CAACE,OAAO,CAACV,MAAM,CAAC,GAAGP,QAAQ,CAACG,MAAM,CAAC,EACnDF,WAAW,CAACE,MAAM,CAAC,CACpB,CAAC;IAEF,IAAI,OAAOG,KAAK,CAACY,aAAa,KAAK,QAAQ,EACzC,MAAM,IAAIpB,4BAA4B,EAAE;IAE1C,MAAMqB,oBAAoB,GAAGL,QAAQ,GAAGR,KAAK,CAACY,aAAa;IAE3D,IAAIC,oBAAoB,GAAG,EAAE,EAAE,OAAO,EAAE;IACxC,OAAOA,oBAAoB;;AAE/B"},"metadata":{},"sourceType":"module","externalDependencies":[]}