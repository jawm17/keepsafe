{"ast":null,"code":"import { DecodeLogDataMismatch, DecodeLogTopicsMismatch } from '../../errors/abi.js';\nimport { decodeEventLog } from '../../utils/abi/decodeEventLog.js';\nimport { formatLog } from '../../utils/formatters/log.js';\n/**\n * Returns a list of logs or hashes based on a [Filter](/docs/glossary/terms#filter) since the last time it was called.\n *\n * - Docs: https://viem.sh/docs/actions/public/getFilterChanges.html\n * - JSON-RPC Methods: [`eth_getFilterChanges`](https://ethereum.org/en/developers/docs/apis/json-rpc/#eth_getfilterchanges)\n *\n * A Filter can be created from the following actions:\n *\n * - [`createBlockFilter`](https://viem.sh/docs/actions/public/createBlockFilter.html)\n * - [`createContractEventFilter`](https://viem.sh/docs/contract/createContractEventFilter.html)\n * - [`createEventFilter`](https://viem.sh/docs/actions/public/createEventFilter.html)\n * - [`createPendingTransactionFilter`](https://viem.sh/docs/actions/public/createPendingTransactionFilter.html)\n *\n * Depending on the type of filter, the return value will be different:\n *\n * - If the filter was created with `createContractEventFilter` or `createEventFilter`, it returns a list of logs.\n * - If the filter was created with `createPendingTransactionFilter`, it returns a list of transaction hashes.\n * - If the filter was created with `createBlockFilter`, it returns a list of block hashes.\n *\n * @param client - Client to use\n * @param parameters - {@link GetFilterChangesParameters}\n * @returns Logs or hashes. {@link GetFilterChangesReturnType}\n *\n * @example\n * // Blocks\n * import { createPublicClient, http } from 'viem'\n * import { mainnet } from 'viem/chains'\n * import { createBlockFilter, getFilterChanges } from 'viem/public'\n *\n * const client = createPublicClient({\n *   chain: mainnet,\n *   transport: http(),\n * })\n * const filter = await createBlockFilter(client)\n * const hashes = await getFilterChanges(client, { filter })\n *\n * @example\n * // Contract Events\n * import { createPublicClient, http, parseAbi } from 'viem'\n * import { mainnet } from 'viem/chains'\n * import { createContractEventFilter, getFilterChanges } from 'viem/public'\n *\n * const client = createPublicClient({\n *   chain: mainnet,\n *   transport: http(),\n * })\n * const filter = await createContractEventFilter(client, {\n *   address: '0xa0b86991c6218b36c1d19d4a2e9eb0ce3606eb48',\n *   abi: parseAbi(['event Transfer(address indexed, address indexed, uint256)']),\n *   eventName: 'Transfer',\n * })\n * const logs = await getFilterChanges(client, { filter })\n *\n * @example\n * // Raw Events\n * import { createPublicClient, http, parseAbiItem } from 'viem'\n * import { mainnet } from 'viem/chains'\n * import { createEventFilter, getFilterChanges } from 'viem/public'\n *\n * const client = createPublicClient({\n *   chain: mainnet,\n *   transport: http(),\n * })\n * const filter = await createEventFilter(client, {\n *   address: '0xa0b86991c6218b36c1d19d4a2e9eb0ce3606eb48',\n *   event: parseAbiItem('event Transfer(address indexed, address indexed, uint256)'),\n * })\n * const logs = await getFilterChanges(client, { filter })\n *\n * @example\n * // Transactions\n * import { createPublicClient, http } from 'viem'\n * import { mainnet } from 'viem/chains'\n * import { createPendingTransactionFilter, getFilterChanges } from 'viem/public'\n *\n * const client = createPublicClient({\n *   chain: mainnet,\n *   transport: http(),\n * })\n * const filter = await createPendingTransactionFilter(client)\n * const hashes = await getFilterChanges(client, { filter })\n */\nexport async function getFilterChanges(_client, {\n  filter\n}) {\n  const strict = 'strict' in filter && filter.strict;\n  const logs = await filter.request({\n    method: 'eth_getFilterChanges',\n    params: [filter.id]\n  });\n  return logs.map(log => {\n    if (typeof log === 'string') return log;\n    try {\n      const {\n        eventName,\n        args\n      } = 'abi' in filter && filter.abi ? decodeEventLog({\n        abi: filter.abi,\n        data: log.data,\n        topics: log.topics,\n        strict\n      }) : {\n        eventName: undefined,\n        args: undefined\n      };\n      return formatLog(log, {\n        args,\n        eventName\n      });\n    } catch (err) {\n      let eventName;\n      let isUnnamed;\n      if (err instanceof DecodeLogDataMismatch || err instanceof DecodeLogTopicsMismatch) {\n        // If strict mode is on, and log data/topics do not match event definition, skip.\n        if ('strict' in filter && filter.strict) return;\n        eventName = err.abiItem.name;\n        isUnnamed = err.abiItem.inputs?.some(x => !('name' in x && x.name));\n      }\n      // Set args undefined if there is an error decoding (e.g. indexed/non-indexed params mismatch).\n      return formatLog(log, {\n        args: isUnnamed ? [] : {},\n        eventName\n      });\n    }\n  }).filter(Boolean);\n}","map":{"version":3,"names":["DecodeLogDataMismatch","DecodeLogTopicsMismatch","decodeEventLog","formatLog","getFilterChanges","_client","filter","strict","logs","request","method","params","id","map","log","eventName","args","abi","data","topics","undefined","err","isUnnamed","abiItem","name","inputs","some","x","Boolean"],"sources":["/Users/envyhose/Desktop/programs/keepsafe_repo/keepsafe/client/node_modules/viem/actions/public/getFilterChanges.ts"],"sourcesContent":["import type { Abi, AbiEvent, ExtractAbiEvent } from 'abitype'\n\nimport type { Client } from '../../clients/createClient.js'\nimport type { Transport } from '../../clients/transports/createTransport.js'\nimport {\n  DecodeLogDataMismatch,\n  DecodeLogTopicsMismatch,\n} from '../../errors/abi.js'\nimport type { BlockNumber, BlockTag } from '../../types/block.js'\nimport type { Chain } from '../../types/chain.js'\nimport type { Filter, FilterType } from '../../types/filter.js'\nimport type { Log } from '../../types/log.js'\nimport type { Hash } from '../../types/misc.js'\nimport { decodeEventLog } from '../../utils/abi/decodeEventLog.js'\nimport { formatLog } from '../../utils/formatters/log.js'\n\nexport type GetFilterChangesParameters<\n  TFilterType extends FilterType = FilterType,\n  TAbi extends Abi | readonly unknown[] | undefined = undefined,\n  TEventName extends string | undefined = undefined,\n  TStrict extends boolean | undefined = undefined,\n  TFromBlock extends BlockNumber | BlockTag | undefined = undefined,\n  TToBlock extends BlockNumber | BlockTag | undefined = undefined,\n> = {\n  filter: Filter<\n    TFilterType,\n    TAbi,\n    TEventName,\n    any,\n    TStrict,\n    TFromBlock,\n    TToBlock\n  >\n}\n\nexport type GetFilterChangesReturnType<\n  TFilterType extends FilterType = FilterType,\n  TAbi extends Abi | readonly unknown[] | undefined = undefined,\n  TEventName extends string | undefined = undefined,\n  TStrict extends boolean | undefined = undefined,\n  TFromBlock extends BlockNumber | BlockTag | undefined = undefined,\n  TToBlock extends BlockNumber | BlockTag | undefined = undefined,\n  _AbiEvent extends AbiEvent | undefined = TAbi extends Abi\n    ? TEventName extends string\n      ? ExtractAbiEvent<TAbi, TEventName>\n      : undefined\n    : undefined,\n  _Pending extends boolean =\n    | (TFromBlock extends 'pending' ? true : false)\n    | (TToBlock extends 'pending' ? true : false),\n> = TFilterType extends 'event'\n  ? Log<bigint, number, _Pending, _AbiEvent, TStrict, TAbi, TEventName>[]\n  : Hash[]\n\n/**\n * Returns a list of logs or hashes based on a [Filter](/docs/glossary/terms#filter) since the last time it was called.\n *\n * - Docs: https://viem.sh/docs/actions/public/getFilterChanges.html\n * - JSON-RPC Methods: [`eth_getFilterChanges`](https://ethereum.org/en/developers/docs/apis/json-rpc/#eth_getfilterchanges)\n *\n * A Filter can be created from the following actions:\n *\n * - [`createBlockFilter`](https://viem.sh/docs/actions/public/createBlockFilter.html)\n * - [`createContractEventFilter`](https://viem.sh/docs/contract/createContractEventFilter.html)\n * - [`createEventFilter`](https://viem.sh/docs/actions/public/createEventFilter.html)\n * - [`createPendingTransactionFilter`](https://viem.sh/docs/actions/public/createPendingTransactionFilter.html)\n *\n * Depending on the type of filter, the return value will be different:\n *\n * - If the filter was created with `createContractEventFilter` or `createEventFilter`, it returns a list of logs.\n * - If the filter was created with `createPendingTransactionFilter`, it returns a list of transaction hashes.\n * - If the filter was created with `createBlockFilter`, it returns a list of block hashes.\n *\n * @param client - Client to use\n * @param parameters - {@link GetFilterChangesParameters}\n * @returns Logs or hashes. {@link GetFilterChangesReturnType}\n *\n * @example\n * // Blocks\n * import { createPublicClient, http } from 'viem'\n * import { mainnet } from 'viem/chains'\n * import { createBlockFilter, getFilterChanges } from 'viem/public'\n *\n * const client = createPublicClient({\n *   chain: mainnet,\n *   transport: http(),\n * })\n * const filter = await createBlockFilter(client)\n * const hashes = await getFilterChanges(client, { filter })\n *\n * @example\n * // Contract Events\n * import { createPublicClient, http, parseAbi } from 'viem'\n * import { mainnet } from 'viem/chains'\n * import { createContractEventFilter, getFilterChanges } from 'viem/public'\n *\n * const client = createPublicClient({\n *   chain: mainnet,\n *   transport: http(),\n * })\n * const filter = await createContractEventFilter(client, {\n *   address: '0xa0b86991c6218b36c1d19d4a2e9eb0ce3606eb48',\n *   abi: parseAbi(['event Transfer(address indexed, address indexed, uint256)']),\n *   eventName: 'Transfer',\n * })\n * const logs = await getFilterChanges(client, { filter })\n *\n * @example\n * // Raw Events\n * import { createPublicClient, http, parseAbiItem } from 'viem'\n * import { mainnet } from 'viem/chains'\n * import { createEventFilter, getFilterChanges } from 'viem/public'\n *\n * const client = createPublicClient({\n *   chain: mainnet,\n *   transport: http(),\n * })\n * const filter = await createEventFilter(client, {\n *   address: '0xa0b86991c6218b36c1d19d4a2e9eb0ce3606eb48',\n *   event: parseAbiItem('event Transfer(address indexed, address indexed, uint256)'),\n * })\n * const logs = await getFilterChanges(client, { filter })\n *\n * @example\n * // Transactions\n * import { createPublicClient, http } from 'viem'\n * import { mainnet } from 'viem/chains'\n * import { createPendingTransactionFilter, getFilterChanges } from 'viem/public'\n *\n * const client = createPublicClient({\n *   chain: mainnet,\n *   transport: http(),\n * })\n * const filter = await createPendingTransactionFilter(client)\n * const hashes = await getFilterChanges(client, { filter })\n */\nexport async function getFilterChanges<\n  TTransport extends Transport,\n  TChain extends Chain | undefined,\n  TFilterType extends FilterType,\n  const TAbi extends Abi | readonly unknown[] | undefined,\n  TEventName extends string | undefined,\n  TStrict extends boolean | undefined = undefined,\n  TFromBlock extends BlockNumber | BlockTag | undefined = undefined,\n  TToBlock extends BlockNumber | BlockTag | undefined = undefined,\n>(\n  _client: Client<TTransport, TChain>,\n  {\n    filter,\n  }: GetFilterChangesParameters<\n    TFilterType,\n    TAbi,\n    TEventName,\n    TStrict,\n    TFromBlock,\n    TToBlock\n  >,\n): Promise<\n  GetFilterChangesReturnType<\n    TFilterType,\n    TAbi,\n    TEventName,\n    TStrict,\n    TFromBlock,\n    TToBlock\n  >\n> {\n  const strict = 'strict' in filter && filter.strict\n\n  const logs = await filter.request({\n    method: 'eth_getFilterChanges',\n    params: [filter.id],\n  })\n  return logs\n    .map((log) => {\n      if (typeof log === 'string') return log\n      try {\n        const { eventName, args } =\n          'abi' in filter && filter.abi\n            ? decodeEventLog({\n                abi: filter.abi,\n                data: log.data,\n                topics: log.topics as any,\n                strict,\n              })\n            : { eventName: undefined, args: undefined }\n        return formatLog(log, { args, eventName })\n      } catch (err) {\n        let eventName\n        let isUnnamed\n        if (\n          err instanceof DecodeLogDataMismatch ||\n          err instanceof DecodeLogTopicsMismatch\n        ) {\n          // If strict mode is on, and log data/topics do not match event definition, skip.\n          if ('strict' in filter && filter.strict) return\n          eventName = err.abiItem.name\n          isUnnamed = err.abiItem.inputs?.some((x) => !('name' in x && x.name))\n        }\n\n        // Set args undefined if there is an error decoding (e.g. indexed/non-indexed params mismatch).\n        return formatLog(log, { args: isUnnamed ? [] : {}, eventName })\n      }\n    })\n    .filter(Boolean) as GetFilterChangesReturnType<\n    TFilterType,\n    TAbi,\n    TEventName,\n    TStrict,\n    TFromBlock,\n    TToBlock\n  >\n}\n"],"mappings":"AAIA,SACEA,qBAAqB,EACrBC,uBAAuB,QAClB,qBAAqB;AAM5B,SAASC,cAAc,QAAQ,mCAAmC;AAClE,SAASC,SAAS,QAAQ,+BAA+B;AAwCzD;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAkFA,OAAO,eAAeC,gBAAgBA,CAUpCC,OAAmC,EACnC;EACEC;AAAM,CAQP;EAWD,MAAMC,MAAM,GAAG,QAAQ,IAAID,MAAM,IAAIA,MAAM,CAACC,MAAM;EAElD,MAAMC,IAAI,GAAG,MAAMF,MAAM,CAACG,OAAO,CAAC;IAChCC,MAAM,EAAE,sBAAsB;IAC9BC,MAAM,EAAE,CAACL,MAAM,CAACM,EAAE;GACnB,CAAC;EACF,OAAOJ,IAAI,CACRK,GAAG,CAAEC,GAAG,IAAI;IACX,IAAI,OAAOA,GAAG,KAAK,QAAQ,EAAE,OAAOA,GAAG;IACvC,IAAI;MACF,MAAM;QAAEC,SAAS;QAAEC;MAAI,CAAE,GACvB,KAAK,IAAIV,MAAM,IAAIA,MAAM,CAACW,GAAG,GACzBf,cAAc,CAAC;QACbe,GAAG,EAAEX,MAAM,CAACW,GAAG;QACfC,IAAI,EAAEJ,GAAG,CAACI,IAAI;QACdC,MAAM,EAAEL,GAAG,CAACK,MAAa;QACzBZ;OACD,CAAC,GACF;QAAEQ,SAAS,EAAEK,SAAS;QAAEJ,IAAI,EAAEI;MAAS,CAAE;MAC/C,OAAOjB,SAAS,CAACW,GAAG,EAAE;QAAEE,IAAI;QAAED;MAAS,CAAE,CAAC;KAC3C,CAAC,OAAOM,GAAG,EAAE;MACZ,IAAIN,SAAS;MACb,IAAIO,SAAS;MACb,IACED,GAAG,YAAYrB,qBAAqB,IACpCqB,GAAG,YAAYpB,uBAAuB,EACtC;QACA;QACA,IAAI,QAAQ,IAAIK,MAAM,IAAIA,MAAM,CAACC,MAAM,EAAE;QACzCQ,SAAS,GAAGM,GAAG,CAACE,OAAO,CAACC,IAAI;QAC5BF,SAAS,GAAGD,GAAG,CAACE,OAAO,CAACE,MAAM,EAAEC,IAAI,CAAEC,CAAC,IAAK,EAAE,MAAM,IAAIA,CAAC,IAAIA,CAAC,CAACH,IAAI,CAAC,CAAC;;MAGvE;MACA,OAAOrB,SAAS,CAACW,GAAG,EAAE;QAAEE,IAAI,EAAEM,SAAS,GAAG,EAAE,GAAG,EAAE;QAAEP;MAAS,CAAE,CAAC;;EAEnE,CAAC,CAAC,CACDT,MAAM,CAACsB,OAAO,CAOhB;AACH"},"metadata":{},"sourceType":"module","externalDependencies":[]}