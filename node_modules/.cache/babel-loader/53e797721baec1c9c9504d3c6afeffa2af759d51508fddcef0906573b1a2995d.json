{"ast":null,"code":"/**\n * Resets fork back to its original state.\n *\n * - Docs: https://viem.sh/docs/actions/test/reset.html\n *\n * @param client - Client to use\n * @param parameters – {@link ResetParameters}\n *\n * @example\n * import { createTestClient, http } from 'viem'\n * import { foundry } from 'viem/chains'\n * import { reset } from 'viem/test'\n *\n * const client = createTestClient({\n *   mode: 'anvil',\n *   chain: 'foundry',\n *   transport: http(),\n * })\n * await reset(client, { blockNumber: 69420n })\n */\nexport async function reset(client, {\n  blockNumber,\n  jsonRpcUrl\n} = {}) {\n  await client.request({\n    method: `${client.mode}_reset`,\n    params: [{\n      forking: {\n        blockNumber: Number(blockNumber),\n        jsonRpcUrl\n      }\n    }]\n  });\n}","map":{"version":3,"names":["reset","client","blockNumber","jsonRpcUrl","request","method","mode","params","forking","Number"],"sources":["/Users/envyhose/Desktop/programs/keepsafe_repo/keepsafe/client/node_modules/viem/actions/test/reset.ts"],"sourcesContent":["import type {\n  TestClient,\n  TestClientMode,\n} from '../../clients/createTestClient.js'\nimport type { Transport } from '../../clients/transports/createTransport.js'\nimport type { Account } from '../../types/account.js'\nimport type { Chain } from '../../types/chain.js'\n\nexport type ResetParameters = {\n  /** The block number to reset from. */\n  blockNumber?: bigint\n  /** The JSON RPC URL. */\n  jsonRpcUrl?: string\n}\n\n/**\n * Resets fork back to its original state.\n *\n * - Docs: https://viem.sh/docs/actions/test/reset.html\n *\n * @param client - Client to use\n * @param parameters – {@link ResetParameters}\n *\n * @example\n * import { createTestClient, http } from 'viem'\n * import { foundry } from 'viem/chains'\n * import { reset } from 'viem/test'\n *\n * const client = createTestClient({\n *   mode: 'anvil',\n *   chain: 'foundry',\n *   transport: http(),\n * })\n * await reset(client, { blockNumber: 69420n })\n */\nexport async function reset<\n  TChain extends Chain | undefined,\n  TAccount extends Account | undefined,\n>(\n  client: TestClient<TestClientMode, Transport, TChain, TAccount, false>,\n  { blockNumber, jsonRpcUrl }: ResetParameters = {},\n) {\n  await client.request({\n    method: `${client.mode}_reset`,\n    params: [{ forking: { blockNumber: Number(blockNumber), jsonRpcUrl } }],\n  })\n}\n"],"mappings":"AAeA;;;;;;;;;;;;;;;;;;;;AAoBA,OAAO,eAAeA,KAAKA,CAIzBC,MAAsE,EACtE;EAAEC,WAAW;EAAEC;AAAU,IAAsB,EAAE;EAEjD,MAAMF,MAAM,CAACG,OAAO,CAAC;IACnBC,MAAM,EAAE,GAAGJ,MAAM,CAACK,IAAI,QAAQ;IAC9BC,MAAM,EAAE,CAAC;MAAEC,OAAO,EAAE;QAAEN,WAAW,EAAEO,MAAM,CAACP,WAAW,CAAC;QAAEC;MAAU;IAAE,CAAE;GACvE,CAAC;AACJ"},"metadata":{},"sourceType":"module","externalDependencies":[]}