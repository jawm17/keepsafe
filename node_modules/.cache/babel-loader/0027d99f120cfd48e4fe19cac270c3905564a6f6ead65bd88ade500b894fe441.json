{"ast":null,"code":"import { getCache, withCache } from '../../utils/promise/withCache.js';\nconst cacheKey = id => `blockNumber.${id}`;\nexport function getBlockNumberCache(id) {\n  return getCache(cacheKey(id));\n}\n/**\n * Returns the number of the most recent block seen.\n *\n * - Docs: https://viem.sh/docs/actions/public/getBlockNumber.html\n * - Examples: https://stackblitz.com/github/wagmi-dev/viem/tree/main/examples/blocks/fetching-blocks\n * - JSON-RPC Methods: [`eth_blockNumber`](https://ethereum.org/en/developers/docs/apis/json-rpc/#eth_blocknumber)\n *\n * @param client - Client to use\n * @param parameters - {@link GetBlockNumberParameters}\n * @returns The number of the block. {@link GetBlockNumberReturnType}\n *\n * @example\n * import { createPublicClient, http } from 'viem'\n * import { mainnet } from 'viem/chains'\n * import { getBlockNumber } from 'viem/public'\n *\n * const client = createPublicClient({\n *   chain: mainnet,\n *   transport: http(),\n * })\n * const blockNumber = await getBlockNumber(client)\n * // 69420n\n */\nexport async function getBlockNumber(client, {\n  cacheTime = client.cacheTime,\n  maxAge\n} = {}) {\n  const blockNumberHex = await withCache(() => client.request({\n    method: 'eth_blockNumber'\n  }), {\n    cacheKey: cacheKey(client.uid),\n    cacheTime: maxAge ?? cacheTime\n  });\n  return BigInt(blockNumberHex);\n}","map":{"version":3,"names":["getCache","withCache","cacheKey","id","getBlockNumberCache","getBlockNumber","client","cacheTime","maxAge","blockNumberHex","request","method","uid","BigInt"],"sources":["/Users/envyhose/Desktop/programs/keepsafe_repo/keepsafe/client/node_modules/viem/actions/public/getBlockNumber.ts"],"sourcesContent":["import type { Client } from '../../clients/createClient.js'\nimport type { Transport } from '../../clients/transports/createTransport.js'\nimport type { Chain } from '../../types/chain.js'\nimport { getCache, withCache } from '../../utils/promise/withCache.js'\n\nexport type GetBlockNumberParameters = {\n  /** Time (in ms) that cached block number will remain in memory. */\n  cacheTime?: number\n  /** @deprecated use `cacheTime` instead. */\n  maxAge?: number\n}\n\nexport type GetBlockNumberReturnType = bigint\n\nconst cacheKey = (id: string) => `blockNumber.${id}`\n\nexport function getBlockNumberCache(id: string) {\n  return getCache(cacheKey(id))\n}\n\n/**\n * Returns the number of the most recent block seen.\n *\n * - Docs: https://viem.sh/docs/actions/public/getBlockNumber.html\n * - Examples: https://stackblitz.com/github/wagmi-dev/viem/tree/main/examples/blocks/fetching-blocks\n * - JSON-RPC Methods: [`eth_blockNumber`](https://ethereum.org/en/developers/docs/apis/json-rpc/#eth_blocknumber)\n *\n * @param client - Client to use\n * @param parameters - {@link GetBlockNumberParameters}\n * @returns The number of the block. {@link GetBlockNumberReturnType}\n *\n * @example\n * import { createPublicClient, http } from 'viem'\n * import { mainnet } from 'viem/chains'\n * import { getBlockNumber } from 'viem/public'\n *\n * const client = createPublicClient({\n *   chain: mainnet,\n *   transport: http(),\n * })\n * const blockNumber = await getBlockNumber(client)\n * // 69420n\n */\nexport async function getBlockNumber<TChain extends Chain | undefined>(\n  client: Client<Transport, TChain>,\n  { cacheTime = client.cacheTime, maxAge }: GetBlockNumberParameters = {},\n): Promise<GetBlockNumberReturnType> {\n  const blockNumberHex = await withCache(\n    () =>\n      client.request({\n        method: 'eth_blockNumber',\n      }),\n    { cacheKey: cacheKey(client.uid), cacheTime: maxAge ?? cacheTime },\n  )\n  return BigInt(blockNumberHex)\n}\n"],"mappings":"AAGA,SAASA,QAAQ,EAAEC,SAAS,QAAQ,kCAAkC;AAWtE,MAAMC,QAAQ,GAAIC,EAAU,IAAK,eAAeA,EAAE,EAAE;AAEpD,OAAM,SAAUC,mBAAmBA,CAACD,EAAU;EAC5C,OAAOH,QAAQ,CAACE,QAAQ,CAACC,EAAE,CAAC,CAAC;AAC/B;AAEA;;;;;;;;;;;;;;;;;;;;;;;AAuBA,OAAO,eAAeE,cAAcA,CAClCC,MAAiC,EACjC;EAAEC,SAAS,GAAGD,MAAM,CAACC,SAAS;EAAEC;AAAM,IAA+B,EAAE;EAEvE,MAAMC,cAAc,GAAG,MAAMR,SAAS,CACpC,MACEK,MAAM,CAACI,OAAO,CAAC;IACbC,MAAM,EAAE;GACT,CAAC,EACJ;IAAET,QAAQ,EAAEA,QAAQ,CAACI,MAAM,CAACM,GAAG,CAAC;IAAEL,SAAS,EAAEC,MAAM,IAAID;EAAS,CAAE,CACnE;EACD,OAAOM,MAAM,CAACJ,cAAc,CAAC;AAC/B"},"metadata":{},"sourceType":"module","externalDependencies":[]}