{"ast":null,"code":"import { parseAccount } from '../../accounts/utils/parseAccount.js';\nimport { AccountNotFoundError } from '../../errors/account.js';\nimport '../../types/rpc.js';\nimport { assertCurrentChain } from '../../utils/chain.js';\nimport { formatTransactionRequest } from '../../utils/formatters/transactionRequest.js';\nimport { numberToHex } from '../../utils/index.js';\nimport { assertRequest } from '../../utils/transaction/assertRequest.js';\nimport { getChainId } from '../public/getChainId.js';\n/**\n * Signs a transaction.\n *\n * - Docs: https://viem.sh/docs/actions/wallet/signTransaction.html\n * - JSON-RPC Methods:\n *   - JSON-RPC Accounts: [`eth_signTransaction`](https://ethereum.github.io/execution-apis/api-documentation/)\n *   - Local Accounts: Signs locally. No JSON-RPC request.\n *\n * @param args - {@link SignTransactionParameters}\n * @returns The signed serialized tranasction. {@link SignTransactionReturnType}\n *\n * @example\n * import { createWalletClient, custom } from 'viem'\n * import { mainnet } from 'viem/chains'\n * import { signTransaction } from 'viem/actions'\n *\n * const client = createWalletClient({\n *   chain: mainnet,\n *   transport: custom(window.ethereum),\n * })\n * const signature = await signTransaction(client, {\n *   account: '0xA0Cf798816D4b9b9866b5330EEa46a18382f251e',\n *   to: '0x0000000000000000000000000000000000000000',\n *   value: 1n,\n * })\n *\n * @example\n * // Account Hoisting\n * import { createWalletClient, http } from 'viem'\n * import { privateKeyToAccount } from 'viem/accounts'\n * import { mainnet } from 'viem/chains'\n * import { signTransaction } from 'viem/actions'\n *\n * const client = createWalletClient({\n *   account: privateKeyToAccount('0x…'),\n *   chain: mainnet,\n *   transport: custom(window.ethereum),\n * })\n * const signature = await signTransaction(client, {\n *   to: '0x0000000000000000000000000000000000000000',\n *   value: 1n,\n * })\n */\nexport async function signTransaction(client, args) {\n  const {\n    account: account_ = client.account,\n    chain = client.chain,\n    ...transaction\n  } = args;\n  if (!account_) throw new AccountNotFoundError({\n    docsPath: '/docs/actions/wallet/signTransaction'\n  });\n  const account = parseAccount(account_);\n  assertRequest({\n    account,\n    ...args\n  });\n  const chainId = await getChainId(client);\n  if (chain !== null) assertCurrentChain({\n    currentChainId: chainId,\n    chain\n  });\n  const formatters = chain?.formatters || client.chain?.formatters;\n  const format = formatters?.transactionRequest?.format || formatTransactionRequest;\n  if (account.type === 'local') return account.signTransaction({\n    chainId,\n    ...transaction\n  }, {\n    serializer: client.chain?.serializers?.transaction\n  });\n  return await client.request({\n    method: 'eth_signTransaction',\n    params: [{\n      ...format(transaction),\n      chainId: numberToHex(chainId),\n      from: account.address\n    }]\n  });\n}","map":{"version":3,"names":["parseAccount","AccountNotFoundError","assertCurrentChain","formatTransactionRequest","numberToHex","assertRequest","getChainId","signTransaction","client","args","account","account_","chain","transaction","docsPath","chainId","currentChainId","formatters","format","transactionRequest","type","serializer","serializers","request","method","params","from","address"],"sources":["/Users/envyhose/Desktop/programs/keepsafe_repo/keepsafe/client/node_modules/viem/actions/wallet/signTransaction.ts"],"sourcesContent":["import type { Account } from '../../accounts/types.js'\nimport { parseAccount } from '../../accounts/utils/parseAccount.js'\nimport type { Client } from '../../clients/createClient.js'\nimport type { Transport } from '../../clients/transports/createTransport.js'\nimport { AccountNotFoundError } from '../../errors/account.js'\nimport type { GetAccountParameter } from '../../types/account.js'\nimport type { Chain, GetChain } from '../../types/chain.js'\nimport { type RpcTransactionRequest } from '../../types/rpc.js'\nimport type {\n  TransactionRequest,\n  TransactionSerializable,\n  TransactionSerialized,\n} from '../../types/transaction.js'\nimport type { UnionOmit } from '../../types/utils.js'\nimport { assertCurrentChain } from '../../utils/chain.js'\nimport {\n  type FormattedTransactionRequest,\n  formatTransactionRequest,\n} from '../../utils/formatters/transactionRequest.js'\nimport { numberToHex } from '../../utils/index.js'\nimport { assertRequest } from '../../utils/transaction/assertRequest.js'\nimport { getChainId } from '../public/getChainId.js'\n\nexport type SignTransactionParameters<\n  TChain extends Chain | undefined = Chain | undefined,\n  TAccount extends Account | undefined = Account | undefined,\n  TChainOverride extends Chain | undefined = Chain | undefined,\n> = UnionOmit<\n  FormattedTransactionRequest<\n    TChainOverride extends Chain ? TChainOverride : TChain\n  >,\n  'from'\n> &\n  GetAccountParameter<TAccount> &\n  GetChain<TChain, TChainOverride>\n\nexport type SignTransactionReturnType = TransactionSerialized\n\n/**\n * Signs a transaction.\n *\n * - Docs: https://viem.sh/docs/actions/wallet/signTransaction.html\n * - JSON-RPC Methods:\n *   - JSON-RPC Accounts: [`eth_signTransaction`](https://ethereum.github.io/execution-apis/api-documentation/)\n *   - Local Accounts: Signs locally. No JSON-RPC request.\n *\n * @param args - {@link SignTransactionParameters}\n * @returns The signed serialized tranasction. {@link SignTransactionReturnType}\n *\n * @example\n * import { createWalletClient, custom } from 'viem'\n * import { mainnet } from 'viem/chains'\n * import { signTransaction } from 'viem/actions'\n *\n * const client = createWalletClient({\n *   chain: mainnet,\n *   transport: custom(window.ethereum),\n * })\n * const signature = await signTransaction(client, {\n *   account: '0xA0Cf798816D4b9b9866b5330EEa46a18382f251e',\n *   to: '0x0000000000000000000000000000000000000000',\n *   value: 1n,\n * })\n *\n * @example\n * // Account Hoisting\n * import { createWalletClient, http } from 'viem'\n * import { privateKeyToAccount } from 'viem/accounts'\n * import { mainnet } from 'viem/chains'\n * import { signTransaction } from 'viem/actions'\n *\n * const client = createWalletClient({\n *   account: privateKeyToAccount('0x…'),\n *   chain: mainnet,\n *   transport: custom(window.ethereum),\n * })\n * const signature = await signTransaction(client, {\n *   to: '0x0000000000000000000000000000000000000000',\n *   value: 1n,\n * })\n */\nexport async function signTransaction<\n  TChain extends Chain | undefined,\n  TAccount extends Account | undefined,\n  TChainOverride extends Chain | undefined,\n>(\n  client: Client<Transport, TChain, TAccount>,\n  args: SignTransactionParameters<TChain, TAccount, TChainOverride>,\n): Promise<SignTransactionReturnType> {\n  const {\n    account: account_ = client.account,\n    chain = client.chain,\n    ...transaction\n  } = args\n\n  if (!account_)\n    throw new AccountNotFoundError({\n      docsPath: '/docs/actions/wallet/signTransaction',\n    })\n  const account = parseAccount(account_)\n\n  assertRequest({\n    account,\n    ...args,\n  })\n\n  const chainId = await getChainId(client)\n  if (chain !== null)\n    assertCurrentChain({\n      currentChainId: chainId,\n      chain,\n    })\n\n  const formatters = chain?.formatters || client.chain?.formatters\n  const format =\n    formatters?.transactionRequest?.format || formatTransactionRequest\n\n  if (account.type === 'local')\n    return account.signTransaction(\n      {\n        chainId,\n        ...transaction,\n      } as unknown as TransactionSerializable,\n      { serializer: client.chain?.serializers?.transaction },\n    ) as Promise<SignTransactionReturnType>\n\n  return await client.request({\n    method: 'eth_signTransaction',\n    params: [\n      {\n        ...format(transaction as unknown as TransactionRequest),\n        chainId: numberToHex(chainId),\n        from: account.address,\n      } as unknown as RpcTransactionRequest,\n    ],\n  })\n}\n"],"mappings":"AACA,SAASA,YAAY,QAAQ,sCAAsC;AAGnE,SAASC,oBAAoB,QAAQ,yBAAyB;AAG9D,OAA2C,oBAAoB;AAO/D,SAASC,kBAAkB,QAAQ,sBAAsB;AACzD,SAEEC,wBAAwB,QACnB,8CAA8C;AACrD,SAASC,WAAW,QAAQ,sBAAsB;AAClD,SAASC,aAAa,QAAQ,0CAA0C;AACxE,SAASC,UAAU,QAAQ,yBAAyB;AAiBpD;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA2CA,OAAO,eAAeC,eAAeA,CAKnCC,MAA2C,EAC3CC,IAAiE;EAEjE,MAAM;IACJC,OAAO,EAAEC,QAAQ,GAAGH,MAAM,CAACE,OAAO;IAClCE,KAAK,GAAGJ,MAAM,CAACI,KAAK;IACpB,GAAGC;EAAW,CACf,GAAGJ,IAAI;EAER,IAAI,CAACE,QAAQ,EACX,MAAM,IAAIV,oBAAoB,CAAC;IAC7Ba,QAAQ,EAAE;GACX,CAAC;EACJ,MAAMJ,OAAO,GAAGV,YAAY,CAACW,QAAQ,CAAC;EAEtCN,aAAa,CAAC;IACZK,OAAO;IACP,GAAGD;GACJ,CAAC;EAEF,MAAMM,OAAO,GAAG,MAAMT,UAAU,CAACE,MAAM,CAAC;EACxC,IAAII,KAAK,KAAK,IAAI,EAChBV,kBAAkB,CAAC;IACjBc,cAAc,EAAED,OAAO;IACvBH;GACD,CAAC;EAEJ,MAAMK,UAAU,GAAGL,KAAK,EAAEK,UAAU,IAAIT,MAAM,CAACI,KAAK,EAAEK,UAAU;EAChE,MAAMC,MAAM,GACVD,UAAU,EAAEE,kBAAkB,EAAED,MAAM,IAAIf,wBAAwB;EAEpE,IAAIO,OAAO,CAACU,IAAI,KAAK,OAAO,EAC1B,OAAOV,OAAO,CAACH,eAAe,CAC5B;IACEQ,OAAO;IACP,GAAGF;GACkC,EACvC;IAAEQ,UAAU,EAAEb,MAAM,CAACI,KAAK,EAAEU,WAAW,EAAET;EAAW,CAAE,CACjB;EAEzC,OAAO,MAAML,MAAM,CAACe,OAAO,CAAC;IAC1BC,MAAM,EAAE,qBAAqB;IAC7BC,MAAM,EAAE,CACN;MACE,GAAGP,MAAM,CAACL,WAA4C,CAAC;MACvDE,OAAO,EAAEX,WAAW,CAACW,OAAO,CAAC;MAC7BW,IAAI,EAAEhB,OAAO,CAACiB;KACqB;GAExC,CAAC;AACJ"},"metadata":{},"sourceType":"module","externalDependencies":[]}