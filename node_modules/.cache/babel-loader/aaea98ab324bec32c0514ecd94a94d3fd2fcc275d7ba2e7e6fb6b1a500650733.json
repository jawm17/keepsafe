{"ast":null,"code":"import { wait } from '../wait.js';\nexport function withRetry(fn, {\n  delay: delay_ = 100,\n  retryCount = 2,\n  shouldRetry = () => true\n} = {}) {\n  return new Promise((resolve, reject) => {\n    const attemptRetry = async ({\n      count = 0\n    } = {}) => {\n      const retry = async ({\n        error\n      }) => {\n        const delay = typeof delay_ === 'function' ? delay_({\n          count,\n          error\n        }) : delay_;\n        if (delay) await wait(delay);\n        attemptRetry({\n          count: count + 1\n        });\n      };\n      try {\n        const data = await fn();\n        resolve(data);\n      } catch (err) {\n        if (count < retryCount && (await shouldRetry({\n          count,\n          error: err\n        }))) return retry({\n          error: err\n        });\n        reject(err);\n      }\n    };\n    attemptRetry();\n  });\n}","map":{"version":3,"names":["wait","withRetry","fn","delay","delay_","retryCount","shouldRetry","Promise","resolve","reject","attemptRetry","count","retry","error","data","err"],"sources":["/Users/envyhose/Desktop/programs/keepsafe_repo/keepsafe/client/node_modules/viem/utils/promise/withRetry.ts"],"sourcesContent":["import { wait } from '../wait.js'\n\nexport function withRetry<TData>(\n  fn: () => Promise<TData>,\n  {\n    delay: delay_ = 100,\n    retryCount = 2,\n    shouldRetry = () => true,\n  }: {\n    // The delay (in ms) between retries.\n    delay?: ((config: { count: number; error: Error }) => number) | number\n    // The max number of times to retry.\n    retryCount?: number\n    // Whether or not to retry when an error is thrown.\n    shouldRetry?: ({\n      count,\n      error,\n    }: {\n      count: number\n      error: Error\n    }) => Promise<boolean> | boolean\n  } = {},\n) {\n  return new Promise<TData>((resolve, reject) => {\n    const attemptRetry = async ({ count = 0 } = {}) => {\n      const retry = async ({ error }: { error: Error }) => {\n        const delay =\n          typeof delay_ === 'function' ? delay_({ count, error }) : delay_\n        if (delay) await wait(delay)\n        attemptRetry({ count: count + 1 })\n      }\n\n      try {\n        const data = await fn()\n        resolve(data)\n      } catch (err) {\n        if (\n          count < retryCount &&\n          (await shouldRetry({ count, error: err as Error }))\n        )\n          return retry({ error: err as Error })\n        reject(err)\n      }\n    }\n    attemptRetry()\n  })\n}\n"],"mappings":"AAAA,SAASA,IAAI,QAAQ,YAAY;AAEjC,OAAM,SAAUC,SAASA,CACvBC,EAAwB,EACxB;EACEC,KAAK,EAAEC,MAAM,GAAG,GAAG;EACnBC,UAAU,GAAG,CAAC;EACdC,WAAW,GAAGA,CAAA,KAAM;AAAI,IActB,EAAE;EAEN,OAAO,IAAIC,OAAO,CAAQ,CAACC,OAAO,EAAEC,MAAM,KAAI;IAC5C,MAAMC,YAAY,GAAG,MAAAA,CAAO;MAAEC,KAAK,GAAG;IAAC,CAAE,GAAG,EAAE,KAAI;MAChD,MAAMC,KAAK,GAAG,MAAAA,CAAO;QAAEC;MAAK,CAAoB,KAAI;QAClD,MAAMV,KAAK,GACT,OAAOC,MAAM,KAAK,UAAU,GAAGA,MAAM,CAAC;UAAEO,KAAK;UAAEE;QAAK,CAAE,CAAC,GAAGT,MAAM;QAClE,IAAID,KAAK,EAAE,MAAMH,IAAI,CAACG,KAAK,CAAC;QAC5BO,YAAY,CAAC;UAAEC,KAAK,EAAEA,KAAK,GAAG;QAAC,CAAE,CAAC;MACpC,CAAC;MAED,IAAI;QACF,MAAMG,IAAI,GAAG,MAAMZ,EAAE,EAAE;QACvBM,OAAO,CAACM,IAAI,CAAC;OACd,CAAC,OAAOC,GAAG,EAAE;QACZ,IACEJ,KAAK,GAAGN,UAAU,KACjB,MAAMC,WAAW,CAAC;UAAEK,KAAK;UAAEE,KAAK,EAAEE;QAAY,CAAE,CAAC,CAAC,EAEnD,OAAOH,KAAK,CAAC;UAAEC,KAAK,EAAEE;QAAY,CAAE,CAAC;QACvCN,MAAM,CAACM,GAAG,CAAC;;IAEf,CAAC;IACDL,YAAY,EAAE;EAChB,CAAC,CAAC;AACJ"},"metadata":{},"sourceType":"module","externalDependencies":[]}