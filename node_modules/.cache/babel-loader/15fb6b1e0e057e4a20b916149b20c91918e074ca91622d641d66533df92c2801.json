{"ast":null,"code":"import { BlockNotFoundError } from '../../errors/block.js';\nimport { numberToHex } from '../../utils/encoding/toHex.js';\nimport { formatBlock } from '../../utils/formatters/block.js';\n/**\n * Returns information about a block at a block number, hash, or tag.\n *\n * - Docs: https://viem.sh/docs/actions/public/getBlock.html\n * - Examples: https://stackblitz.com/github/wagmi-dev/viem/tree/main/examples/blocks/fetching-blocks\n * - JSON-RPC Methods:\n *   - Calls [`eth_getBlockByNumber`](https://ethereum.org/en/developers/docs/apis/json-rpc/#eth_getblockbynumber) for `blockNumber` & `blockTag`.\n *   - Calls [`eth_getBlockByHash`](https://ethereum.org/en/developers/docs/apis/json-rpc/#eth_getblockbyhash) for `blockHash`.\n *\n * @param client - Client to use\n * @param parameters - {@link GetBlockParameters}\n * @returns Information about the block. {@link GetBlockReturnType}\n *\n * @example\n * import { createPublicClient, http } from 'viem'\n * import { mainnet } from 'viem/chains'\n * import { getBlock } from 'viem/public'\n *\n * const client = createPublicClient({\n *   chain: mainnet,\n *   transport: http(),\n * })\n * const block = await getBlock(client)\n */\nexport async function getBlock(client, {\n  blockHash,\n  blockNumber,\n  blockTag: blockTag_,\n  includeTransactions: includeTransactions_\n} = {}) {\n  const blockTag = blockTag_ ?? 'latest';\n  const includeTransactions = includeTransactions_ ?? false;\n  const blockNumberHex = blockNumber !== undefined ? numberToHex(blockNumber) : undefined;\n  let block = null;\n  if (blockHash) {\n    block = await client.request({\n      method: 'eth_getBlockByHash',\n      params: [blockHash, includeTransactions]\n    });\n  } else {\n    block = await client.request({\n      method: 'eth_getBlockByNumber',\n      params: [blockNumberHex || blockTag, includeTransactions]\n    });\n  }\n  if (!block) throw new BlockNotFoundError({\n    blockHash,\n    blockNumber\n  });\n  const format = client.chain?.formatters?.block?.format || formatBlock;\n  return format(block);\n}","map":{"version":3,"names":["BlockNotFoundError","numberToHex","formatBlock","getBlock","client","blockHash","blockNumber","blockTag","blockTag_","includeTransactions","includeTransactions_","blockNumberHex","undefined","block","request","method","params","format","chain","formatters"],"sources":["/Users/envyhose/Desktop/programs/keepsafe_repo/keepsafe/client/node_modules/viem/actions/public/getBlock.ts"],"sourcesContent":["import type { Account } from '../../accounts/types.js'\nimport type { Client } from '../../clients/createClient.js'\nimport type { Transport } from '../../clients/transports/createTransport.js'\nimport { BlockNotFoundError } from '../../errors/block.js'\nimport type { BlockTag } from '../../types/block.js'\nimport type { Chain } from '../../types/chain.js'\nimport type { Hash } from '../../types/misc.js'\nimport type { RpcBlock } from '../../types/rpc.js'\nimport { numberToHex } from '../../utils/encoding/toHex.js'\nimport {\n  type FormattedBlock,\n  formatBlock,\n} from '../../utils/formatters/block.js'\n\nexport type GetBlockParameters<\n  TIncludeTransactions extends boolean = false,\n  TBlockTag extends BlockTag = 'latest',\n> = {\n  /** Whether or not to include transaction data in the response. */\n  includeTransactions?: TIncludeTransactions\n} & (\n  | {\n      /** Hash of the block. */\n      blockHash?: Hash\n      blockNumber?: never\n      blockTag?: never\n    }\n  | {\n      blockHash?: never\n      /** The block number. */\n      blockNumber?: bigint\n      blockTag?: never\n    }\n  | {\n      blockHash?: never\n      blockNumber?: never\n      /**\n       * The block tag.\n       * @default 'latest'\n       */\n      blockTag?: TBlockTag | BlockTag\n    }\n)\n\nexport type GetBlockReturnType<\n  TChain extends Chain | undefined = Chain | undefined,\n  TIncludeTransactions extends boolean = false,\n  TBlockTag extends BlockTag = 'latest',\n> = FormattedBlock<TChain, TIncludeTransactions, TBlockTag>\n\n/**\n * Returns information about a block at a block number, hash, or tag.\n *\n * - Docs: https://viem.sh/docs/actions/public/getBlock.html\n * - Examples: https://stackblitz.com/github/wagmi-dev/viem/tree/main/examples/blocks/fetching-blocks\n * - JSON-RPC Methods:\n *   - Calls [`eth_getBlockByNumber`](https://ethereum.org/en/developers/docs/apis/json-rpc/#eth_getblockbynumber) for `blockNumber` & `blockTag`.\n *   - Calls [`eth_getBlockByHash`](https://ethereum.org/en/developers/docs/apis/json-rpc/#eth_getblockbyhash) for `blockHash`.\n *\n * @param client - Client to use\n * @param parameters - {@link GetBlockParameters}\n * @returns Information about the block. {@link GetBlockReturnType}\n *\n * @example\n * import { createPublicClient, http } from 'viem'\n * import { mainnet } from 'viem/chains'\n * import { getBlock } from 'viem/public'\n *\n * const client = createPublicClient({\n *   chain: mainnet,\n *   transport: http(),\n * })\n * const block = await getBlock(client)\n */\nexport async function getBlock<\n  TChain extends Chain | undefined,\n  TAccount extends Account | undefined,\n  TIncludeTransactions extends boolean = false,\n  TBlockTag extends BlockTag = 'latest',\n>(\n  client: Client<Transport, TChain, TAccount>,\n  {\n    blockHash,\n    blockNumber,\n    blockTag: blockTag_,\n    includeTransactions: includeTransactions_,\n  }: GetBlockParameters<TIncludeTransactions, TBlockTag> = {},\n): Promise<GetBlockReturnType<TChain, TIncludeTransactions, TBlockTag>> {\n  const blockTag = blockTag_ ?? 'latest'\n  const includeTransactions = includeTransactions_ ?? false\n\n  const blockNumberHex =\n    blockNumber !== undefined ? numberToHex(blockNumber) : undefined\n\n  let block: RpcBlock | null = null\n  if (blockHash) {\n    block = await client.request({\n      method: 'eth_getBlockByHash',\n      params: [blockHash, includeTransactions],\n    })\n  } else {\n    block = await client.request({\n      method: 'eth_getBlockByNumber',\n      params: [blockNumberHex || blockTag, includeTransactions],\n    })\n  }\n\n  if (!block) throw new BlockNotFoundError({ blockHash, blockNumber })\n\n  const format = client.chain?.formatters?.block?.format || formatBlock\n  return format(block)\n}\n"],"mappings":"AAGA,SAASA,kBAAkB,QAAQ,uBAAuB;AAK1D,SAASC,WAAW,QAAQ,+BAA+B;AAC3D,SAEEC,WAAW,QACN,iCAAiC;AAsCxC;;;;;;;;;;;;;;;;;;;;;;;;AAwBA,OAAO,eAAeC,QAAQA,CAM5BC,MAA2C,EAC3C;EACEC,SAAS;EACTC,WAAW;EACXC,QAAQ,EAAEC,SAAS;EACnBC,mBAAmB,EAAEC;AAAoB,IACc,EAAE;EAE3D,MAAMH,QAAQ,GAAGC,SAAS,IAAI,QAAQ;EACtC,MAAMC,mBAAmB,GAAGC,oBAAoB,IAAI,KAAK;EAEzD,MAAMC,cAAc,GAClBL,WAAW,KAAKM,SAAS,GAAGX,WAAW,CAACK,WAAW,CAAC,GAAGM,SAAS;EAElE,IAAIC,KAAK,GAAoB,IAAI;EACjC,IAAIR,SAAS,EAAE;IACbQ,KAAK,GAAG,MAAMT,MAAM,CAACU,OAAO,CAAC;MAC3BC,MAAM,EAAE,oBAAoB;MAC5BC,MAAM,EAAE,CAACX,SAAS,EAAEI,mBAAmB;KACxC,CAAC;GACH,MAAM;IACLI,KAAK,GAAG,MAAMT,MAAM,CAACU,OAAO,CAAC;MAC3BC,MAAM,EAAE,sBAAsB;MAC9BC,MAAM,EAAE,CAACL,cAAc,IAAIJ,QAAQ,EAAEE,mBAAmB;KACzD,CAAC;;EAGJ,IAAI,CAACI,KAAK,EAAE,MAAM,IAAIb,kBAAkB,CAAC;IAAEK,SAAS;IAAEC;EAAW,CAAE,CAAC;EAEpE,MAAMW,MAAM,GAAGb,MAAM,CAACc,KAAK,EAAEC,UAAU,EAAEN,KAAK,EAAEI,MAAM,IAAIf,WAAW;EACrE,OAAOe,MAAM,CAACJ,KAAK,CAAC;AACtB"},"metadata":{},"sourceType":"module","externalDependencies":[]}