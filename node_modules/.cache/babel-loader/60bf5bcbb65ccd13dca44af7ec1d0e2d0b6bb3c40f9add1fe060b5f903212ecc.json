{"ast":null,"code":"import { BaseError } from '../../errors/base.js';\nimport { isHex } from '../data/isHex.js';\nimport { pad } from '../data/pad.js';\nimport { assertSize } from './fromHex.js';\nimport { numberToHex } from './toHex.js';\nconst encoder = /*#__PURE__*/new TextEncoder();\n/**\n * Encodes a UTF-8 string, hex value, bigint, number or boolean to a byte array.\n *\n * - Docs: https://viem.sh/docs/utilities/toBytes.html\n * - Example: https://viem.sh/docs/utilities/toBytes.html#usage\n *\n * @param value Value to encode.\n * @param opts Options.\n * @returns Byte array value.\n *\n * @example\n * import { toBytes } from 'viem'\n * const data = toBytes('Hello world')\n * // Uint8Array([72, 101, 108, 108, 111, 32, 87, 111, 114, 108, 100, 33])\n *\n * @example\n * import { toBytes } from 'viem'\n * const data = toBytes(420)\n * // Uint8Array([1, 164])\n *\n * @example\n * import { toBytes } from 'viem'\n * const data = toBytes(420, { size: 4 })\n * // Uint8Array([0, 0, 1, 164])\n */\nexport function toBytes(value, opts = {}) {\n  if (typeof value === 'number' || typeof value === 'bigint') return numberToBytes(value, opts);\n  if (typeof value === 'boolean') return boolToBytes(value, opts);\n  if (isHex(value)) return hexToBytes(value, opts);\n  return stringToBytes(value, opts);\n}\n/**\n * Encodes a boolean into a byte array.\n *\n * - Docs: https://viem.sh/docs/utilities/toBytes.html#booltobytes\n *\n * @param value Boolean value to encode.\n * @param opts Options.\n * @returns Byte array value.\n *\n * @example\n * import { boolToBytes } from 'viem'\n * const data = boolToBytes(true)\n * // Uint8Array([1])\n *\n * @example\n * import { boolToBytes } from 'viem'\n * const data = boolToBytes(true, { size: 32 })\n * // Uint8Array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1])\n */\nexport function boolToBytes(value, opts = {}) {\n  const bytes = new Uint8Array(1);\n  bytes[0] = Number(value);\n  if (typeof opts.size === 'number') {\n    assertSize(bytes, {\n      size: opts.size\n    });\n    return pad(bytes, {\n      size: opts.size\n    });\n  }\n  return bytes;\n}\n/**\n * Encodes a hex string into a byte array.\n *\n * - Docs: https://viem.sh/docs/utilities/toBytes.html#hextobytes\n *\n * @param hex Hex string to encode.\n * @param opts Options.\n * @returns Byte array value.\n *\n * @example\n * import { hexToBytes } from 'viem'\n * const data = hexToBytes('0x48656c6c6f20776f726c6421')\n * // Uint8Array([72, 101, 108, 108, 111, 32, 87, 111, 114, 108, 100, 33])\n *\n * @example\n * import { hexToBytes } from 'viem'\n * const data = hexToBytes('0x48656c6c6f20776f726c6421', { size: 32 })\n * // Uint8Array([72, 101, 108, 108, 111, 32, 87, 111, 114, 108, 100, 33, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])\n */\nexport function hexToBytes(hex_, opts = {}) {\n  let hex = hex_;\n  if (opts.size) {\n    assertSize(hex, {\n      size: opts.size\n    });\n    hex = pad(hex, {\n      dir: 'right',\n      size: opts.size\n    });\n  }\n  let hexString = hex.slice(2);\n  if (hexString.length % 2) hexString = `0${hexString}`;\n  const bytes = new Uint8Array(hexString.length / 2);\n  for (let index = 0; index < bytes.length; index++) {\n    const start = index * 2;\n    const hexByte = hexString.slice(start, start + 2);\n    const byte = Number.parseInt(hexByte, 16);\n    if (Number.isNaN(byte) || byte < 0) throw new BaseError(`Invalid byte sequence (\"${hexByte}\" in \"${hexString}\").`);\n    bytes[index] = byte;\n  }\n  return bytes;\n}\n/**\n * Encodes a number into a byte array.\n *\n * - Docs: https://viem.sh/docs/utilities/toBytes.html#numbertobytes\n *\n * @param value Number to encode.\n * @param opts Options.\n * @returns Byte array value.\n *\n * @example\n * import { numberToBytes } from 'viem'\n * const data = numberToBytes(420)\n * // Uint8Array([1, 164])\n *\n * @example\n * import { numberToBytes } from 'viem'\n * const data = numberToBytes(420, { size: 4 })\n * // Uint8Array([0, 0, 1, 164])\n */\nexport function numberToBytes(value, opts) {\n  const hex = numberToHex(value, opts);\n  return hexToBytes(hex);\n}\n/**\n * Encodes a UTF-8 string into a byte array.\n *\n * - Docs: https://viem.sh/docs/utilities/toBytes.html#stringtobytes\n *\n * @param value String to encode.\n * @param opts Options.\n * @returns Byte array value.\n *\n * @example\n * import { stringToBytes } from 'viem'\n * const data = stringToBytes('Hello world!')\n * // Uint8Array([72, 101, 108, 108, 111, 32, 119, 111, 114, 108, 100, 33])\n *\n * @example\n * import { stringToBytes } from 'viem'\n * const data = stringToBytes('Hello world!', { size: 32 })\n * // Uint8Array([72, 101, 108, 108, 111, 32, 87, 111, 114, 108, 100, 33, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])\n */\nexport function stringToBytes(value, opts = {}) {\n  const bytes = encoder.encode(value);\n  if (typeof opts.size === 'number') {\n    assertSize(bytes, {\n      size: opts.size\n    });\n    return pad(bytes, {\n      dir: 'right',\n      size: opts.size\n    });\n  }\n  return bytes;\n}","map":{"version":3,"names":["BaseError","isHex","pad","assertSize","numberToHex","encoder","TextEncoder","toBytes","value","opts","numberToBytes","boolToBytes","hexToBytes","stringToBytes","bytes","Uint8Array","Number","size","hex_","hex","dir","hexString","slice","length","index","start","hexByte","byte","parseInt","isNaN","encode"],"sources":["/Users/envyhose/Desktop/programs/keepsafe_repo/keepsafe/client/node_modules/viem/utils/encoding/toBytes.ts"],"sourcesContent":["import { BaseError } from '../../errors/base.js'\nimport type { ByteArray, Hex } from '../../types/misc.js'\nimport { isHex } from '../data/isHex.js'\nimport { pad } from '../data/pad.js'\n\nimport { assertSize } from './fromHex.js'\nimport { type NumberToHexOpts, numberToHex } from './toHex.js'\n\nconst encoder = /*#__PURE__*/ new TextEncoder()\n\nexport type ToBytesParameters = {\n  /** Size of the output bytes. */\n  size?: number\n}\n\n/**\n * Encodes a UTF-8 string, hex value, bigint, number or boolean to a byte array.\n *\n * - Docs: https://viem.sh/docs/utilities/toBytes.html\n * - Example: https://viem.sh/docs/utilities/toBytes.html#usage\n *\n * @param value Value to encode.\n * @param opts Options.\n * @returns Byte array value.\n *\n * @example\n * import { toBytes } from 'viem'\n * const data = toBytes('Hello world')\n * // Uint8Array([72, 101, 108, 108, 111, 32, 87, 111, 114, 108, 100, 33])\n *\n * @example\n * import { toBytes } from 'viem'\n * const data = toBytes(420)\n * // Uint8Array([1, 164])\n *\n * @example\n * import { toBytes } from 'viem'\n * const data = toBytes(420, { size: 4 })\n * // Uint8Array([0, 0, 1, 164])\n */\nexport function toBytes(\n  value: string | bigint | number | boolean | Hex,\n  opts: ToBytesParameters = {},\n): ByteArray {\n  if (typeof value === 'number' || typeof value === 'bigint')\n    return numberToBytes(value, opts)\n  if (typeof value === 'boolean') return boolToBytes(value, opts)\n  if (isHex(value)) return hexToBytes(value, opts)\n  return stringToBytes(value, opts)\n}\n\nexport type BoolToHexOpts = {\n  /** Size of the output bytes. */\n  size?: number\n}\n\n/**\n * Encodes a boolean into a byte array.\n *\n * - Docs: https://viem.sh/docs/utilities/toBytes.html#booltobytes\n *\n * @param value Boolean value to encode.\n * @param opts Options.\n * @returns Byte array value.\n *\n * @example\n * import { boolToBytes } from 'viem'\n * const data = boolToBytes(true)\n * // Uint8Array([1])\n *\n * @example\n * import { boolToBytes } from 'viem'\n * const data = boolToBytes(true, { size: 32 })\n * // Uint8Array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1])\n */\nexport function boolToBytes(value: boolean, opts: BoolToHexOpts = {}) {\n  const bytes = new Uint8Array(1)\n  bytes[0] = Number(value)\n  if (typeof opts.size === 'number') {\n    assertSize(bytes, { size: opts.size })\n    return pad(bytes, { size: opts.size })\n  }\n  return bytes\n}\n\nexport type HexToBytesOpts = {\n  /** Size of the output bytes. */\n  size?: number\n}\n\n/**\n * Encodes a hex string into a byte array.\n *\n * - Docs: https://viem.sh/docs/utilities/toBytes.html#hextobytes\n *\n * @param hex Hex string to encode.\n * @param opts Options.\n * @returns Byte array value.\n *\n * @example\n * import { hexToBytes } from 'viem'\n * const data = hexToBytes('0x48656c6c6f20776f726c6421')\n * // Uint8Array([72, 101, 108, 108, 111, 32, 87, 111, 114, 108, 100, 33])\n *\n * @example\n * import { hexToBytes } from 'viem'\n * const data = hexToBytes('0x48656c6c6f20776f726c6421', { size: 32 })\n * // Uint8Array([72, 101, 108, 108, 111, 32, 87, 111, 114, 108, 100, 33, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])\n */\nexport function hexToBytes(hex_: Hex, opts: HexToBytesOpts = {}): ByteArray {\n  let hex = hex_\n  if (opts.size) {\n    assertSize(hex, { size: opts.size })\n    hex = pad(hex, { dir: 'right', size: opts.size })\n  }\n\n  let hexString = hex.slice(2) as string\n  if (hexString.length % 2) hexString = `0${hexString}`\n\n  const bytes = new Uint8Array(hexString.length / 2)\n  for (let index = 0; index < bytes.length; index++) {\n    const start = index * 2\n    const hexByte = hexString.slice(start, start + 2)\n    const byte = Number.parseInt(hexByte, 16)\n    if (Number.isNaN(byte) || byte < 0)\n      throw new BaseError(\n        `Invalid byte sequence (\"${hexByte}\" in \"${hexString}\").`,\n      )\n    bytes[index] = byte\n  }\n  return bytes\n}\n\n/**\n * Encodes a number into a byte array.\n *\n * - Docs: https://viem.sh/docs/utilities/toBytes.html#numbertobytes\n *\n * @param value Number to encode.\n * @param opts Options.\n * @returns Byte array value.\n *\n * @example\n * import { numberToBytes } from 'viem'\n * const data = numberToBytes(420)\n * // Uint8Array([1, 164])\n *\n * @example\n * import { numberToBytes } from 'viem'\n * const data = numberToBytes(420, { size: 4 })\n * // Uint8Array([0, 0, 1, 164])\n */\nexport function numberToBytes(value: bigint | number, opts?: NumberToHexOpts) {\n  const hex = numberToHex(value, opts)\n  return hexToBytes(hex)\n}\n\nexport type StringToBytesOpts = {\n  /** Size of the output bytes. */\n  size?: number\n}\n\n/**\n * Encodes a UTF-8 string into a byte array.\n *\n * - Docs: https://viem.sh/docs/utilities/toBytes.html#stringtobytes\n *\n * @param value String to encode.\n * @param opts Options.\n * @returns Byte array value.\n *\n * @example\n * import { stringToBytes } from 'viem'\n * const data = stringToBytes('Hello world!')\n * // Uint8Array([72, 101, 108, 108, 111, 32, 119, 111, 114, 108, 100, 33])\n *\n * @example\n * import { stringToBytes } from 'viem'\n * const data = stringToBytes('Hello world!', { size: 32 })\n * // Uint8Array([72, 101, 108, 108, 111, 32, 87, 111, 114, 108, 100, 33, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])\n */\nexport function stringToBytes(\n  value: string,\n  opts: StringToBytesOpts = {},\n): ByteArray {\n  const bytes = encoder.encode(value)\n  if (typeof opts.size === 'number') {\n    assertSize(bytes, { size: opts.size })\n    return pad(bytes, { dir: 'right', size: opts.size })\n  }\n  return bytes\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}