{"ast":null,"code":"\"use client\";\n\n// src/config.ts\nimport { createSyncStoragePersister } from \"@tanstack/query-sync-storage-persister\";\nimport { QueryClient } from \"@tanstack/react-query\";\nimport { persistQueryClient } from \"@tanstack/react-query-persist-client\";\nimport { createConfig as createCoreConfig, createStorage, noopStorage } from \"@wagmi/core\";\nfunction createConfig({\n  queryClient = new QueryClient({\n    defaultOptions: {\n      queries: {\n        cacheTime: 1e3 * 60 * 60 * 24,\n        networkMode: \"offlineFirst\",\n        refetchOnWindowFocus: false,\n        retry: 0\n      },\n      mutations: {\n        networkMode: \"offlineFirst\"\n      }\n    }\n  }),\n  storage = createStorage({\n    storage: typeof window !== \"undefined\" && window.localStorage ? window.localStorage : noopStorage\n  }),\n  persister = typeof window !== \"undefined\" ? createSyncStoragePersister({\n    key: \"cache\",\n    storage,\n    serialize: x => x,\n    deserialize: x => x\n  }) : void 0,\n  ...args\n}) {\n  const config = createCoreConfig({\n    ...args,\n    storage\n  });\n  if (persister) persistQueryClient({\n    queryClient,\n    persister,\n    dehydrateOptions: {\n      shouldDehydrateQuery: query => query.cacheTime !== 0 && query.queryKey[0].persist !== false\n    }\n  });\n  return Object.assign(config, {\n    queryClient\n  });\n}\n\n// src/context.ts\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport * as React from \"react\";\nvar Context = React.createContext(void 0);\nvar queryClientContext = React.createContext(void 0);\nfunction WagmiConfig({\n  children,\n  config\n}) {\n  return React.createElement(Context.Provider, {\n    children: React.createElement(QueryClientProvider, {\n      children,\n      client: config.queryClient,\n      context: queryClientContext\n    }),\n    value: config\n  });\n}\nfunction useConfig() {\n  const config = React.useContext(Context);\n  if (!config) throw new Error([\"`useConfig` must be used within `WagmiConfig`.\\n\", \"Read more: https://wagmi.sh/react/WagmiConfig\"].join(\"\\n\"));\n  return config;\n}\n\n// src/hooks/accounts/useAccount.ts\nimport { getAccount, watchAccount } from \"@wagmi/core\";\nimport * as React9 from \"react\";\n\n// src/hooks/utils/query/useBaseQuery.ts\nimport { notifyManager, useIsRestoring, useQueryClient, useQueryErrorResetBoundary } from \"@tanstack/react-query\";\nimport * as React2 from \"react\";\n\n// src/hooks/utils/useSyncExternalStore.ts\nimport * as pkg from \"use-sync-external-store/shim/index.js\";\nvar useSyncExternalStore2 = pkg.useSyncExternalStore;\n\n// src/hooks/utils/query/utils.ts\nfunction isQueryKey(value) {\n  return Array.isArray(value);\n}\nfunction isPlainObject(o) {\n  if (!hasObjectPrototype(o)) {\n    return false;\n  }\n  const ctor = o.constructor;\n  if (typeof ctor === \"undefined\") {\n    return true;\n  }\n  const prot = ctor.prototype;\n  if (!hasObjectPrototype(prot)) {\n    return false;\n  }\n  if (!prot.hasOwnProperty(\"isPrototypeOf\")) {\n    return false;\n  }\n  return true;\n}\nfunction hasObjectPrototype(o) {\n  return Object.prototype.toString.call(o) === \"[object Object]\";\n}\nfunction parseQueryArgs(arg1, arg2, arg3) {\n  if (!isQueryKey(arg1)) {\n    return arg1;\n  }\n  if (typeof arg2 === \"function\") {\n    return {\n      ...arg3,\n      queryKey: arg1,\n      queryFn: arg2\n    };\n  }\n  return {\n    ...arg2,\n    queryKey: arg1\n  };\n}\nfunction queryKeyHashFn(queryKey17) {\n  return JSON.stringify(queryKey17, (_, val) => isPlainObject(val) ? Object.keys(val).sort().reduce((result, key) => {\n    result[key] = val[key];\n    return result;\n  }, {}) : typeof val === \"bigint\" ? val.toString() : val);\n}\nfunction shouldThrowError(_useErrorBoundary, params) {\n  if (typeof _useErrorBoundary === \"function\") {\n    return _useErrorBoundary(...params);\n  }\n  return !!_useErrorBoundary;\n}\nfunction trackResult(result, observer) {\n  const trackedResult = {};\n  Object.keys(result).forEach(key => {\n    Object.defineProperty(trackedResult, key, {\n      configurable: false,\n      enumerable: true,\n      get: () => {\n        observer.trackedProps.add(key);\n        return result[key];\n      }\n    });\n  });\n  return trackedResult;\n}\n\n// src/hooks/utils/query/useBaseQuery.ts\nfunction useBaseQuery(options, Observer) {\n  const queryClient = useQueryClient({\n    context: options.context\n  });\n  const isRestoring = useIsRestoring();\n  const errorResetBoundary = useQueryErrorResetBoundary();\n  const defaultedOptions = queryClient.defaultQueryOptions({\n    ...options,\n    queryKeyHashFn\n  });\n  defaultedOptions._optimisticResults = isRestoring ? \"isRestoring\" : \"optimistic\";\n  if (defaultedOptions.onError) {\n    defaultedOptions.onError = notifyManager.batchCalls(defaultedOptions.onError);\n  }\n  if (defaultedOptions.onSuccess) {\n    defaultedOptions.onSuccess = notifyManager.batchCalls(defaultedOptions.onSuccess);\n  }\n  if (defaultedOptions.onSettled) {\n    defaultedOptions.onSettled = notifyManager.batchCalls(defaultedOptions.onSettled);\n  }\n  if (defaultedOptions.suspense) {\n    if (typeof defaultedOptions.staleTime !== \"number\") {\n      defaultedOptions.staleTime = 1e3;\n    }\n  }\n  if (defaultedOptions.suspense || defaultedOptions.useErrorBoundary) {\n    if (!errorResetBoundary.isReset()) {\n      defaultedOptions.retryOnMount = false;\n    }\n  }\n  const [observer] = React2.useState(() => new Observer(queryClient, defaultedOptions));\n  const result = observer.getOptimisticResult(defaultedOptions);\n  useSyncExternalStore2(React2.useCallback(onStoreChange => isRestoring ? () => void 0 : observer.subscribe(notifyManager.batchCalls(onStoreChange)), [observer, isRestoring]), () => observer.getCurrentResult(), () => observer.getCurrentResult());\n  React2.useEffect(() => {\n    errorResetBoundary.clearReset();\n  }, [errorResetBoundary]);\n  React2.useEffect(() => {\n    observer.setOptions(defaultedOptions, {\n      listeners: false\n    });\n  }, [defaultedOptions, observer]);\n  if (defaultedOptions.suspense && result.isLoading && result.isFetching && !isRestoring) {\n    throw observer.fetchOptimistic(defaultedOptions).then(({\n      data\n    }) => {\n      defaultedOptions.onSuccess?.(data);\n      defaultedOptions.onSettled?.(data, null);\n    }).catch(error => {\n      errorResetBoundary.clearReset();\n      defaultedOptions.onError?.(error);\n      defaultedOptions.onSettled?.(void 0, error);\n    });\n  }\n  if (result.isError && !errorResetBoundary.isReset() && !result.isFetching && shouldThrowError(defaultedOptions.useErrorBoundary, [result.error, observer.getCurrentQuery()])) {\n    throw result.error;\n  }\n  const status = result.status === \"loading\" && result.fetchStatus === \"idle\" ? \"idle\" : result.status;\n  const isIdle = status === \"idle\";\n  const isLoading = status === \"loading\" && result.fetchStatus === \"fetching\";\n  return {\n    ...result,\n    defaultedOptions,\n    isIdle,\n    isLoading,\n    observer,\n    status\n  };\n}\n\n// src/hooks/utils/query/useInfiniteQuery.ts\nimport { InfiniteQueryObserver } from \"@tanstack/react-query\";\nfunction useInfiniteQuery(arg1, arg2, arg3) {\n  const parsedOptions = parseQueryArgs(arg1, arg2, arg3);\n  const baseQuery = useBaseQuery({\n    context: queryClientContext,\n    ...parsedOptions\n  }, InfiniteQueryObserver);\n  const result = {\n    data: baseQuery.data,\n    error: baseQuery.error,\n    fetchNextPage: baseQuery.fetchNextPage,\n    fetchStatus: baseQuery.fetchStatus,\n    hasNextPage: baseQuery.hasNextPage,\n    isError: baseQuery.isError,\n    isFetched: baseQuery.isFetched,\n    isFetchedAfterMount: baseQuery.isFetchedAfterMount,\n    isFetching: baseQuery.isFetching,\n    isFetchingNextPage: baseQuery.isFetchingNextPage,\n    isIdle: baseQuery.isIdle,\n    isLoading: baseQuery.isLoading,\n    isRefetching: baseQuery.isRefetching,\n    isSuccess: baseQuery.isSuccess,\n    refetch: baseQuery.refetch,\n    status: baseQuery.status,\n    internal: {\n      dataUpdatedAt: baseQuery.dataUpdatedAt,\n      errorUpdatedAt: baseQuery.errorUpdatedAt,\n      failureCount: baseQuery.failureCount,\n      isFetchedAfterMount: baseQuery.isFetchedAfterMount,\n      isLoadingError: baseQuery.isLoadingError,\n      isPaused: baseQuery.isPaused,\n      isPlaceholderData: baseQuery.isPlaceholderData,\n      isPreviousData: baseQuery.isPreviousData,\n      isRefetchError: baseQuery.isRefetchError,\n      isStale: baseQuery.isStale,\n      remove: baseQuery.remove\n    }\n  };\n  return !baseQuery.defaultedOptions.notifyOnChangeProps ? trackResult(result, baseQuery.observer) : result;\n}\n\n// src/hooks/utils/query/useMutation.ts\nimport { parseMutationArgs, useMutation as useMutation_ } from \"@tanstack/react-query\";\nfunction useMutation(arg1, arg2, arg3) {\n  const options = parseMutationArgs(arg1, arg2, arg3);\n  return useMutation_({\n    context: queryClientContext,\n    ...options\n  });\n}\n\n// src/hooks/utils/query/useQuery.ts\nimport { QueryObserver } from \"@tanstack/react-query\";\nfunction useQuery(arg1, arg2, arg3) {\n  const parsedOptions = parseQueryArgs(arg1, arg2, arg3);\n  const baseQuery = useBaseQuery({\n    context: queryClientContext,\n    ...parsedOptions\n  }, QueryObserver);\n  const result = {\n    data: baseQuery.data,\n    error: baseQuery.error,\n    fetchStatus: baseQuery.fetchStatus,\n    isError: baseQuery.isError,\n    isFetched: baseQuery.isFetched,\n    isFetchedAfterMount: baseQuery.isFetchedAfterMount,\n    isFetching: baseQuery.isFetching,\n    isIdle: baseQuery.isIdle,\n    isLoading: baseQuery.isLoading,\n    isRefetching: baseQuery.isRefetching,\n    isSuccess: baseQuery.isSuccess,\n    refetch: baseQuery.refetch,\n    status: baseQuery.status,\n    internal: {\n      dataUpdatedAt: baseQuery.dataUpdatedAt,\n      errorUpdatedAt: baseQuery.errorUpdatedAt,\n      failureCount: baseQuery.failureCount,\n      isFetchedAfterMount: baseQuery.isFetchedAfterMount,\n      isLoadingError: baseQuery.isLoadingError,\n      isPaused: baseQuery.isPaused,\n      isPlaceholderData: baseQuery.isPlaceholderData,\n      isPreviousData: baseQuery.isPreviousData,\n      isRefetchError: baseQuery.isRefetchError,\n      isStale: baseQuery.isStale,\n      remove: baseQuery.remove\n    }\n  };\n  return !baseQuery.defaultedOptions.notifyOnChangeProps ? trackResult(result, baseQuery.observer) : result;\n}\n\n// src/hooks/utils/query/useQueryClient.ts\nimport { useQueryClient as useQueryClient_ } from \"@tanstack/react-query\";\nvar useQueryClient2 = () => useQueryClient_({\n  context: queryClientContext\n});\n\n// src/hooks/viem/usePublicClient.ts\nimport { getPublicClient, watchPublicClient } from \"@wagmi/core\";\nimport { useSyncExternalStoreWithSelector } from \"use-sync-external-store/shim/with-selector.js\";\nfunction usePublicClient({\n  chainId\n} = {}) {\n  return useSyncExternalStoreWithSelector(cb => watchPublicClient({\n    chainId\n  }, cb), () => getPublicClient({\n    chainId\n  }), () => getPublicClient({\n    chainId\n  }), x => x, (a, b) => a.uid === b.uid);\n}\n\n// src/hooks/viem/useWalletClient.ts\nimport { getWalletClient, watchWalletClient } from \"@wagmi/core\";\nimport * as React3 from \"react\";\nfunction queryKey({\n  chainId\n}) {\n  return [{\n    entity: \"walletClient\",\n    chainId,\n    persist: false\n  }];\n}\nfunction queryFn({\n  queryKey: [{\n    chainId\n  }]\n}) {\n  return getWalletClient({\n    chainId\n  });\n}\nfunction useWalletClient({\n  chainId: chainId_,\n  suspense,\n  onError,\n  onSettled,\n  onSuccess\n} = {}) {\n  const {\n    connector\n  } = useAccount();\n  const chainId = useChainId({\n    chainId: chainId_\n  });\n  const walletClientQuery = useQuery(queryKey({\n    chainId\n  }), queryFn, {\n    cacheTime: 0,\n    enabled: Boolean(connector),\n    staleTime: Infinity,\n    suspense,\n    onError,\n    onSettled,\n    onSuccess\n  });\n  const queryClient = useQueryClient2();\n  React3.useEffect(() => {\n    const unwatch = watchWalletClient({\n      chainId\n    }, walletClient => {\n      if (walletClient) queryClient.invalidateQueries(queryKey({\n        chainId\n      }));else queryClient.removeQueries(queryKey({\n        chainId\n      }));\n    });\n    return unwatch;\n  }, [queryClient, chainId]);\n  return walletClientQuery;\n}\n\n// src/hooks/viem/useWebSocketPublicClient.ts\nimport { getWebSocketPublicClient, watchWebSocketPublicClient } from \"@wagmi/core\";\nimport { useSyncExternalStoreWithSelector as useSyncExternalStoreWithSelector2 } from \"use-sync-external-store/shim/with-selector.js\";\nfunction useWebSocketPublicClient({\n  chainId\n} = {}) {\n  return useSyncExternalStoreWithSelector2(cb => watchWebSocketPublicClient({\n    chainId\n  }, cb), () => getWebSocketPublicClient({\n    chainId\n  }), () => getWebSocketPublicClient({\n    chainId\n  }), x => x, (a, b) => a?.uid === b?.uid);\n}\n\n// src/hooks/utils/useChainId.ts\nfunction useChainId({\n  chainId\n} = {}) {\n  const publicClient = usePublicClient({\n    chainId\n  });\n  return publicClient.chain.id;\n}\n\n// src/hooks/utils/useForceUpdate.ts\nimport * as React4 from \"react\";\nfunction useForceUpdate() {\n  const [, forceUpdate] = React4.useReducer(x => x + 1, 0);\n  return forceUpdate;\n}\n\n// src/hooks/utils/useInvalidateOnBlock.ts\nimport * as React7 from \"react\";\n\n// src/hooks/network-status/useBlockNumber.ts\nimport { fetchBlockNumber } from \"@wagmi/core\";\nimport * as React5 from \"react\";\nfunction queryKey2({\n  chainId,\n  scopeKey\n}) {\n  return [{\n    entity: \"blockNumber\",\n    chainId,\n    scopeKey\n  }];\n}\nfunction queryFn2({\n  queryKey: [{\n    chainId\n  }]\n}) {\n  return fetchBlockNumber({\n    chainId\n  });\n}\nfunction useBlockNumber({\n  cacheTime = 0,\n  chainId: chainId_,\n  enabled = true,\n  scopeKey,\n  staleTime,\n  suspense,\n  watch = false,\n  onBlock,\n  onError,\n  onSettled,\n  onSuccess\n} = {}) {\n  const chainId = useChainId({\n    chainId: chainId_\n  });\n  const publicClient = usePublicClient({\n    chainId\n  });\n  const webSocketPublicClient = useWebSocketPublicClient({\n    chainId\n  });\n  const queryClient = useQueryClient2();\n  React5.useEffect(() => {\n    if (!enabled) return;\n    if (!watch && !onBlock) return;\n    const publicClient_ = webSocketPublicClient ?? publicClient;\n    const unwatch = publicClient_.watchBlockNumber({\n      onBlockNumber: blockNumber => {\n        if (watch) queryClient.setQueryData(queryKey2({\n          chainId,\n          scopeKey\n        }), blockNumber);\n        if (onBlock) onBlock(blockNumber);\n      },\n      emitOnBegin: true\n    });\n    return unwatch;\n  }, [chainId, scopeKey, onBlock, publicClient, queryClient, watch, webSocketPublicClient, enabled]);\n  return useQuery(queryKey2({\n    scopeKey,\n    chainId\n  }), queryFn2, {\n    cacheTime,\n    enabled,\n    staleTime,\n    suspense,\n    onError,\n    onSettled,\n    onSuccess\n  });\n}\n\n// src/hooks/network-status/useFeeData.ts\nimport { fetchFeeData } from \"@wagmi/core\";\nimport * as React6 from \"react\";\nfunction queryKey3({\n  chainId,\n  formatUnits,\n  scopeKey\n}) {\n  return [{\n    entity: \"feeData\",\n    chainId,\n    formatUnits,\n    scopeKey\n  }];\n}\nfunction queryFn3({\n  queryKey: [{\n    chainId,\n    formatUnits\n  }]\n}) {\n  return fetchFeeData({\n    chainId,\n    formatUnits\n  });\n}\nfunction useFeeData({\n  cacheTime,\n  chainId: chainId_,\n  enabled = true,\n  formatUnits = \"gwei\",\n  scopeKey,\n  staleTime,\n  suspense,\n  watch,\n  onError,\n  onSettled,\n  onSuccess\n} = {}) {\n  const chainId = useChainId({\n    chainId: chainId_\n  });\n  const queryKey_ = React6.useMemo(() => queryKey3({\n    chainId,\n    formatUnits,\n    scopeKey\n  }), [chainId, formatUnits, scopeKey]);\n  const feeDataQuery = useQuery(queryKey_, queryFn3, {\n    cacheTime,\n    enabled,\n    staleTime,\n    suspense,\n    onError,\n    onSettled,\n    onSuccess\n  });\n  useInvalidateOnBlock({\n    chainId,\n    enabled: Boolean(enabled && watch),\n    queryKey: queryKey_\n  });\n  return feeDataQuery;\n}\n\n// src/hooks/utils/useInvalidateOnBlock.ts\nfunction useInvalidateOnBlock({\n  chainId,\n  enabled,\n  queryKey: queryKey17\n}) {\n  const queryClient = useQueryClient2();\n  const onBlock = React7.useCallback(() => queryClient.invalidateQueries({\n    queryKey: queryKey17\n  }, {\n    cancelRefetch: false\n  }), [queryClient, queryKey17]);\n  useBlockNumber({\n    chainId,\n    enabled,\n    onBlock: enabled ? onBlock : void 0,\n    scopeKey: enabled ? void 0 : \"idle\"\n  });\n}\n\n// src/hooks/utils/useSyncExternalStoreWithTracked.ts\nimport { deepEqual } from \"@wagmi/core\";\nimport * as React8 from \"react\";\nimport { useSyncExternalStoreWithSelector as useSyncExternalStoreWithSelector3 } from \"use-sync-external-store/shim/with-selector.js\";\nvar isPlainObject2 = obj => typeof obj === \"object\" && !Array.isArray(obj);\nfunction useSyncExternalStoreWithTracked(subscribe, getSnapshot, getServerSnapshot = getSnapshot, isEqual = deepEqual) {\n  const trackedKeys = React8.useRef([]);\n  const result = useSyncExternalStoreWithSelector3(subscribe, getSnapshot, getServerSnapshot, x => x, (a, b) => {\n    if (isPlainObject2(a) && isPlainObject2(b) && trackedKeys.current.length) {\n      for (const key of trackedKeys.current) {\n        const equal = isEqual(a[key], b[key]);\n        if (!equal) return false;\n      }\n      return true;\n    }\n    return isEqual(a, b);\n  });\n  if (isPlainObject2(result)) {\n    const trackedResult = {\n      ...result\n    };\n    Object.defineProperties(trackedResult, Object.entries(trackedResult).reduce((res, [key, value]) => {\n      return {\n        ...res,\n        [key]: {\n          configurable: false,\n          enumerable: true,\n          get: () => {\n            if (!trackedKeys.current.includes(key)) {\n              trackedKeys.current.push(key);\n            }\n            return value;\n          }\n        }\n      };\n    }, {}));\n    return trackedResult;\n  }\n  return result;\n}\n\n// src/hooks/accounts/useAccount.ts\nfunction useAccount({\n  onConnect,\n  onDisconnect\n} = {}) {\n  const config = useConfig();\n  const watchAccount_ = React9.useCallback(callback => watchAccount(callback), [config]);\n  const account = useSyncExternalStoreWithTracked(watchAccount_, getAccount);\n  const previousAccountRef = React9.useRef();\n  const previousAccount = previousAccountRef.current;\n  React9.useEffect(() => {\n    if (previousAccount?.status !== \"connected\" && account.status === \"connected\") {\n      onConnect?.({\n        address: account.address,\n        connector: account.connector,\n        isReconnected: previousAccount?.status === \"reconnecting\" || previousAccount?.status === void 0\n      });\n    }\n    if (previousAccount?.status === \"connected\" && account.status === \"disconnected\") {\n      onDisconnect?.();\n    }\n    previousAccountRef.current = account;\n  }, [onConnect, onDisconnect, previousAccount, account]);\n  return account;\n}\n\n// src/hooks/accounts/useBalance.ts\nimport { fetchBalance } from \"@wagmi/core\";\nimport * as React10 from \"react\";\nfunction queryKey4({\n  address,\n  chainId,\n  formatUnits,\n  scopeKey,\n  token\n}) {\n  return [{\n    entity: \"balance\",\n    address,\n    chainId,\n    formatUnits,\n    scopeKey,\n    token\n  }];\n}\nfunction queryFn4({\n  queryKey: [{\n    address,\n    chainId,\n    formatUnits,\n    token\n  }]\n}) {\n  if (!address) throw new Error(\"address is required\");\n  return fetchBalance({\n    address,\n    chainId,\n    formatUnits,\n    token\n  });\n}\nfunction useBalance({\n  address,\n  cacheTime,\n  chainId: chainId_,\n  enabled = true,\n  formatUnits,\n  scopeKey,\n  staleTime,\n  suspense,\n  token,\n  watch,\n  onError,\n  onSettled,\n  onSuccess\n} = {}) {\n  const chainId = useChainId({\n    chainId: chainId_\n  });\n  const queryKey_ = React10.useMemo(() => queryKey4({\n    address,\n    chainId,\n    formatUnits,\n    scopeKey,\n    token\n  }), [address, chainId, formatUnits, scopeKey, token]);\n  const balanceQuery = useQuery(queryKey_, queryFn4, {\n    cacheTime,\n    enabled: Boolean(enabled && address),\n    staleTime,\n    suspense,\n    onError,\n    onSettled,\n    onSuccess\n  });\n  useInvalidateOnBlock({\n    chainId,\n    enabled: Boolean(enabled && watch && address),\n    queryKey: queryKey_\n  });\n  return balanceQuery;\n}\n\n// src/hooks/accounts/useConnect.ts\nimport { connect } from \"@wagmi/core\";\nimport * as React11 from \"react\";\nvar mutationKey = args => [{\n  entity: \"connect\",\n  ...args\n}];\nvar mutationFn = args => {\n  const {\n    connector,\n    chainId\n  } = args;\n  if (!connector) throw new Error(\"connector is required\");\n  return connect({\n    connector,\n    chainId\n  });\n};\nfunction useConnect({\n  chainId,\n  connector,\n  onError,\n  onMutate,\n  onSettled,\n  onSuccess\n} = {}) {\n  const config = useConfig();\n  const {\n    data,\n    error,\n    isError,\n    isIdle,\n    isLoading,\n    isSuccess,\n    mutate,\n    mutateAsync,\n    reset,\n    status,\n    variables\n  } = useMutation(mutationKey({\n    connector,\n    chainId\n  }), mutationFn, {\n    onError,\n    onMutate,\n    onSettled,\n    onSuccess\n  });\n  const connect2 = React11.useCallback(args => {\n    return mutate({\n      chainId: args?.chainId ?? chainId,\n      connector: args?.connector ?? connector\n    });\n  }, [chainId, connector, mutate]);\n  const connectAsync = React11.useCallback(args => {\n    return mutateAsync({\n      chainId: args?.chainId ?? chainId,\n      connector: args?.connector ?? connector\n    });\n  }, [chainId, connector, mutateAsync]);\n  return {\n    connect: connect2,\n    connectAsync,\n    connectors: config.connectors,\n    data,\n    error,\n    isError,\n    isIdle,\n    isLoading,\n    isSuccess,\n    pendingConnector: variables?.connector,\n    reset,\n    status,\n    variables\n  };\n}\n\n// src/hooks/accounts/useDisconnect.ts\nimport { disconnect } from \"@wagmi/core\";\nvar mutationKey2 = [{\n  entity: \"disconnect\"\n}];\nvar mutationFn2 = () => disconnect();\nfunction useDisconnect({\n  onError,\n  onMutate,\n  onSettled,\n  onSuccess\n} = {}) {\n  const {\n    error,\n    isError,\n    isIdle,\n    isLoading,\n    isSuccess,\n    mutate: disconnect2,\n    mutateAsync: disconnectAsync,\n    reset,\n    status\n  } = useMutation(mutationKey2, mutationFn2, {\n    ...(onError ? {\n      onError(error2, _variables, context) {\n        onError(error2, context);\n      }\n    } : {}),\n    onMutate,\n    ...(onSettled ? {\n      onSettled(_data, error2, _variables, context) {\n        onSettled(error2, context);\n      }\n    } : {}),\n    ...(onSuccess ? {\n      onSuccess(_data, _variables, context) {\n        onSuccess(context);\n      }\n    } : {})\n  });\n  return {\n    disconnect: disconnect2,\n    disconnectAsync,\n    error,\n    isError,\n    isIdle,\n    isLoading,\n    isSuccess,\n    reset,\n    status\n  };\n}\n\n// src/hooks/accounts/useNetwork.ts\nimport { getNetwork, watchNetwork } from \"@wagmi/core\";\nimport { useCallback as useCallback5 } from \"react\";\nfunction useNetwork() {\n  const config = useConfig();\n  const watchNetwork_ = useCallback5(callback => watchNetwork(callback), [config]);\n  return useSyncExternalStoreWithTracked(watchNetwork_, getNetwork);\n}\n\n// src/hooks/accounts/useSignMessage.ts\nimport { signMessage } from \"@wagmi/core\";\nimport * as React12 from \"react\";\nvar mutationKey3 = args => [{\n  entity: \"signMessage\",\n  ...args\n}];\nvar mutationFn3 = args => {\n  const {\n    message\n  } = args;\n  if (!message) throw new Error(\"message is required\");\n  return signMessage({\n    message\n  });\n};\nfunction useSignMessage({\n  message,\n  onError,\n  onMutate,\n  onSettled,\n  onSuccess\n} = {}) {\n  const {\n    data,\n    error,\n    isError,\n    isIdle,\n    isLoading,\n    isSuccess,\n    mutate,\n    mutateAsync,\n    reset,\n    status,\n    variables\n  } = useMutation(mutationKey3({\n    message\n  }), mutationFn3, {\n    onError,\n    onMutate,\n    onSettled,\n    onSuccess\n  });\n  const signMessage2 = React12.useCallback(args => mutate(args || {\n    message\n  }), [message, mutate]);\n  const signMessageAsync = React12.useCallback(args => mutateAsync(args || {\n    message\n  }), [message, mutateAsync]);\n  return {\n    data,\n    error,\n    isError,\n    isIdle,\n    isLoading,\n    isSuccess,\n    reset,\n    signMessage: signMessage2,\n    signMessageAsync,\n    status,\n    variables\n  };\n}\n\n// src/hooks/accounts/useSignTypedData.ts\nimport { signTypedData } from \"@wagmi/core\";\nimport * as React13 from \"react\";\nfunction mutationKey4({\n  domain,\n  types,\n  message,\n  primaryType\n}) {\n  return [{\n    entity: \"signTypedData\",\n    domain,\n    types,\n    message,\n    primaryType\n  }];\n}\nfunction mutationFn4(args) {\n  const {\n    domain,\n    types,\n    primaryType,\n    message\n  } = args;\n  if (!domain) throw new Error(\"domain is required\");\n  if (!types) throw new Error(\"types is required\");\n  if (!primaryType) throw new Error(\"primaryType is required\");\n  if (!message) throw new Error(\"message is required\");\n  return signTypedData({\n    domain,\n    message,\n    primaryType,\n    types\n  });\n}\nfunction useSignTypedData({\n  domain,\n  types,\n  message,\n  primaryType,\n  onError,\n  onMutate,\n  onSettled,\n  onSuccess\n} = {}) {\n  const {\n    data,\n    error,\n    isError,\n    isIdle,\n    isLoading,\n    isSuccess,\n    mutate,\n    mutateAsync,\n    reset,\n    status,\n    variables\n  } = useMutation(mutationKey4({\n    domain,\n    message,\n    primaryType,\n    types\n  }), mutationFn4, {\n    onError,\n    onMutate,\n    onSettled,\n    onSuccess\n  });\n  const signTypedData2 = React13.useCallback(args => mutate({\n    domain: args?.domain ?? domain,\n    types: args?.types ?? types,\n    message: args?.message ?? message,\n    primaryType: args?.primaryType ?? primaryType\n  }), [domain, types, primaryType, message, mutate]);\n  const signTypedDataAsync = React13.useCallback(args => mutateAsync({\n    domain: args?.domain ?? domain,\n    types: args?.types ?? types,\n    message: args?.message ?? message,\n    primaryType: args?.primaryType ?? primaryType\n  }), [domain, types, primaryType, message, mutateAsync]);\n  return {\n    data,\n    error,\n    isError,\n    isIdle,\n    isLoading,\n    isSuccess,\n    reset,\n    signTypedData: signTypedData2,\n    signTypedDataAsync,\n    status,\n    variables\n  };\n}\n\n// src/hooks/accounts/useSwitchNetwork.ts\nimport { switchNetwork } from \"@wagmi/core\";\nimport * as React14 from \"react\";\nvar mutationKey5 = args => [{\n  entity: \"switchNetwork\",\n  ...args\n}];\nvar mutationFn5 = args => {\n  const {\n    chainId\n  } = args;\n  if (!chainId) throw new Error(\"chainId is required\");\n  return switchNetwork({\n    chainId\n  });\n};\nfunction useSwitchNetwork({\n  chainId,\n  throwForSwitchChainNotSupported,\n  onError,\n  onMutate,\n  onSettled,\n  onSuccess\n} = {}) {\n  const config = useConfig();\n  const forceUpdate = useForceUpdate();\n  const {\n    data,\n    error,\n    isError,\n    isIdle,\n    isLoading,\n    isSuccess,\n    mutate,\n    mutateAsync,\n    reset,\n    status,\n    variables\n  } = useMutation(mutationKey5({\n    chainId\n  }), mutationFn5, {\n    onError,\n    onMutate,\n    onSettled,\n    onSuccess\n  });\n  const switchNetwork_ = React14.useCallback(chainId_ => mutate({\n    chainId: chainId_ ?? chainId\n  }), [chainId, mutate]);\n  const switchNetworkAsync_ = React14.useCallback(chainId_ => mutateAsync({\n    chainId: chainId_ ?? chainId\n  }), [chainId, mutateAsync]);\n  React14.useEffect(() => {\n    const unwatch = config.subscribe(({\n      chains,\n      connector\n    }) => ({\n      chains,\n      connector\n    }), forceUpdate);\n    return unwatch;\n  }, [config, forceUpdate]);\n  let switchNetwork2;\n  let switchNetworkAsync;\n  const supportsSwitchChain = !!config.connector?.switchChain;\n  if (throwForSwitchChainNotSupported || supportsSwitchChain) {\n    switchNetwork2 = switchNetwork_;\n    switchNetworkAsync = switchNetworkAsync_;\n  }\n  return {\n    chains: config.chains ?? [],\n    data,\n    error,\n    isError,\n    isIdle,\n    isLoading,\n    isSuccess,\n    pendingChainId: variables?.chainId,\n    reset,\n    status,\n    switchNetwork: switchNetwork2,\n    switchNetworkAsync,\n    variables\n  };\n}\n\n// src/hooks/contracts/useContractEvent.ts\nimport * as React15 from \"react\";\nfunction useContractEvent({\n  address,\n  chainId,\n  abi,\n  listener,\n  eventName\n} = {}) {\n  const publicClient = usePublicClient({\n    chainId\n  });\n  const webSocketPublicClient = useWebSocketPublicClient({\n    chainId\n  });\n  const unwatch = React15.useRef();\n  React15.useEffect(() => {\n    if (!abi || !address || !eventName) return;\n    const publicClient_ = webSocketPublicClient || publicClient;\n    unwatch.current = publicClient_.watchContractEvent({\n      abi,\n      address,\n      eventName,\n      onLogs: listener\n    });\n    return unwatch.current;\n  }, [abi, address, eventName, publicClient.uid, webSocketPublicClient?.uid]);\n  return unwatch.current;\n}\n\n// src/hooks/contracts/useContractInfiniteReads.ts\nimport { replaceEqualDeep } from \"@tanstack/react-query\";\nimport { deepEqual as deepEqual2, readContracts } from \"@wagmi/core\";\nimport * as React16 from \"react\";\nfunction queryKey5({\n  allowFailure,\n  blockNumber,\n  blockTag,\n  cacheKey,\n  scopeKey\n}) {\n  return [{\n    entity: \"readContractsInfinite\",\n    allowFailure,\n    blockNumber,\n    blockTag,\n    cacheKey,\n    scopeKey\n  }];\n}\nfunction queryFn5({\n  contracts\n}) {\n  return ({\n    queryKey: [{\n      allowFailure,\n      blockNumber,\n      blockTag\n    }],\n    pageParam\n  }) => {\n    return readContracts({\n      allowFailure,\n      blockNumber,\n      blockTag,\n      contracts: contracts(pageParam || void 0)\n    });\n  };\n}\nfunction useContractInfiniteReads({\n  allowFailure,\n  blockNumber,\n  blockTag,\n  cacheKey,\n  cacheTime,\n  contracts,\n  enabled: enabled_ = true,\n  getNextPageParam,\n  isDataEqual,\n  keepPreviousData,\n  onError,\n  onSettled,\n  onSuccess,\n  scopeKey,\n  select,\n  staleTime,\n  structuralSharing = (oldData, newData) => deepEqual2(oldData, newData) ? oldData : replaceEqualDeep(oldData, newData),\n  suspense\n}) {\n  const queryKey_ = React16.useMemo(() => queryKey5({\n    allowFailure,\n    blockNumber,\n    blockTag,\n    cacheKey,\n    scopeKey\n  }), [allowFailure, blockNumber, blockTag, cacheKey, scopeKey]);\n  const enabled = React16.useMemo(() => {\n    const enabled2 = Boolean(enabled_ && contracts);\n    return enabled2;\n  }, [contracts, enabled_]);\n  return useInfiniteQuery(queryKey_, queryFn5({\n    contracts\n  }), {\n    cacheTime,\n    enabled,\n    getNextPageParam,\n    isDataEqual,\n    keepPreviousData,\n    select,\n    staleTime,\n    structuralSharing,\n    suspense,\n    onError,\n    onSettled,\n    onSuccess\n  });\n}\nfunction paginatedIndexesConfig(fn, {\n  perPage,\n  start,\n  direction\n}) {\n  const contracts = (page = 0) => [...Array(perPage).keys()].map(index => {\n    return direction === \"increment\" ? start + index + page * perPage : start - index - page * perPage;\n  }).filter(index => index >= 0).flatMap(fn);\n  return {\n    contracts,\n    getNextPageParam(lastPage, pages) {\n      return lastPage?.length === perPage ? pages.length : void 0;\n    }\n  };\n}\n\n// src/hooks/contracts/useContractRead.ts\nimport { replaceEqualDeep as replaceEqualDeep2 } from \"@tanstack/react-query\";\nimport { deepEqual as deepEqual3, readContract } from \"@wagmi/core\";\nimport * as React17 from \"react\";\nfunction queryKey6({\n  account,\n  address,\n  args,\n  blockNumber,\n  blockTag,\n  chainId,\n  functionName,\n  scopeKey\n}) {\n  return [{\n    entity: \"readContract\",\n    account,\n    address,\n    args,\n    blockNumber,\n    blockTag,\n    chainId,\n    functionName,\n    scopeKey\n  }];\n}\nfunction queryFn6({\n  abi\n}) {\n  return async ({\n    queryKey: [{\n      account,\n      address,\n      args,\n      blockNumber,\n      blockTag,\n      chainId,\n      functionName\n    }]\n  }) => {\n    if (!abi) throw new Error(\"abi is required\");\n    if (!address) throw new Error(\"address is required\");\n    return (await readContract({\n      account,\n      address,\n      args,\n      blockNumber,\n      blockTag,\n      chainId,\n      abi,\n      functionName\n    })) ?? null;\n  };\n}\nfunction useContractRead({\n  abi,\n  address,\n  account,\n  args,\n  blockNumber: blockNumberOverride,\n  blockTag,\n  cacheOnBlock = false,\n  cacheTime,\n  chainId: chainId_,\n  enabled: enabled_ = true,\n  functionName,\n  isDataEqual,\n  keepPreviousData,\n  onError,\n  onSettled,\n  onSuccess,\n  scopeKey,\n  select,\n  staleTime,\n  structuralSharing = (oldData, newData) => deepEqual3(oldData, newData) ? oldData : replaceEqualDeep2(oldData, newData),\n  suspense,\n  watch\n} = {}) {\n  const chainId = useChainId({\n    chainId: chainId_\n  });\n  const {\n    data: blockNumber_\n  } = useBlockNumber({\n    chainId,\n    enabled: watch || cacheOnBlock,\n    scopeKey: watch || cacheOnBlock ? void 0 : \"idle\",\n    watch\n  });\n  const blockNumber = blockNumberOverride ?? blockNumber_;\n  const queryKey_ = React17.useMemo(() => queryKey6({\n    account,\n    address,\n    args,\n    blockNumber: cacheOnBlock ? blockNumber : void 0,\n    blockTag,\n    chainId,\n    functionName,\n    scopeKey\n  }), [account, address, args, blockNumber, blockTag, cacheOnBlock, chainId, functionName, scopeKey]);\n  const enabled = React17.useMemo(() => {\n    let enabled2 = Boolean(enabled_ && abi && address && functionName);\n    if (cacheOnBlock) enabled2 = Boolean(enabled2 && blockNumber);\n    return enabled2;\n  }, [abi, address, blockNumber, cacheOnBlock, enabled_, functionName]);\n  useInvalidateOnBlock({\n    chainId,\n    enabled: Boolean(enabled && watch && !cacheOnBlock),\n    queryKey: queryKey_\n  });\n  return useQuery(queryKey_, queryFn6({\n    abi\n  }), {\n    cacheTime,\n    enabled,\n    isDataEqual,\n    keepPreviousData,\n    select,\n    staleTime,\n    structuralSharing,\n    suspense,\n    onError,\n    onSettled,\n    onSuccess\n  });\n}\n\n// src/hooks/contracts/useContractReads.ts\nimport { replaceEqualDeep as replaceEqualDeep3 } from \"@tanstack/react-query\";\nimport { deepEqual as deepEqual4, readContracts as readContracts2 } from \"@wagmi/core\";\nimport * as React18 from \"react\";\nfunction queryKey7({\n  allowFailure,\n  blockNumber,\n  blockTag,\n  chainId,\n  contracts,\n  scopeKey\n}) {\n  return [{\n    entity: \"readContracts\",\n    allowFailure,\n    blockNumber,\n    blockTag,\n    chainId,\n    scopeKey,\n    contracts: (contracts ?? []).map(({\n      address,\n      args,\n      chainId: chainId2,\n      functionName\n    }) => ({\n      address,\n      args,\n      chainId: chainId2,\n      functionName\n    }))\n  }];\n}\nfunction queryFn7({\n  abis\n}) {\n  return ({\n    queryKey: [{\n      allowFailure,\n      blockNumber,\n      blockTag,\n      contracts: contracts_\n    }]\n  }) => {\n    const contracts = contracts_.map((contract, i) => ({\n      ...contract,\n      abi: abis[i]\n    }));\n    return readContracts2({\n      allowFailure,\n      contracts,\n      blockNumber,\n      blockTag\n    });\n  };\n}\nfunction useContractReads({\n  allowFailure: allowFailure_,\n  blockNumber: blockNumberOverride,\n  blockTag,\n  cacheOnBlock = false,\n  cacheTime,\n  contracts,\n  enabled: enabled_ = true,\n  isDataEqual,\n  keepPreviousData,\n  onError,\n  onSettled,\n  onSuccess,\n  scopeKey,\n  select,\n  staleTime,\n  structuralSharing = (oldData, newData) => deepEqual4(oldData, newData) ? oldData : replaceEqualDeep3(oldData, newData),\n  suspense,\n  watch\n} = {}) {\n  const allowFailure = allowFailure_ ?? true;\n  const {\n    data: blockNumber_\n  } = useBlockNumber({\n    enabled: watch || cacheOnBlock,\n    watch\n  });\n  const chainId = useChainId();\n  const blockNumber = blockNumberOverride ?? blockNumber_;\n  const queryKey_ = React18.useMemo(() => queryKey7({\n    allowFailure,\n    blockNumber: cacheOnBlock ? blockNumber : void 0,\n    blockTag,\n    chainId,\n    contracts,\n    scopeKey\n  }), [allowFailure, blockNumber, blockTag, cacheOnBlock, chainId, scopeKey, contracts]);\n  const enabled = React18.useMemo(() => {\n    let enabled2 = Boolean(enabled_ && contracts?.every(x => x.abi && x.address && x.functionName));\n    if (cacheOnBlock) enabled2 = Boolean(enabled2 && blockNumber);\n    return enabled2;\n  }, [blockNumber, cacheOnBlock, contracts, enabled_]);\n  useInvalidateOnBlock({\n    enabled: Boolean(enabled && watch && !cacheOnBlock),\n    queryKey: queryKey_\n  });\n  const abis = (contracts ?? []).map(({\n    abi\n  }) => abi);\n  return useQuery(queryKey_, queryFn7({\n    abis\n  }), {\n    cacheTime,\n    enabled,\n    isDataEqual,\n    keepPreviousData,\n    staleTime,\n    select,\n    structuralSharing,\n    suspense,\n    onError,\n    onSettled,\n    onSuccess\n  });\n}\n\n// src/hooks/contracts/useContractWrite.ts\nimport { writeContract } from \"@wagmi/core\";\nimport { getSendTransactionParameters } from \"@wagmi/core/internal\";\nimport * as React19 from \"react\";\nfunction mutationKey6({\n  address,\n  abi,\n  functionName,\n  ...config\n}) {\n  const {\n    args,\n    accessList,\n    account,\n    gas,\n    gasPrice,\n    maxFeePerGas,\n    maxPriorityFeePerGas,\n    nonce,\n    request,\n    value\n  } = config;\n  return [{\n    entity: \"writeContract\",\n    address,\n    args,\n    abi,\n    accessList,\n    account,\n    functionName,\n    gas,\n    gasPrice,\n    maxFeePerGas,\n    maxPriorityFeePerGas,\n    nonce,\n    request,\n    value\n  }];\n}\nfunction mutationFn6(config) {\n  if (config.mode === \"prepared\") {\n    if (!config.request) throw new Error(\"request is required\");\n    return writeContract({\n      mode: \"prepared\",\n      request: config.request\n    });\n  }\n  if (!config.address) throw new Error(\"address is required\");\n  if (!config.abi) throw new Error(\"abi is required\");\n  if (!config.functionName) throw new Error(\"functionName is required\");\n  return writeContract({\n    address: config.address,\n    args: config.args,\n    chainId: config.chainId,\n    abi: config.abi,\n    functionName: config.functionName,\n    accessList: config.accessList,\n    account: config.account,\n    gas: config.gas,\n    gasPrice: config.gasPrice,\n    maxFeePerGas: config.maxFeePerGas,\n    maxPriorityFeePerGas: config.maxPriorityFeePerGas,\n    nonce: config.nonce,\n    value: config.value\n  });\n}\nfunction useContractWrite(config) {\n  const {\n    address,\n    abi,\n    args,\n    chainId,\n    functionName,\n    mode,\n    request\n  } = config;\n  const {\n    accessList,\n    account,\n    gas,\n    gasPrice,\n    maxFeePerGas,\n    maxPriorityFeePerGas,\n    nonce,\n    value\n  } = getSendTransactionParameters(config);\n  const {\n    data,\n    error,\n    isError,\n    isIdle,\n    isLoading,\n    isSuccess,\n    mutate,\n    mutateAsync,\n    reset,\n    status,\n    variables\n  } = useMutation(mutationKey6({\n    address,\n    abi,\n    functionName,\n    chainId,\n    mode,\n    args,\n    accessList,\n    account,\n    gas,\n    gasPrice,\n    maxFeePerGas,\n    maxPriorityFeePerGas,\n    nonce,\n    request,\n    value\n  }), mutationFn6, {\n    onError: config.onError,\n    onMutate: config.onMutate,\n    onSettled: config.onSettled,\n    onSuccess: config.onSuccess\n  });\n  const write = React19.useMemo(() => {\n    if (config.mode === \"prepared\") {\n      if (!request) return void 0;\n      return () => mutate({\n        mode: \"prepared\",\n        request: config.request,\n        chainId: config.chainId\n      });\n    }\n    return overrideConfig => mutate({\n      address,\n      args,\n      abi,\n      functionName,\n      chainId,\n      accessList,\n      account,\n      gas,\n      gasPrice,\n      maxFeePerGas,\n      maxPriorityFeePerGas,\n      nonce,\n      value,\n      ...overrideConfig\n    });\n  }, [accessList, account, abi, address, args, chainId, config.chainId, config.mode, config.request, functionName, gas, gasPrice, maxFeePerGas, maxPriorityFeePerGas, mutate, nonce, request, value]);\n  const writeAsync = React19.useMemo(() => {\n    if (config.mode === \"prepared\") {\n      if (!request) return void 0;\n      return () => mutateAsync({\n        mode: \"prepared\",\n        request: config.request\n      });\n    }\n    return overrideConfig => mutateAsync({\n      address,\n      args,\n      abi,\n      chainId,\n      functionName,\n      accessList,\n      account,\n      gas,\n      gasPrice,\n      maxFeePerGas,\n      maxPriorityFeePerGas,\n      nonce,\n      value,\n      ...overrideConfig\n    });\n  }, [accessList, account, abi, address, args, chainId, config.mode, config.request, functionName, gas, gasPrice, maxFeePerGas, maxPriorityFeePerGas, mutateAsync, nonce, request, value]);\n  return {\n    data,\n    error,\n    isError,\n    isIdle,\n    isLoading,\n    isSuccess,\n    reset,\n    status,\n    variables,\n    write,\n    writeAsync\n  };\n}\n\n// src/hooks/contracts/usePrepareContractWrite.ts\nimport { prepareWriteContract } from \"@wagmi/core\";\nimport { getCallParameters } from \"@wagmi/core/internal\";\nfunction queryKey8({\n  accessList,\n  account,\n  activeChainId,\n  args,\n  address,\n  blockNumber,\n  blockTag,\n  chainId,\n  functionName,\n  gas,\n  gasPrice,\n  maxFeePerGas,\n  maxPriorityFeePerGas,\n  nonce,\n  scopeKey,\n  walletClientAddress,\n  value\n}) {\n  return [{\n    entity: \"prepareContractTransaction\",\n    accessList,\n    account,\n    activeChainId,\n    address,\n    args,\n    blockNumber,\n    blockTag,\n    chainId,\n    functionName,\n    gas,\n    gasPrice,\n    maxFeePerGas,\n    maxPriorityFeePerGas,\n    nonce,\n    scopeKey,\n    walletClientAddress,\n    value\n  }];\n}\nfunction queryFn8({\n  abi,\n  walletClient\n}) {\n  return ({\n    queryKey: [{\n      accessList,\n      account,\n      args,\n      address,\n      blockNumber,\n      blockTag,\n      chainId,\n      functionName,\n      gas,\n      gasPrice,\n      maxFeePerGas,\n      maxPriorityFeePerGas,\n      nonce,\n      value\n    }]\n  }) => {\n    if (!abi) throw new Error(\"abi is required\");\n    if (!address) throw new Error(\"address is required\");\n    if (!functionName) throw new Error(\"functionName is required\");\n    return prepareWriteContract({\n      abi,\n      accessList,\n      account,\n      args,\n      address,\n      blockNumber,\n      blockTag,\n      chainId,\n      functionName,\n      gas,\n      gasPrice,\n      maxFeePerGas,\n      maxPriorityFeePerGas,\n      nonce,\n      walletClient,\n      value\n    });\n  };\n}\nfunction usePrepareContractWrite({\n  address,\n  abi,\n  functionName,\n  chainId,\n  args,\n  cacheTime,\n  enabled = true,\n  scopeKey,\n  staleTime,\n  suspense,\n  onError,\n  onSettled,\n  onSuccess,\n  ...config\n} = {}) {\n  const {\n    chain: activeChain\n  } = useNetwork();\n  const {\n    data: walletClient\n  } = useWalletClient({\n    chainId\n  });\n  const {\n    accessList,\n    account,\n    blockNumber,\n    blockTag,\n    gas,\n    gasPrice,\n    maxFeePerGas,\n    maxPriorityFeePerGas,\n    nonce,\n    value\n  } = getCallParameters(config);\n  const prepareContractWriteQuery = useQuery(queryKey8({\n    accessList,\n    account,\n    activeChainId: activeChain?.id,\n    address,\n    args,\n    blockNumber,\n    blockTag,\n    chainId,\n    functionName,\n    gas,\n    gasPrice,\n    maxFeePerGas,\n    maxPriorityFeePerGas,\n    nonce,\n    scopeKey,\n    walletClientAddress: walletClient?.account.address,\n    value\n  }), queryFn8({\n    abi,\n    walletClient\n  }), {\n    cacheTime,\n    enabled: Boolean(enabled && abi && address && functionName && walletClient),\n    staleTime,\n    suspense,\n    onError,\n    onSettled,\n    onSuccess\n  });\n  return Object.assign(prepareContractWriteQuery, {\n    config: {\n      chainId,\n      mode: \"prepared\",\n      request: void 0,\n      ...prepareContractWriteQuery.data\n    }\n  });\n}\n\n// src/hooks/contracts/useToken.ts\nimport { fetchToken } from \"@wagmi/core\";\nfunction queryKey9({\n  address,\n  chainId,\n  formatUnits,\n  scopeKey\n}) {\n  return [{\n    entity: \"token\",\n    address,\n    chainId,\n    formatUnits,\n    scopeKey\n  }];\n}\nfunction queryFn9({\n  queryKey: [{\n    address,\n    chainId,\n    formatUnits\n  }]\n}) {\n  if (!address) throw new Error(\"address is required\");\n  return fetchToken({\n    address,\n    chainId,\n    formatUnits\n  });\n}\nfunction useToken({\n  address,\n  chainId: chainId_,\n  formatUnits = \"ether\",\n  cacheTime,\n  enabled = true,\n  scopeKey,\n  staleTime = 1e3 * 60 * 60 * 24,\n  suspense,\n  onError,\n  onSettled,\n  onSuccess\n} = {}) {\n  const chainId = useChainId({\n    chainId: chainId_\n  });\n  return useQuery(queryKey9({\n    address,\n    chainId,\n    formatUnits,\n    scopeKey\n  }), queryFn9, {\n    cacheTime,\n    enabled: Boolean(enabled && address),\n    staleTime,\n    suspense,\n    onError,\n    onSettled,\n    onSuccess\n  });\n}\n\n// src/hooks/ens/useEnsAddress.ts\nimport { fetchEnsAddress } from \"@wagmi/core\";\nfunction queryKey10({\n  chainId,\n  name,\n  scopeKey\n}) {\n  return [{\n    entity: \"ensAddress\",\n    chainId,\n    name,\n    scopeKey\n  }];\n}\nfunction queryFn10({\n  queryKey: [{\n    chainId,\n    name\n  }]\n}) {\n  if (!name) throw new Error(\"name is required\");\n  return fetchEnsAddress({\n    chainId,\n    name\n  });\n}\nfunction useEnsAddress({\n  cacheTime,\n  chainId: chainId_,\n  enabled = true,\n  name,\n  scopeKey,\n  staleTime = 1e3 * 60 * 60 * 24,\n  suspense,\n  onError,\n  onSettled,\n  onSuccess\n} = {}) {\n  const chainId = useChainId({\n    chainId: chainId_\n  });\n  return useQuery(queryKey10({\n    chainId,\n    name,\n    scopeKey\n  }), queryFn10, {\n    cacheTime,\n    enabled: Boolean(enabled && chainId && name),\n    staleTime,\n    suspense,\n    onError,\n    onSettled,\n    onSuccess\n  });\n}\n\n// src/hooks/ens/useEnsAvatar.ts\nimport { fetchEnsAvatar } from \"@wagmi/core\";\nfunction queryKey11({\n  name,\n  chainId,\n  scopeKey\n}) {\n  return [{\n    entity: \"ensAvatar\",\n    name,\n    chainId,\n    scopeKey\n  }];\n}\nfunction queryFn11({\n  queryKey: [{\n    name,\n    chainId\n  }]\n}) {\n  if (!name) throw new Error(\"name is required\");\n  return fetchEnsAvatar({\n    name,\n    chainId\n  });\n}\nfunction useEnsAvatar({\n  cacheTime,\n  chainId: chainId_,\n  enabled = true,\n  name,\n  scopeKey,\n  staleTime = 1e3 * 60 * 60 * 24,\n  suspense,\n  onError,\n  onSettled,\n  onSuccess\n} = {}) {\n  const chainId = useChainId({\n    chainId: chainId_\n  });\n  return useQuery(queryKey11({\n    name,\n    chainId,\n    scopeKey\n  }), queryFn11, {\n    cacheTime,\n    enabled: Boolean(enabled && name && chainId),\n    staleTime,\n    suspense,\n    onError,\n    onSettled,\n    onSuccess\n  });\n}\n\n// src/hooks/ens/useEnsName.ts\nimport { fetchEnsName } from \"@wagmi/core\";\nfunction queryKey12({\n  address,\n  chainId,\n  scopeKey\n}) {\n  return [{\n    entity: \"ensName\",\n    address,\n    chainId,\n    scopeKey\n  }];\n}\nfunction queryFn12({\n  queryKey: [{\n    address,\n    chainId\n  }]\n}) {\n  if (!address) throw new Error(\"address is required\");\n  return fetchEnsName({\n    address,\n    chainId\n  });\n}\nfunction useEnsName({\n  address,\n  cacheTime,\n  chainId: chainId_,\n  enabled = true,\n  scopeKey,\n  staleTime = 1e3 * 60 * 60 * 24,\n  suspense,\n  onError,\n  onSettled,\n  onSuccess\n} = {}) {\n  const chainId = useChainId({\n    chainId: chainId_\n  });\n  return useQuery(queryKey12({\n    address,\n    chainId,\n    scopeKey\n  }), queryFn12, {\n    cacheTime,\n    enabled: Boolean(enabled && address && chainId),\n    staleTime,\n    suspense,\n    onError,\n    onSettled,\n    onSuccess\n  });\n}\n\n// src/hooks/ens/useEnsResolver.ts\nimport { fetchEnsResolver } from \"@wagmi/core\";\nfunction queryKey13({\n  chainId,\n  name,\n  scopeKey\n}) {\n  return [{\n    entity: \"ensResolver\",\n    chainId,\n    name,\n    scopeKey,\n    persist: false\n  }];\n}\nfunction queryFn13({\n  queryKey: [{\n    chainId,\n    name\n  }]\n}) {\n  if (!name) throw new Error(\"name is required\");\n  return fetchEnsResolver({\n    chainId,\n    name\n  });\n}\nfunction useEnsResolver({\n  chainId: chainId_,\n  name,\n  enabled = true,\n  scopeKey,\n  suspense,\n  onError,\n  onSettled,\n  onSuccess\n} = {}) {\n  const chainId = useChainId({\n    chainId: chainId_\n  });\n  return useQuery(queryKey13({\n    chainId,\n    name,\n    scopeKey\n  }), queryFn13, {\n    cacheTime: 0,\n    enabled: Boolean(enabled && chainId && name),\n    suspense,\n    onError,\n    onSettled,\n    onSuccess\n  });\n}\n\n// src/hooks/transactions/usePrepareSendTransaction.ts\nimport { prepareSendTransaction } from \"@wagmi/core\";\nfunction queryKey14({\n  accessList,\n  account,\n  activeChainId,\n  chainId,\n  data,\n  gas,\n  gasPrice,\n  maxFeePerGas,\n  maxPriorityFeePerGas,\n  nonce,\n  to,\n  value,\n  scopeKey,\n  walletClientAddress\n}) {\n  return [{\n    entity: \"prepareSendTransaction\",\n    activeChainId,\n    accessList,\n    account,\n    chainId,\n    data,\n    gas,\n    gasPrice,\n    maxFeePerGas,\n    maxPriorityFeePerGas,\n    nonce,\n    to,\n    value,\n    scopeKey,\n    walletClientAddress\n  }];\n}\nfunction queryFn14({\n  walletClient\n}) {\n  return ({\n    queryKey: [{\n      accessList,\n      account,\n      chainId,\n      data,\n      gas,\n      gasPrice,\n      maxFeePerGas,\n      maxPriorityFeePerGas,\n      nonce,\n      to,\n      value\n    }]\n  }) => {\n    if (!to) throw new Error(\"to is required\");\n    return prepareSendTransaction({\n      accessList,\n      account,\n      chainId,\n      data,\n      gas,\n      gasPrice,\n      maxFeePerGas,\n      maxPriorityFeePerGas,\n      nonce,\n      to,\n      value,\n      walletClient\n    });\n  };\n}\nfunction usePrepareSendTransaction({\n  accessList,\n  account,\n  chainId,\n  cacheTime,\n  data,\n  enabled = true,\n  gas,\n  gasPrice,\n  maxFeePerGas,\n  maxPriorityFeePerGas,\n  nonce,\n  scopeKey,\n  staleTime,\n  suspense,\n  to,\n  value,\n  onError,\n  onSettled,\n  onSuccess\n} = {}) {\n  const {\n    chain: activeChain\n  } = useNetwork();\n  const {\n    data: walletClient\n  } = useWalletClient({\n    chainId\n  });\n  const prepareSendTransactionQuery = useQuery(queryKey14({\n    accessList,\n    activeChainId: activeChain?.id,\n    account,\n    chainId,\n    data,\n    gas,\n    gasPrice,\n    maxFeePerGas,\n    maxPriorityFeePerGas,\n    nonce,\n    scopeKey,\n    to,\n    value,\n    walletClientAddress: walletClient?.account.address\n  }), queryFn14({\n    walletClient\n  }), {\n    cacheTime,\n    enabled: Boolean(enabled && walletClient && to),\n    staleTime,\n    suspense,\n    onError,\n    onSettled,\n    onSuccess\n  });\n  return Object.assign(prepareSendTransactionQuery, {\n    config: {\n      mode: \"prepared\",\n      ...(prepareSendTransactionQuery.isSuccess ? prepareSendTransactionQuery.data : void 0)\n    }\n  });\n}\n\n// src/hooks/transactions/useSendTransaction.ts\nimport { sendTransaction } from \"@wagmi/core\";\nimport * as React20 from \"react\";\nvar mutationKey7 = args => [{\n  entity: \"sendTransaction\",\n  ...args\n}];\nvar mutationFn7 = ({\n  accessList,\n  account,\n  chainId,\n  data,\n  gas,\n  gasPrice,\n  maxFeePerGas,\n  maxPriorityFeePerGas,\n  mode,\n  nonce,\n  to,\n  value\n}) => {\n  if (!to) throw new Error(\"to is required.\");\n  return sendTransaction({\n    accessList,\n    account,\n    chainId,\n    data,\n    gas,\n    gasPrice,\n    maxFeePerGas,\n    maxPriorityFeePerGas,\n    mode,\n    nonce,\n    to,\n    value\n  });\n};\nfunction useSendTransaction({\n  accessList,\n  account,\n  chainId,\n  data: data_,\n  gas,\n  gasPrice,\n  maxFeePerGas,\n  maxPriorityFeePerGas,\n  mode,\n  nonce,\n  to,\n  value,\n  onError,\n  onMutate,\n  onSettled,\n  onSuccess\n} = {}) {\n  const {\n    data,\n    error,\n    isError,\n    isIdle,\n    isLoading,\n    isSuccess,\n    mutate,\n    mutateAsync,\n    reset,\n    status,\n    variables\n  } = useMutation(mutationKey7({\n    accessList,\n    account,\n    chainId,\n    data: data_,\n    gas,\n    gasPrice,\n    maxFeePerGas,\n    maxPriorityFeePerGas,\n    mode,\n    nonce,\n    to,\n    value\n  }), mutationFn7, {\n    onError,\n    onMutate,\n    onSettled,\n    onSuccess\n  });\n  const sendTransaction2 = React20.useCallback(args => mutate({\n    chainId,\n    mode,\n    ...(args || {\n      accessList,\n      account,\n      chainId,\n      data: data_,\n      gas,\n      gasPrice,\n      maxFeePerGas,\n      maxPriorityFeePerGas,\n      mode,\n      nonce,\n      value,\n      to\n    })\n  }), [accessList, account, chainId, data_, gas, gasPrice, maxFeePerGas, maxPriorityFeePerGas, mode, mutate, nonce, to, value]);\n  const sendTransactionAsync = React20.useCallback(args => mutateAsync({\n    chainId,\n    mode,\n    ...(args || {\n      accessList,\n      account,\n      chainId,\n      data: data_,\n      gas,\n      gasPrice,\n      maxFeePerGas,\n      maxPriorityFeePerGas,\n      mode,\n      nonce,\n      value,\n      to\n    })\n  }), [accessList, account, chainId, data_, gas, gasPrice, maxFeePerGas, maxPriorityFeePerGas, mode, mutateAsync, nonce, to, value]);\n  return {\n    data,\n    error,\n    isError,\n    isIdle,\n    isLoading,\n    isSuccess,\n    reset,\n    sendTransaction: mode === \"prepared\" && !to ? void 0 : sendTransaction2,\n    sendTransactionAsync: mode === \"prepared\" && !to ? void 0 : sendTransactionAsync,\n    status,\n    variables\n  };\n}\n\n// src/hooks/transactions/useTransaction.ts\nimport { fetchTransaction } from \"@wagmi/core\";\nfunction queryKey15({\n  chainId,\n  hash,\n  scopeKey\n}) {\n  return [{\n    entity: \"transaction\",\n    chainId,\n    hash,\n    scopeKey\n  }];\n}\nfunction queryFn15({\n  queryKey: [{\n    chainId,\n    hash\n  }]\n}) {\n  if (!hash) throw new Error(\"hash is required\");\n  return fetchTransaction({\n    chainId,\n    hash\n  });\n}\nfunction useTransaction({\n  cacheTime = 0,\n  chainId: chainId_,\n  enabled = true,\n  hash,\n  scopeKey,\n  staleTime,\n  suspense,\n  onError,\n  onSettled,\n  onSuccess\n} = {}) {\n  const chainId = useChainId({\n    chainId: chainId_\n  });\n  return useQuery(queryKey15({\n    chainId,\n    hash,\n    scopeKey\n  }), queryFn15, {\n    cacheTime,\n    enabled: Boolean(enabled && hash),\n    staleTime,\n    suspense,\n    onError,\n    onSettled,\n    onSuccess\n  });\n}\n\n// src/hooks/transactions/useWaitForTransaction.ts\nimport { waitForTransaction } from \"@wagmi/core\";\nfunction queryKey16({\n  confirmations,\n  chainId,\n  hash,\n  scopeKey,\n  timeout\n}) {\n  return [{\n    entity: \"waitForTransaction\",\n    confirmations,\n    chainId,\n    hash,\n    scopeKey,\n    timeout\n  }];\n}\nfunction queryFn16({\n  onReplaced\n}) {\n  return ({\n    queryKey: [{\n      chainId,\n      confirmations,\n      hash,\n      timeout\n    }]\n  }) => {\n    if (!hash) throw new Error(\"hash is required\");\n    return waitForTransaction({\n      chainId,\n      confirmations,\n      hash,\n      onReplaced,\n      timeout\n    });\n  };\n}\nfunction useWaitForTransaction({\n  chainId: chainId_,\n  confirmations,\n  hash,\n  timeout,\n  cacheTime,\n  enabled = true,\n  scopeKey,\n  staleTime,\n  suspense,\n  onError,\n  onReplaced,\n  onSettled,\n  onSuccess\n} = {}) {\n  const chainId = useChainId({\n    chainId: chainId_\n  });\n  return useQuery(queryKey16({\n    chainId,\n    confirmations,\n    hash,\n    scopeKey,\n    timeout\n  }), queryFn16({\n    onReplaced\n  }), {\n    cacheTime,\n    enabled: Boolean(enabled && hash),\n    staleTime,\n    suspense,\n    onError,\n    onSettled,\n    onSuccess\n  });\n}\n\n// src/hooks/transactions/useWatchPendingTransactions.ts\nimport * as React21 from \"react\";\nfunction useWatchPendingTransactions({\n  chainId: chainId_,\n  enabled = true,\n  listener\n}) {\n  const chainId = useChainId({\n    chainId: chainId_\n  });\n  const publicClient = usePublicClient({\n    chainId\n  });\n  const webSocketPublicClient = useWebSocketPublicClient({\n    chainId\n  });\n  React21.useEffect(() => {\n    if (!enabled) return;\n    const publicClient_ = webSocketPublicClient ?? publicClient;\n    return publicClient_.watchPendingTransactions({\n      onTransactions: listener\n    });\n  }, [enabled, listener, publicClient, webSocketPublicClient]);\n}\n\n// src/index.ts\nimport { ChainMismatchError, ChainNotConfiguredError, Connector, ConnectorAlreadyConnectedError, ConnectorNotFoundError, ConfigChainsNotFound, SwitchChainNotSupportedError, configureChains, createStorage as createStorage2, deepEqual as deepEqual5, deserialize, erc20ABI, erc721ABI, erc4626ABI, readContracts as readContracts3, serialize } from \"@wagmi/core\";\nimport { mainnet, sepolia } from \"viem/chains\";\nexport { ChainMismatchError, ChainNotConfiguredError, ConfigChainsNotFound, Connector, ConnectorAlreadyConnectedError, ConnectorNotFoundError, Context, SwitchChainNotSupportedError, WagmiConfig, configureChains, createConfig, createStorage2 as createStorage, deepEqual5 as deepEqual, deserialize, erc20ABI, erc4626ABI, erc721ABI, mainnet, paginatedIndexesConfig, readContracts3 as readContracts, sepolia, serialize, useAccount, useBalance, useBlockNumber, useChainId, useConfig, useConnect, useContractEvent, useContractInfiniteReads, useContractRead, useContractReads, useContractWrite, useDisconnect, useEnsAddress, useEnsAvatar, useEnsName, useEnsResolver, useFeeData, useInfiniteQuery, useMutation, useNetwork, usePrepareContractWrite, usePrepareSendTransaction, usePublicClient, useQuery, useQueryClient2 as useQueryClient, useSendTransaction, useSignMessage, useSignTypedData, useSwitchNetwork, useToken, useTransaction, useWaitForTransaction, useWalletClient, useWatchPendingTransactions, useWebSocketPublicClient };","map":{"version":3,"names":["createSyncStoragePersister","QueryClient","persistQueryClient","createConfig","createCoreConfig","createStorage","noopStorage","queryClient","defaultOptions","queries","cacheTime","networkMode","refetchOnWindowFocus","retry","mutations","storage","window","localStorage","persister","key","serialize","x","deserialize","args","config","dehydrateOptions","shouldDehydrateQuery","query","queryKey","persist","Object","assign","QueryClientProvider","React","Context","createContext","queryClientContext","WagmiConfig","children","createElement","Provider","client","context","value","useConfig","useContext","Error","join","getAccount","watchAccount","React9","notifyManager","useIsRestoring","useQueryClient","useQueryErrorResetBoundary","React2","pkg","useSyncExternalStore2","useSyncExternalStore","isQueryKey","Array","isArray","isPlainObject","o","hasObjectPrototype","ctor","constructor","prot","prototype","hasOwnProperty","toString","call","parseQueryArgs","arg1","arg2","arg3","queryFn","queryKeyHashFn","queryKey17","JSON","stringify","_","val","keys","sort","reduce","result","shouldThrowError","_useErrorBoundary","params","trackResult","observer","trackedResult","forEach","defineProperty","configurable","enumerable","get","trackedProps","add","useBaseQuery","options","Observer","isRestoring","errorResetBoundary","defaultedOptions","defaultQueryOptions","_optimisticResults","onError","batchCalls","onSuccess","onSettled","suspense","staleTime","useErrorBoundary","isReset","retryOnMount","useState","getOptimisticResult","useCallback","onStoreChange","subscribe","getCurrentResult","useEffect","clearReset","setOptions","listeners","isLoading","isFetching","fetchOptimistic","then","data","catch","error","isError","getCurrentQuery","status","fetchStatus","isIdle","InfiniteQueryObserver","useInfiniteQuery","parsedOptions","baseQuery","fetchNextPage","hasNextPage","isFetched","isFetchedAfterMount","isFetchingNextPage","isRefetching","isSuccess","refetch","internal","dataUpdatedAt","errorUpdatedAt","failureCount","isLoadingError","isPaused","isPlaceholderData","isPreviousData","isRefetchError","isStale","remove","notifyOnChangeProps","parseMutationArgs","useMutation","useMutation_","QueryObserver","useQuery","useQueryClient_","useQueryClient2","getPublicClient","watchPublicClient","useSyncExternalStoreWithSelector","usePublicClient","chainId","cb","a","b","uid","getWalletClient","watchWalletClient","React3","entity","useWalletClient","chainId_","connector","useAccount","useChainId","walletClientQuery","enabled","Boolean","Infinity","unwatch","walletClient","invalidateQueries","removeQueries","getWebSocketPublicClient","watchWebSocketPublicClient","useSyncExternalStoreWithSelector2","useWebSocketPublicClient","publicClient","chain","id","React4","useForceUpdate","forceUpdate","useReducer","React7","fetchBlockNumber","React5","queryKey2","scopeKey","queryFn2","useBlockNumber","watch","onBlock","webSocketPublicClient","publicClient_","watchBlockNumber","onBlockNumber","blockNumber","setQueryData","emitOnBegin","fetchFeeData","React6","queryKey3","formatUnits","queryFn3","useFeeData","queryKey_","useMemo","feeDataQuery","useInvalidateOnBlock","cancelRefetch","deepEqual","React8","useSyncExternalStoreWithSelector3","isPlainObject2","obj","useSyncExternalStoreWithTracked","getSnapshot","getServerSnapshot","isEqual","trackedKeys","useRef","current","length","equal","defineProperties","entries","res","includes","push","onConnect","onDisconnect","watchAccount_","callback","account","previousAccountRef","previousAccount","address","isReconnected","fetchBalance","React10","queryKey4","token","queryFn4","useBalance","balanceQuery","connect","React11","mutationKey","mutationFn","useConnect","onMutate","mutate","mutateAsync","reset","variables","connect2","connectAsync","connectors","pendingConnector","disconnect","mutationKey2","mutationFn2","useDisconnect","disconnect2","disconnectAsync","error2","_variables","_data","getNetwork","watchNetwork","useCallback5","useNetwork","watchNetwork_","signMessage","React12","mutationKey3","mutationFn3","message","useSignMessage","signMessage2","signMessageAsync","signTypedData","React13","mutationKey4","domain","types","primaryType","mutationFn4","useSignTypedData","signTypedData2","signTypedDataAsync","switchNetwork","React14","mutationKey5","mutationFn5","useSwitchNetwork","throwForSwitchChainNotSupported","switchNetwork_","switchNetworkAsync_","chains","switchNetwork2","switchNetworkAsync","supportsSwitchChain","switchChain","pendingChainId","React15","useContractEvent","abi","listener","eventName","watchContractEvent","onLogs","replaceEqualDeep","deepEqual2","readContracts","React16","queryKey5","allowFailure","blockTag","cacheKey","queryFn5","contracts","pageParam","useContractInfiniteReads","enabled_","getNextPageParam","isDataEqual","keepPreviousData","select","structuralSharing","oldData","newData","enabled2","paginatedIndexesConfig","fn","perPage","start","direction","page","map","index","filter","flatMap","lastPage","pages","replaceEqualDeep2","deepEqual3","readContract","React17","queryKey6","functionName","queryFn6","useContractRead","blockNumberOverride","cacheOnBlock","blockNumber_","replaceEqualDeep3","deepEqual4","readContracts2","React18","queryKey7","chainId2","queryFn7","abis","contracts_","contract","i","useContractReads","allowFailure_","every","writeContract","getSendTransactionParameters","React19","mutationKey6","accessList","gas","gasPrice","maxFeePerGas","maxPriorityFeePerGas","nonce","request","mutationFn6","mode","useContractWrite","write","overrideConfig","writeAsync","prepareWriteContract","getCallParameters","queryKey8","activeChainId","walletClientAddress","queryFn8","usePrepareContractWrite","activeChain","prepareContractWriteQuery","fetchToken","queryKey9","queryFn9","useToken","fetchEnsAddress","queryKey10","name","queryFn10","useEnsAddress","fetchEnsAvatar","queryKey11","queryFn11","useEnsAvatar","fetchEnsName","queryKey12","queryFn12","useEnsName","fetchEnsResolver","queryKey13","queryFn13","useEnsResolver","prepareSendTransaction","queryKey14","to","queryFn14","usePrepareSendTransaction","prepareSendTransactionQuery","sendTransaction","React20","mutationKey7","mutationFn7","useSendTransaction","data_","sendTransaction2","sendTransactionAsync","fetchTransaction","queryKey15","hash","queryFn15","useTransaction","waitForTransaction","queryKey16","confirmations","timeout","queryFn16","onReplaced","useWaitForTransaction","React21","useWatchPendingTransactions","watchPendingTransactions","onTransactions","ChainMismatchError","ChainNotConfiguredError","Connector","ConnectorAlreadyConnectedError","ConnectorNotFoundError","ConfigChainsNotFound","SwitchChainNotSupportedError","configureChains","createStorage2","deepEqual5","erc20ABI","erc721ABI","erc4626ABI","readContracts3","mainnet","sepolia"],"sources":["/Users/envyhose/Desktop/programs/keepsafe_repo/keepsafe/client/node_modules/wagmi/dist/index.js"],"sourcesContent":["\"use client\";\n\n// src/config.ts\nimport { createSyncStoragePersister } from \"@tanstack/query-sync-storage-persister\";\nimport { QueryClient } from \"@tanstack/react-query\";\nimport { persistQueryClient } from \"@tanstack/react-query-persist-client\";\nimport {\n  createConfig as createCoreConfig,\n  createStorage,\n  noopStorage\n} from \"@wagmi/core\";\nfunction createConfig({\n  queryClient = new QueryClient({\n    defaultOptions: {\n      queries: {\n        cacheTime: 1e3 * 60 * 60 * 24,\n        networkMode: \"offlineFirst\",\n        refetchOnWindowFocus: false,\n        retry: 0\n      },\n      mutations: {\n        networkMode: \"offlineFirst\"\n      }\n    }\n  }),\n  storage = createStorage({\n    storage: typeof window !== \"undefined\" && window.localStorage ? window.localStorage : noopStorage\n  }),\n  persister = typeof window !== \"undefined\" ? createSyncStoragePersister({\n    key: \"cache\",\n    storage,\n    serialize: (x) => x,\n    deserialize: (x) => x\n  }) : void 0,\n  ...args\n}) {\n  const config = createCoreConfig({\n    ...args,\n    storage\n  });\n  if (persister)\n    persistQueryClient({\n      queryClient,\n      persister,\n      dehydrateOptions: {\n        shouldDehydrateQuery: (query) => query.cacheTime !== 0 && query.queryKey[0].persist !== false\n      }\n    });\n  return Object.assign(config, { queryClient });\n}\n\n// src/context.ts\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport * as React from \"react\";\nvar Context = React.createContext(void 0);\nvar queryClientContext = React.createContext(\n  void 0\n);\nfunction WagmiConfig({\n  children,\n  config\n}) {\n  return React.createElement(Context.Provider, {\n    children: React.createElement(QueryClientProvider, {\n      children,\n      client: config.queryClient,\n      context: queryClientContext\n    }),\n    value: config\n  });\n}\nfunction useConfig() {\n  const config = React.useContext(Context);\n  if (!config)\n    throw new Error(\n      [\n        \"`useConfig` must be used within `WagmiConfig`.\\n\",\n        \"Read more: https://wagmi.sh/react/WagmiConfig\"\n      ].join(\"\\n\")\n    );\n  return config;\n}\n\n// src/hooks/accounts/useAccount.ts\nimport { getAccount, watchAccount } from \"@wagmi/core\";\nimport * as React9 from \"react\";\n\n// src/hooks/utils/query/useBaseQuery.ts\nimport {\n  notifyManager,\n  useIsRestoring,\n  useQueryClient,\n  useQueryErrorResetBoundary\n} from \"@tanstack/react-query\";\nimport * as React2 from \"react\";\n\n// src/hooks/utils/useSyncExternalStore.ts\nimport * as pkg from \"use-sync-external-store/shim/index.js\";\nvar useSyncExternalStore2 = pkg.useSyncExternalStore;\n\n// src/hooks/utils/query/utils.ts\nfunction isQueryKey(value) {\n  return Array.isArray(value);\n}\nfunction isPlainObject(o) {\n  if (!hasObjectPrototype(o)) {\n    return false;\n  }\n  const ctor = o.constructor;\n  if (typeof ctor === \"undefined\") {\n    return true;\n  }\n  const prot = ctor.prototype;\n  if (!hasObjectPrototype(prot)) {\n    return false;\n  }\n  if (!prot.hasOwnProperty(\"isPrototypeOf\")) {\n    return false;\n  }\n  return true;\n}\nfunction hasObjectPrototype(o) {\n  return Object.prototype.toString.call(o) === \"[object Object]\";\n}\nfunction parseQueryArgs(arg1, arg2, arg3) {\n  if (!isQueryKey(arg1)) {\n    return arg1;\n  }\n  if (typeof arg2 === \"function\") {\n    return { ...arg3, queryKey: arg1, queryFn: arg2 };\n  }\n  return { ...arg2, queryKey: arg1 };\n}\nfunction queryKeyHashFn(queryKey17) {\n  return JSON.stringify(\n    queryKey17,\n    (_, val) => isPlainObject(val) ? Object.keys(val).sort().reduce((result, key) => {\n      result[key] = val[key];\n      return result;\n    }, {}) : typeof val === \"bigint\" ? val.toString() : val\n  );\n}\nfunction shouldThrowError(_useErrorBoundary, params) {\n  if (typeof _useErrorBoundary === \"function\") {\n    return _useErrorBoundary(...params);\n  }\n  return !!_useErrorBoundary;\n}\nfunction trackResult(result, observer) {\n  const trackedResult = {};\n  Object.keys(result).forEach((key) => {\n    Object.defineProperty(trackedResult, key, {\n      configurable: false,\n      enumerable: true,\n      get: () => {\n        observer.trackedProps.add(key);\n        return result[key];\n      }\n    });\n  });\n  return trackedResult;\n}\n\n// src/hooks/utils/query/useBaseQuery.ts\nfunction useBaseQuery(options, Observer) {\n  const queryClient = useQueryClient({ context: options.context });\n  const isRestoring = useIsRestoring();\n  const errorResetBoundary = useQueryErrorResetBoundary();\n  const defaultedOptions = queryClient.defaultQueryOptions({\n    ...options,\n    queryKeyHashFn\n  });\n  defaultedOptions._optimisticResults = isRestoring ? \"isRestoring\" : \"optimistic\";\n  if (defaultedOptions.onError) {\n    defaultedOptions.onError = notifyManager.batchCalls(\n      defaultedOptions.onError\n    );\n  }\n  if (defaultedOptions.onSuccess) {\n    defaultedOptions.onSuccess = notifyManager.batchCalls(\n      defaultedOptions.onSuccess\n    );\n  }\n  if (defaultedOptions.onSettled) {\n    defaultedOptions.onSettled = notifyManager.batchCalls(\n      defaultedOptions.onSettled\n    );\n  }\n  if (defaultedOptions.suspense) {\n    if (typeof defaultedOptions.staleTime !== \"number\") {\n      defaultedOptions.staleTime = 1e3;\n    }\n  }\n  if (defaultedOptions.suspense || defaultedOptions.useErrorBoundary) {\n    if (!errorResetBoundary.isReset()) {\n      defaultedOptions.retryOnMount = false;\n    }\n  }\n  const [observer] = React2.useState(\n    () => new Observer(\n      queryClient,\n      defaultedOptions\n    )\n  );\n  const result = observer.getOptimisticResult(defaultedOptions);\n  useSyncExternalStore2(\n    React2.useCallback(\n      (onStoreChange) => isRestoring ? () => void 0 : observer.subscribe(notifyManager.batchCalls(onStoreChange)),\n      [observer, isRestoring]\n    ),\n    () => observer.getCurrentResult(),\n    () => observer.getCurrentResult()\n  );\n  React2.useEffect(() => {\n    errorResetBoundary.clearReset();\n  }, [errorResetBoundary]);\n  React2.useEffect(() => {\n    observer.setOptions(defaultedOptions, { listeners: false });\n  }, [defaultedOptions, observer]);\n  if (defaultedOptions.suspense && result.isLoading && result.isFetching && !isRestoring) {\n    throw observer.fetchOptimistic(defaultedOptions).then(({ data }) => {\n      defaultedOptions.onSuccess?.(data);\n      defaultedOptions.onSettled?.(data, null);\n    }).catch((error) => {\n      errorResetBoundary.clearReset();\n      defaultedOptions.onError?.(error);\n      defaultedOptions.onSettled?.(void 0, error);\n    });\n  }\n  if (result.isError && !errorResetBoundary.isReset() && !result.isFetching && shouldThrowError(defaultedOptions.useErrorBoundary, [\n    result.error,\n    observer.getCurrentQuery()\n  ])) {\n    throw result.error;\n  }\n  const status = result.status === \"loading\" && result.fetchStatus === \"idle\" ? \"idle\" : result.status;\n  const isIdle = status === \"idle\";\n  const isLoading = status === \"loading\" && result.fetchStatus === \"fetching\";\n  return {\n    ...result,\n    defaultedOptions,\n    isIdle,\n    isLoading,\n    observer,\n    status\n  };\n}\n\n// src/hooks/utils/query/useInfiniteQuery.ts\nimport { InfiniteQueryObserver } from \"@tanstack/react-query\";\nfunction useInfiniteQuery(arg1, arg2, arg3) {\n  const parsedOptions = parseQueryArgs(arg1, arg2, arg3);\n  const baseQuery = useBaseQuery(\n    { context: queryClientContext, ...parsedOptions },\n    InfiniteQueryObserver\n  );\n  const result = {\n    data: baseQuery.data,\n    error: baseQuery.error,\n    fetchNextPage: baseQuery.fetchNextPage,\n    fetchStatus: baseQuery.fetchStatus,\n    hasNextPage: baseQuery.hasNextPage,\n    isError: baseQuery.isError,\n    isFetched: baseQuery.isFetched,\n    isFetchedAfterMount: baseQuery.isFetchedAfterMount,\n    isFetching: baseQuery.isFetching,\n    isFetchingNextPage: baseQuery.isFetchingNextPage,\n    isIdle: baseQuery.isIdle,\n    isLoading: baseQuery.isLoading,\n    isRefetching: baseQuery.isRefetching,\n    isSuccess: baseQuery.isSuccess,\n    refetch: baseQuery.refetch,\n    status: baseQuery.status,\n    internal: {\n      dataUpdatedAt: baseQuery.dataUpdatedAt,\n      errorUpdatedAt: baseQuery.errorUpdatedAt,\n      failureCount: baseQuery.failureCount,\n      isFetchedAfterMount: baseQuery.isFetchedAfterMount,\n      isLoadingError: baseQuery.isLoadingError,\n      isPaused: baseQuery.isPaused,\n      isPlaceholderData: baseQuery.isPlaceholderData,\n      isPreviousData: baseQuery.isPreviousData,\n      isRefetchError: baseQuery.isRefetchError,\n      isStale: baseQuery.isStale,\n      remove: baseQuery.remove\n    }\n  };\n  return !baseQuery.defaultedOptions.notifyOnChangeProps ? trackResult(result, baseQuery.observer) : result;\n}\n\n// src/hooks/utils/query/useMutation.ts\nimport {\n  parseMutationArgs,\n  useMutation as useMutation_\n} from \"@tanstack/react-query\";\nfunction useMutation(arg1, arg2, arg3) {\n  const options = parseMutationArgs(arg1, arg2, arg3);\n  return useMutation_({ context: queryClientContext, ...options });\n}\n\n// src/hooks/utils/query/useQuery.ts\nimport { QueryObserver } from \"@tanstack/react-query\";\nfunction useQuery(arg1, arg2, arg3) {\n  const parsedOptions = parseQueryArgs(arg1, arg2, arg3);\n  const baseQuery = useBaseQuery({ context: queryClientContext, ...parsedOptions }, QueryObserver);\n  const result = {\n    data: baseQuery.data,\n    error: baseQuery.error,\n    fetchStatus: baseQuery.fetchStatus,\n    isError: baseQuery.isError,\n    isFetched: baseQuery.isFetched,\n    isFetchedAfterMount: baseQuery.isFetchedAfterMount,\n    isFetching: baseQuery.isFetching,\n    isIdle: baseQuery.isIdle,\n    isLoading: baseQuery.isLoading,\n    isRefetching: baseQuery.isRefetching,\n    isSuccess: baseQuery.isSuccess,\n    refetch: baseQuery.refetch,\n    status: baseQuery.status,\n    internal: {\n      dataUpdatedAt: baseQuery.dataUpdatedAt,\n      errorUpdatedAt: baseQuery.errorUpdatedAt,\n      failureCount: baseQuery.failureCount,\n      isFetchedAfterMount: baseQuery.isFetchedAfterMount,\n      isLoadingError: baseQuery.isLoadingError,\n      isPaused: baseQuery.isPaused,\n      isPlaceholderData: baseQuery.isPlaceholderData,\n      isPreviousData: baseQuery.isPreviousData,\n      isRefetchError: baseQuery.isRefetchError,\n      isStale: baseQuery.isStale,\n      remove: baseQuery.remove\n    }\n  };\n  return !baseQuery.defaultedOptions.notifyOnChangeProps ? trackResult(result, baseQuery.observer) : result;\n}\n\n// src/hooks/utils/query/useQueryClient.ts\nimport { useQueryClient as useQueryClient_ } from \"@tanstack/react-query\";\nvar useQueryClient2 = () => useQueryClient_({ context: queryClientContext });\n\n// src/hooks/viem/usePublicClient.ts\nimport { getPublicClient, watchPublicClient } from \"@wagmi/core\";\nimport { useSyncExternalStoreWithSelector } from \"use-sync-external-store/shim/with-selector.js\";\nfunction usePublicClient({\n  chainId\n} = {}) {\n  return useSyncExternalStoreWithSelector(\n    (cb) => watchPublicClient({ chainId }, cb),\n    () => getPublicClient({ chainId }),\n    () => getPublicClient({ chainId }),\n    (x) => x,\n    (a, b) => a.uid === b.uid\n  );\n}\n\n// src/hooks/viem/useWalletClient.ts\nimport { getWalletClient, watchWalletClient } from \"@wagmi/core\";\nimport * as React3 from \"react\";\nfunction queryKey({ chainId }) {\n  return [{ entity: \"walletClient\", chainId, persist: false }];\n}\nfunction queryFn({\n  queryKey: [{ chainId }]\n}) {\n  return getWalletClient({ chainId });\n}\nfunction useWalletClient({\n  chainId: chainId_,\n  suspense,\n  onError,\n  onSettled,\n  onSuccess\n} = {}) {\n  const { connector } = useAccount();\n  const chainId = useChainId({ chainId: chainId_ });\n  const walletClientQuery = useQuery(queryKey({ chainId }), queryFn, {\n    cacheTime: 0,\n    enabled: Boolean(connector),\n    staleTime: Infinity,\n    suspense,\n    onError,\n    onSettled,\n    onSuccess\n  });\n  const queryClient = useQueryClient2();\n  React3.useEffect(() => {\n    const unwatch = watchWalletClient({ chainId }, (walletClient) => {\n      if (walletClient)\n        queryClient.invalidateQueries(queryKey({ chainId }));\n      else\n        queryClient.removeQueries(queryKey({ chainId }));\n    });\n    return unwatch;\n  }, [queryClient, chainId]);\n  return walletClientQuery;\n}\n\n// src/hooks/viem/useWebSocketPublicClient.ts\nimport {\n  getWebSocketPublicClient,\n  watchWebSocketPublicClient\n} from \"@wagmi/core\";\nimport { useSyncExternalStoreWithSelector as useSyncExternalStoreWithSelector2 } from \"use-sync-external-store/shim/with-selector.js\";\nfunction useWebSocketPublicClient({ chainId } = {}) {\n  return useSyncExternalStoreWithSelector2(\n    (cb) => watchWebSocketPublicClient({ chainId }, cb),\n    () => getWebSocketPublicClient({ chainId }),\n    () => getWebSocketPublicClient({ chainId }),\n    (x) => x,\n    (a, b) => a?.uid === b?.uid\n  );\n}\n\n// src/hooks/utils/useChainId.ts\nfunction useChainId({ chainId } = {}) {\n  const publicClient = usePublicClient({ chainId });\n  return publicClient.chain.id;\n}\n\n// src/hooks/utils/useForceUpdate.ts\nimport * as React4 from \"react\";\nfunction useForceUpdate() {\n  const [, forceUpdate] = React4.useReducer((x) => x + 1, 0);\n  return forceUpdate;\n}\n\n// src/hooks/utils/useInvalidateOnBlock.ts\nimport * as React7 from \"react\";\n\n// src/hooks/network-status/useBlockNumber.ts\nimport { fetchBlockNumber } from \"@wagmi/core\";\nimport * as React5 from \"react\";\nfunction queryKey2({ chainId, scopeKey }) {\n  return [{ entity: \"blockNumber\", chainId, scopeKey }];\n}\nfunction queryFn2({\n  queryKey: [{ chainId }]\n}) {\n  return fetchBlockNumber({ chainId });\n}\nfunction useBlockNumber({\n  cacheTime = 0,\n  chainId: chainId_,\n  enabled = true,\n  scopeKey,\n  staleTime,\n  suspense,\n  watch = false,\n  onBlock,\n  onError,\n  onSettled,\n  onSuccess\n} = {}) {\n  const chainId = useChainId({ chainId: chainId_ });\n  const publicClient = usePublicClient({ chainId });\n  const webSocketPublicClient = useWebSocketPublicClient({ chainId });\n  const queryClient = useQueryClient2();\n  React5.useEffect(() => {\n    if (!enabled)\n      return;\n    if (!watch && !onBlock)\n      return;\n    const publicClient_ = webSocketPublicClient ?? publicClient;\n    const unwatch = publicClient_.watchBlockNumber({\n      onBlockNumber: (blockNumber) => {\n        if (watch)\n          queryClient.setQueryData(queryKey2({ chainId, scopeKey }), blockNumber);\n        if (onBlock)\n          onBlock(blockNumber);\n      },\n      emitOnBegin: true\n    });\n    return unwatch;\n  }, [\n    chainId,\n    scopeKey,\n    onBlock,\n    publicClient,\n    queryClient,\n    watch,\n    webSocketPublicClient,\n    enabled\n  ]);\n  return useQuery(queryKey2({ scopeKey, chainId }), queryFn2, {\n    cacheTime,\n    enabled,\n    staleTime,\n    suspense,\n    onError,\n    onSettled,\n    onSuccess\n  });\n}\n\n// src/hooks/network-status/useFeeData.ts\nimport { fetchFeeData } from \"@wagmi/core\";\nimport * as React6 from \"react\";\nfunction queryKey3({\n  chainId,\n  formatUnits,\n  scopeKey\n}) {\n  return [{ entity: \"feeData\", chainId, formatUnits, scopeKey }];\n}\nfunction queryFn3({\n  queryKey: [{ chainId, formatUnits }]\n}) {\n  return fetchFeeData({ chainId, formatUnits });\n}\nfunction useFeeData({\n  cacheTime,\n  chainId: chainId_,\n  enabled = true,\n  formatUnits = \"gwei\",\n  scopeKey,\n  staleTime,\n  suspense,\n  watch,\n  onError,\n  onSettled,\n  onSuccess\n} = {}) {\n  const chainId = useChainId({ chainId: chainId_ });\n  const queryKey_ = React6.useMemo(\n    () => queryKey3({\n      chainId,\n      formatUnits,\n      scopeKey\n    }),\n    [chainId, formatUnits, scopeKey]\n  );\n  const feeDataQuery = useQuery(queryKey_, queryFn3, {\n    cacheTime,\n    enabled,\n    staleTime,\n    suspense,\n    onError,\n    onSettled,\n    onSuccess\n  });\n  useInvalidateOnBlock({\n    chainId,\n    enabled: Boolean(enabled && watch),\n    queryKey: queryKey_\n  });\n  return feeDataQuery;\n}\n\n// src/hooks/utils/useInvalidateOnBlock.ts\nfunction useInvalidateOnBlock({\n  chainId,\n  enabled,\n  queryKey: queryKey17\n}) {\n  const queryClient = useQueryClient2();\n  const onBlock = React7.useCallback(\n    () => queryClient.invalidateQueries({ queryKey: queryKey17 }, { cancelRefetch: false }),\n    [queryClient, queryKey17]\n  );\n  useBlockNumber({\n    chainId,\n    enabled,\n    onBlock: enabled ? onBlock : void 0,\n    scopeKey: enabled ? void 0 : \"idle\"\n  });\n}\n\n// src/hooks/utils/useSyncExternalStoreWithTracked.ts\nimport { deepEqual } from \"@wagmi/core\";\nimport * as React8 from \"react\";\nimport { useSyncExternalStoreWithSelector as useSyncExternalStoreWithSelector3 } from \"use-sync-external-store/shim/with-selector.js\";\nvar isPlainObject2 = (obj) => typeof obj === \"object\" && !Array.isArray(obj);\nfunction useSyncExternalStoreWithTracked(subscribe, getSnapshot, getServerSnapshot = getSnapshot, isEqual = deepEqual) {\n  const trackedKeys = React8.useRef([]);\n  const result = useSyncExternalStoreWithSelector3(\n    subscribe,\n    getSnapshot,\n    getServerSnapshot,\n    (x) => x,\n    (a, b) => {\n      if (isPlainObject2(a) && isPlainObject2(b) && trackedKeys.current.length) {\n        for (const key of trackedKeys.current) {\n          const equal = isEqual(\n            a[key],\n            b[key]\n          );\n          if (!equal)\n            return false;\n        }\n        return true;\n      }\n      return isEqual(a, b);\n    }\n  );\n  if (isPlainObject2(result)) {\n    const trackedResult = { ...result };\n    Object.defineProperties(\n      trackedResult,\n      Object.entries(trackedResult).reduce(\n        (res, [key, value]) => {\n          return {\n            ...res,\n            [key]: {\n              configurable: false,\n              enumerable: true,\n              get: () => {\n                if (!trackedKeys.current.includes(key)) {\n                  trackedKeys.current.push(key);\n                }\n                return value;\n              }\n            }\n          };\n        },\n        {}\n      )\n    );\n    return trackedResult;\n  }\n  return result;\n}\n\n// src/hooks/accounts/useAccount.ts\nfunction useAccount({ onConnect, onDisconnect } = {}) {\n  const config = useConfig();\n  const watchAccount_ = React9.useCallback(\n    (callback) => watchAccount(callback),\n    [config]\n  );\n  const account = useSyncExternalStoreWithTracked(watchAccount_, getAccount);\n  const previousAccountRef = React9.useRef();\n  const previousAccount = previousAccountRef.current;\n  React9.useEffect(() => {\n    if (previousAccount?.status !== \"connected\" && account.status === \"connected\") {\n      onConnect?.({\n        address: account.address,\n        connector: account.connector,\n        isReconnected: previousAccount?.status === \"reconnecting\" || previousAccount?.status === void 0\n      });\n    }\n    if (previousAccount?.status === \"connected\" && account.status === \"disconnected\") {\n      onDisconnect?.();\n    }\n    previousAccountRef.current = account;\n  }, [onConnect, onDisconnect, previousAccount, account]);\n  return account;\n}\n\n// src/hooks/accounts/useBalance.ts\nimport { fetchBalance } from \"@wagmi/core\";\nimport * as React10 from \"react\";\nfunction queryKey4({\n  address,\n  chainId,\n  formatUnits,\n  scopeKey,\n  token\n}) {\n  return [\n    {\n      entity: \"balance\",\n      address,\n      chainId,\n      formatUnits,\n      scopeKey,\n      token\n    }\n  ];\n}\nfunction queryFn4({\n  queryKey: [{ address, chainId, formatUnits, token }]\n}) {\n  if (!address)\n    throw new Error(\"address is required\");\n  return fetchBalance({ address, chainId, formatUnits, token });\n}\nfunction useBalance({\n  address,\n  cacheTime,\n  chainId: chainId_,\n  enabled = true,\n  formatUnits,\n  scopeKey,\n  staleTime,\n  suspense,\n  token,\n  watch,\n  onError,\n  onSettled,\n  onSuccess\n} = {}) {\n  const chainId = useChainId({ chainId: chainId_ });\n  const queryKey_ = React10.useMemo(\n    () => queryKey4({ address, chainId, formatUnits, scopeKey, token }),\n    [address, chainId, formatUnits, scopeKey, token]\n  );\n  const balanceQuery = useQuery(queryKey_, queryFn4, {\n    cacheTime,\n    enabled: Boolean(enabled && address),\n    staleTime,\n    suspense,\n    onError,\n    onSettled,\n    onSuccess\n  });\n  useInvalidateOnBlock({\n    chainId,\n    enabled: Boolean(enabled && watch && address),\n    queryKey: queryKey_\n  });\n  return balanceQuery;\n}\n\n// src/hooks/accounts/useConnect.ts\nimport { connect } from \"@wagmi/core\";\nimport * as React11 from \"react\";\nvar mutationKey = (args) => [{ entity: \"connect\", ...args }];\nvar mutationFn = (args) => {\n  const { connector, chainId } = args;\n  if (!connector)\n    throw new Error(\"connector is required\");\n  return connect({ connector, chainId });\n};\nfunction useConnect({\n  chainId,\n  connector,\n  onError,\n  onMutate,\n  onSettled,\n  onSuccess\n} = {}) {\n  const config = useConfig();\n  const {\n    data,\n    error,\n    isError,\n    isIdle,\n    isLoading,\n    isSuccess,\n    mutate,\n    mutateAsync,\n    reset,\n    status,\n    variables\n  } = useMutation(mutationKey({ connector, chainId }), mutationFn, {\n    onError,\n    onMutate,\n    onSettled,\n    onSuccess\n  });\n  const connect2 = React11.useCallback(\n    (args) => {\n      return mutate({\n        chainId: args?.chainId ?? chainId,\n        connector: args?.connector ?? connector\n      });\n    },\n    [chainId, connector, mutate]\n  );\n  const connectAsync = React11.useCallback(\n    (args) => {\n      return mutateAsync({\n        chainId: args?.chainId ?? chainId,\n        connector: args?.connector ?? connector\n      });\n    },\n    [chainId, connector, mutateAsync]\n  );\n  return {\n    connect: connect2,\n    connectAsync,\n    connectors: config.connectors,\n    data,\n    error,\n    isError,\n    isIdle,\n    isLoading,\n    isSuccess,\n    pendingConnector: variables?.connector,\n    reset,\n    status,\n    variables\n  };\n}\n\n// src/hooks/accounts/useDisconnect.ts\nimport { disconnect } from \"@wagmi/core\";\nvar mutationKey2 = [{ entity: \"disconnect\" }];\nvar mutationFn2 = () => disconnect();\nfunction useDisconnect({\n  onError,\n  onMutate,\n  onSettled,\n  onSuccess\n} = {}) {\n  const {\n    error,\n    isError,\n    isIdle,\n    isLoading,\n    isSuccess,\n    mutate: disconnect2,\n    mutateAsync: disconnectAsync,\n    reset,\n    status\n  } = useMutation(mutationKey2, mutationFn2, {\n    ...onError ? {\n      onError(error2, _variables, context) {\n        onError(error2, context);\n      }\n    } : {},\n    onMutate,\n    ...onSettled ? {\n      onSettled(_data, error2, _variables, context) {\n        onSettled(error2, context);\n      }\n    } : {},\n    ...onSuccess ? {\n      onSuccess(_data, _variables, context) {\n        onSuccess(context);\n      }\n    } : {}\n  });\n  return {\n    disconnect: disconnect2,\n    disconnectAsync,\n    error,\n    isError,\n    isIdle,\n    isLoading,\n    isSuccess,\n    reset,\n    status\n  };\n}\n\n// src/hooks/accounts/useNetwork.ts\nimport { getNetwork, watchNetwork } from \"@wagmi/core\";\nimport { useCallback as useCallback5 } from \"react\";\nfunction useNetwork() {\n  const config = useConfig();\n  const watchNetwork_ = useCallback5(\n    (callback) => watchNetwork(callback),\n    [config]\n  );\n  return useSyncExternalStoreWithTracked(watchNetwork_, getNetwork);\n}\n\n// src/hooks/accounts/useSignMessage.ts\nimport { signMessage } from \"@wagmi/core\";\nimport * as React12 from \"react\";\nvar mutationKey3 = (args) => [{ entity: \"signMessage\", ...args }];\nvar mutationFn3 = (args) => {\n  const { message } = args;\n  if (!message)\n    throw new Error(\"message is required\");\n  return signMessage({ message });\n};\nfunction useSignMessage({\n  message,\n  onError,\n  onMutate,\n  onSettled,\n  onSuccess\n} = {}) {\n  const {\n    data,\n    error,\n    isError,\n    isIdle,\n    isLoading,\n    isSuccess,\n    mutate,\n    mutateAsync,\n    reset,\n    status,\n    variables\n  } = useMutation(mutationKey3({ message }), mutationFn3, {\n    onError,\n    onMutate,\n    onSettled,\n    onSuccess\n  });\n  const signMessage2 = React12.useCallback(\n    (args) => mutate(args || { message }),\n    [message, mutate]\n  );\n  const signMessageAsync = React12.useCallback(\n    (args) => mutateAsync(args || { message }),\n    [message, mutateAsync]\n  );\n  return {\n    data,\n    error,\n    isError,\n    isIdle,\n    isLoading,\n    isSuccess,\n    reset,\n    signMessage: signMessage2,\n    signMessageAsync,\n    status,\n    variables\n  };\n}\n\n// src/hooks/accounts/useSignTypedData.ts\nimport { signTypedData } from \"@wagmi/core\";\nimport * as React13 from \"react\";\nfunction mutationKey4({ domain, types, message, primaryType }) {\n  return [\n    { entity: \"signTypedData\", domain, types, message, primaryType }\n  ];\n}\nfunction mutationFn4(args) {\n  const { domain, types, primaryType, message } = args;\n  if (!domain)\n    throw new Error(\"domain is required\");\n  if (!types)\n    throw new Error(\"types is required\");\n  if (!primaryType)\n    throw new Error(\"primaryType is required\");\n  if (!message)\n    throw new Error(\"message is required\");\n  return signTypedData({\n    domain,\n    message,\n    primaryType,\n    types\n  });\n}\nfunction useSignTypedData({\n  domain,\n  types,\n  message,\n  primaryType,\n  onError,\n  onMutate,\n  onSettled,\n  onSuccess\n} = {}) {\n  const {\n    data,\n    error,\n    isError,\n    isIdle,\n    isLoading,\n    isSuccess,\n    mutate,\n    mutateAsync,\n    reset,\n    status,\n    variables\n  } = useMutation(\n    mutationKey4({\n      domain,\n      message,\n      primaryType,\n      types\n    }),\n    mutationFn4,\n    {\n      onError,\n      onMutate,\n      onSettled,\n      onSuccess\n    }\n  );\n  const signTypedData2 = React13.useCallback(\n    (args) => mutate({\n      domain: args?.domain ?? domain,\n      types: args?.types ?? types,\n      message: args?.message ?? message,\n      primaryType: args?.primaryType ?? primaryType\n    }),\n    [domain, types, primaryType, message, mutate]\n  );\n  const signTypedDataAsync = React13.useCallback(\n    (args) => mutateAsync({\n      domain: args?.domain ?? domain,\n      types: args?.types ?? types,\n      message: args?.message ?? message,\n      primaryType: args?.primaryType ?? primaryType\n    }),\n    [domain, types, primaryType, message, mutateAsync]\n  );\n  return {\n    data,\n    error,\n    isError,\n    isIdle,\n    isLoading,\n    isSuccess,\n    reset,\n    signTypedData: signTypedData2,\n    signTypedDataAsync,\n    status,\n    variables\n  };\n}\n\n// src/hooks/accounts/useSwitchNetwork.ts\nimport { switchNetwork } from \"@wagmi/core\";\nimport * as React14 from \"react\";\nvar mutationKey5 = (args) => [{ entity: \"switchNetwork\", ...args }];\nvar mutationFn5 = (args) => {\n  const { chainId } = args;\n  if (!chainId)\n    throw new Error(\"chainId is required\");\n  return switchNetwork({ chainId });\n};\nfunction useSwitchNetwork({\n  chainId,\n  throwForSwitchChainNotSupported,\n  onError,\n  onMutate,\n  onSettled,\n  onSuccess\n} = {}) {\n  const config = useConfig();\n  const forceUpdate = useForceUpdate();\n  const {\n    data,\n    error,\n    isError,\n    isIdle,\n    isLoading,\n    isSuccess,\n    mutate,\n    mutateAsync,\n    reset,\n    status,\n    variables\n  } = useMutation(mutationKey5({ chainId }), mutationFn5, {\n    onError,\n    onMutate,\n    onSettled,\n    onSuccess\n  });\n  const switchNetwork_ = React14.useCallback(\n    (chainId_) => mutate({ chainId: chainId_ ?? chainId }),\n    [chainId, mutate]\n  );\n  const switchNetworkAsync_ = React14.useCallback(\n    (chainId_) => mutateAsync({ chainId: chainId_ ?? chainId }),\n    [chainId, mutateAsync]\n  );\n  React14.useEffect(() => {\n    const unwatch = config.subscribe(\n      ({ chains, connector }) => ({\n        chains,\n        connector\n      }),\n      forceUpdate\n    );\n    return unwatch;\n  }, [config, forceUpdate]);\n  let switchNetwork2;\n  let switchNetworkAsync;\n  const supportsSwitchChain = !!config.connector?.switchChain;\n  if (throwForSwitchChainNotSupported || supportsSwitchChain) {\n    switchNetwork2 = switchNetwork_;\n    switchNetworkAsync = switchNetworkAsync_;\n  }\n  return {\n    chains: config.chains ?? [],\n    data,\n    error,\n    isError,\n    isIdle,\n    isLoading,\n    isSuccess,\n    pendingChainId: variables?.chainId,\n    reset,\n    status,\n    switchNetwork: switchNetwork2,\n    switchNetworkAsync,\n    variables\n  };\n}\n\n// src/hooks/contracts/useContractEvent.ts\nimport * as React15 from \"react\";\nfunction useContractEvent({\n  address,\n  chainId,\n  abi,\n  listener,\n  eventName\n} = {}) {\n  const publicClient = usePublicClient({ chainId });\n  const webSocketPublicClient = useWebSocketPublicClient({ chainId });\n  const unwatch = React15.useRef();\n  React15.useEffect(() => {\n    if (!abi || !address || !eventName)\n      return;\n    const publicClient_ = webSocketPublicClient || publicClient;\n    unwatch.current = publicClient_.watchContractEvent({\n      abi,\n      address,\n      eventName,\n      onLogs: listener\n    });\n    return unwatch.current;\n  }, [abi, address, eventName, publicClient.uid, webSocketPublicClient?.uid]);\n  return unwatch.current;\n}\n\n// src/hooks/contracts/useContractInfiniteReads.ts\nimport { replaceEqualDeep } from \"@tanstack/react-query\";\nimport { deepEqual as deepEqual2, readContracts } from \"@wagmi/core\";\nimport * as React16 from \"react\";\nfunction queryKey5({\n  allowFailure,\n  blockNumber,\n  blockTag,\n  cacheKey,\n  scopeKey\n}) {\n  return [\n    {\n      entity: \"readContractsInfinite\",\n      allowFailure,\n      blockNumber,\n      blockTag,\n      cacheKey,\n      scopeKey\n    }\n  ];\n}\nfunction queryFn5({\n  contracts\n}) {\n  return ({\n    queryKey: [{ allowFailure, blockNumber, blockTag }],\n    pageParam\n  }) => {\n    return readContracts({\n      allowFailure,\n      blockNumber,\n      blockTag,\n      contracts: contracts(pageParam || void 0)\n    });\n  };\n}\nfunction useContractInfiniteReads({\n  allowFailure,\n  blockNumber,\n  blockTag,\n  cacheKey,\n  cacheTime,\n  contracts,\n  enabled: enabled_ = true,\n  getNextPageParam,\n  isDataEqual,\n  keepPreviousData,\n  onError,\n  onSettled,\n  onSuccess,\n  scopeKey,\n  select,\n  staleTime,\n  structuralSharing = (oldData, newData) => deepEqual2(oldData, newData) ? oldData : replaceEqualDeep(oldData, newData),\n  suspense\n}) {\n  const queryKey_ = React16.useMemo(\n    () => queryKey5({ allowFailure, blockNumber, blockTag, cacheKey, scopeKey }),\n    [allowFailure, blockNumber, blockTag, cacheKey, scopeKey]\n  );\n  const enabled = React16.useMemo(() => {\n    const enabled2 = Boolean(enabled_ && contracts);\n    return enabled2;\n  }, [contracts, enabled_]);\n  return useInfiniteQuery(queryKey_, queryFn5({ contracts }), {\n    cacheTime,\n    enabled,\n    getNextPageParam,\n    isDataEqual,\n    keepPreviousData,\n    select,\n    staleTime,\n    structuralSharing,\n    suspense,\n    onError,\n    onSettled,\n    onSuccess\n  });\n}\nfunction paginatedIndexesConfig(fn, {\n  perPage,\n  start,\n  direction\n}) {\n  const contracts = (page = 0) => [...Array(perPage).keys()].map((index) => {\n    return direction === \"increment\" ? start + index + page * perPage : start - index - page * perPage;\n  }).filter((index) => index >= 0).flatMap(fn);\n  return {\n    contracts,\n    getNextPageParam(lastPage, pages) {\n      return lastPage?.length === perPage ? pages.length : void 0;\n    }\n  };\n}\n\n// src/hooks/contracts/useContractRead.ts\nimport { replaceEqualDeep as replaceEqualDeep2 } from \"@tanstack/react-query\";\nimport { deepEqual as deepEqual3, readContract } from \"@wagmi/core\";\nimport * as React17 from \"react\";\nfunction queryKey6({\n  account,\n  address,\n  args,\n  blockNumber,\n  blockTag,\n  chainId,\n  functionName,\n  scopeKey\n}) {\n  return [\n    {\n      entity: \"readContract\",\n      account,\n      address,\n      args,\n      blockNumber,\n      blockTag,\n      chainId,\n      functionName,\n      scopeKey\n    }\n  ];\n}\nfunction queryFn6({ abi }) {\n  return async ({\n    queryKey: [\n      { account, address, args, blockNumber, blockTag, chainId, functionName }\n    ]\n  }) => {\n    if (!abi)\n      throw new Error(\"abi is required\");\n    if (!address)\n      throw new Error(\"address is required\");\n    return await readContract({\n      account,\n      address,\n      args,\n      blockNumber,\n      blockTag,\n      chainId,\n      abi,\n      functionName\n    }) ?? null;\n  };\n}\nfunction useContractRead({\n  abi,\n  address,\n  account,\n  args,\n  blockNumber: blockNumberOverride,\n  blockTag,\n  cacheOnBlock = false,\n  cacheTime,\n  chainId: chainId_,\n  enabled: enabled_ = true,\n  functionName,\n  isDataEqual,\n  keepPreviousData,\n  onError,\n  onSettled,\n  onSuccess,\n  scopeKey,\n  select,\n  staleTime,\n  structuralSharing = (oldData, newData) => deepEqual3(oldData, newData) ? oldData : replaceEqualDeep2(oldData, newData),\n  suspense,\n  watch\n} = {}) {\n  const chainId = useChainId({ chainId: chainId_ });\n  const { data: blockNumber_ } = useBlockNumber({\n    chainId,\n    enabled: watch || cacheOnBlock,\n    scopeKey: watch || cacheOnBlock ? void 0 : \"idle\",\n    watch\n  });\n  const blockNumber = blockNumberOverride ?? blockNumber_;\n  const queryKey_ = React17.useMemo(\n    () => queryKey6({\n      account,\n      address,\n      args,\n      blockNumber: cacheOnBlock ? blockNumber : void 0,\n      blockTag,\n      chainId,\n      functionName,\n      scopeKey\n    }),\n    [\n      account,\n      address,\n      args,\n      blockNumber,\n      blockTag,\n      cacheOnBlock,\n      chainId,\n      functionName,\n      scopeKey\n    ]\n  );\n  const enabled = React17.useMemo(() => {\n    let enabled2 = Boolean(enabled_ && abi && address && functionName);\n    if (cacheOnBlock)\n      enabled2 = Boolean(enabled2 && blockNumber);\n    return enabled2;\n  }, [abi, address, blockNumber, cacheOnBlock, enabled_, functionName]);\n  useInvalidateOnBlock({\n    chainId,\n    enabled: Boolean(enabled && watch && !cacheOnBlock),\n    queryKey: queryKey_\n  });\n  return useQuery(\n    queryKey_,\n    queryFn6({\n      abi\n    }),\n    {\n      cacheTime,\n      enabled,\n      isDataEqual,\n      keepPreviousData,\n      select,\n      staleTime,\n      structuralSharing,\n      suspense,\n      onError,\n      onSettled,\n      onSuccess\n    }\n  );\n}\n\n// src/hooks/contracts/useContractReads.ts\nimport { replaceEqualDeep as replaceEqualDeep3 } from \"@tanstack/react-query\";\nimport { deepEqual as deepEqual4, readContracts as readContracts2 } from \"@wagmi/core\";\nimport * as React18 from \"react\";\nfunction queryKey7({\n  allowFailure,\n  blockNumber,\n  blockTag,\n  chainId,\n  contracts,\n  scopeKey\n}) {\n  return [\n    {\n      entity: \"readContracts\",\n      allowFailure,\n      blockNumber,\n      blockTag,\n      chainId,\n      scopeKey,\n      contracts: (contracts ?? []).map(({ address, args, chainId: chainId2, functionName }) => ({\n        address,\n        args,\n        chainId: chainId2,\n        functionName\n      }))\n    }\n  ];\n}\nfunction queryFn7({ abis }) {\n  return ({\n    queryKey: [{ allowFailure, blockNumber, blockTag, contracts: contracts_ }]\n  }) => {\n    const contracts = contracts_.map((contract, i) => ({\n      ...contract,\n      abi: abis[i]\n    }));\n    return readContracts2({\n      allowFailure,\n      contracts,\n      blockNumber,\n      blockTag\n    });\n  };\n}\nfunction useContractReads({\n  allowFailure: allowFailure_,\n  blockNumber: blockNumberOverride,\n  blockTag,\n  cacheOnBlock = false,\n  cacheTime,\n  contracts,\n  enabled: enabled_ = true,\n  isDataEqual,\n  keepPreviousData,\n  onError,\n  onSettled,\n  onSuccess,\n  scopeKey,\n  select,\n  staleTime,\n  structuralSharing = (oldData, newData) => deepEqual4(oldData, newData) ? oldData : replaceEqualDeep3(oldData, newData),\n  suspense,\n  watch\n} = {}) {\n  const allowFailure = allowFailure_ ?? true;\n  const { data: blockNumber_ } = useBlockNumber({\n    enabled: watch || cacheOnBlock,\n    watch\n  });\n  const chainId = useChainId();\n  const blockNumber = blockNumberOverride ?? blockNumber_;\n  const queryKey_ = React18.useMemo(\n    () => queryKey7({\n      allowFailure,\n      blockNumber: cacheOnBlock ? blockNumber : void 0,\n      blockTag,\n      chainId,\n      contracts,\n      scopeKey\n    }),\n    [\n      allowFailure,\n      blockNumber,\n      blockTag,\n      cacheOnBlock,\n      chainId,\n      scopeKey,\n      contracts\n    ]\n  );\n  const enabled = React18.useMemo(() => {\n    let enabled2 = Boolean(\n      enabled_ && contracts?.every(\n        (x) => x.abi && x.address && x.functionName\n      )\n    );\n    if (cacheOnBlock)\n      enabled2 = Boolean(enabled2 && blockNumber);\n    return enabled2;\n  }, [blockNumber, cacheOnBlock, contracts, enabled_]);\n  useInvalidateOnBlock({\n    enabled: Boolean(enabled && watch && !cacheOnBlock),\n    queryKey: queryKey_\n  });\n  const abis = (contracts ?? []).map(\n    ({ abi }) => abi\n  );\n  return useQuery(queryKey_, queryFn7({ abis }), {\n    cacheTime,\n    enabled,\n    isDataEqual,\n    keepPreviousData,\n    staleTime,\n    select,\n    structuralSharing,\n    suspense,\n    onError,\n    onSettled,\n    onSuccess\n  });\n}\n\n// src/hooks/contracts/useContractWrite.ts\nimport { writeContract } from \"@wagmi/core\";\nimport { getSendTransactionParameters } from \"@wagmi/core/internal\";\nimport * as React19 from \"react\";\nfunction mutationKey6({\n  address,\n  abi,\n  functionName,\n  ...config\n}) {\n  const {\n    args,\n    accessList,\n    account,\n    gas,\n    gasPrice,\n    maxFeePerGas,\n    maxPriorityFeePerGas,\n    nonce,\n    request,\n    value\n  } = config;\n  return [\n    {\n      entity: \"writeContract\",\n      address,\n      args,\n      abi,\n      accessList,\n      account,\n      functionName,\n      gas,\n      gasPrice,\n      maxFeePerGas,\n      maxPriorityFeePerGas,\n      nonce,\n      request,\n      value\n    }\n  ];\n}\nfunction mutationFn6(config) {\n  if (config.mode === \"prepared\") {\n    if (!config.request)\n      throw new Error(\"request is required\");\n    return writeContract({\n      mode: \"prepared\",\n      request: config.request\n    });\n  }\n  if (!config.address)\n    throw new Error(\"address is required\");\n  if (!config.abi)\n    throw new Error(\"abi is required\");\n  if (!config.functionName)\n    throw new Error(\"functionName is required\");\n  return writeContract({\n    address: config.address,\n    args: config.args,\n    chainId: config.chainId,\n    abi: config.abi,\n    functionName: config.functionName,\n    accessList: config.accessList,\n    account: config.account,\n    gas: config.gas,\n    gasPrice: config.gasPrice,\n    maxFeePerGas: config.maxFeePerGas,\n    maxPriorityFeePerGas: config.maxPriorityFeePerGas,\n    nonce: config.nonce,\n    value: config.value\n  });\n}\nfunction useContractWrite(config) {\n  const { address, abi, args, chainId, functionName, mode, request } = config;\n  const {\n    accessList,\n    account,\n    gas,\n    gasPrice,\n    maxFeePerGas,\n    maxPriorityFeePerGas,\n    nonce,\n    value\n  } = getSendTransactionParameters(config);\n  const {\n    data,\n    error,\n    isError,\n    isIdle,\n    isLoading,\n    isSuccess,\n    mutate,\n    mutateAsync,\n    reset,\n    status,\n    variables\n  } = useMutation(\n    mutationKey6({\n      address,\n      abi,\n      functionName,\n      chainId,\n      mode,\n      args,\n      accessList,\n      account,\n      gas,\n      gasPrice,\n      maxFeePerGas,\n      maxPriorityFeePerGas,\n      nonce,\n      request,\n      value\n    }),\n    mutationFn6,\n    {\n      onError: config.onError,\n      onMutate: config.onMutate,\n      onSettled: config.onSettled,\n      onSuccess: config.onSuccess\n    }\n  );\n  const write = React19.useMemo(() => {\n    if (config.mode === \"prepared\") {\n      if (!request)\n        return void 0;\n      return () => mutate({\n        mode: \"prepared\",\n        request: config.request,\n        chainId: config.chainId\n      });\n    }\n    return (overrideConfig) => mutate({\n      address,\n      args,\n      abi,\n      functionName,\n      chainId,\n      accessList,\n      account,\n      gas,\n      gasPrice,\n      maxFeePerGas,\n      maxPriorityFeePerGas,\n      nonce,\n      value,\n      ...overrideConfig\n    });\n  }, [\n    accessList,\n    account,\n    abi,\n    address,\n    args,\n    chainId,\n    config.chainId,\n    config.mode,\n    config.request,\n    functionName,\n    gas,\n    gasPrice,\n    maxFeePerGas,\n    maxPriorityFeePerGas,\n    mutate,\n    nonce,\n    request,\n    value\n  ]);\n  const writeAsync = React19.useMemo(() => {\n    if (config.mode === \"prepared\") {\n      if (!request)\n        return void 0;\n      return () => mutateAsync({\n        mode: \"prepared\",\n        request: config.request\n      });\n    }\n    return (overrideConfig) => mutateAsync({\n      address,\n      args,\n      abi,\n      chainId,\n      functionName,\n      accessList,\n      account,\n      gas,\n      gasPrice,\n      maxFeePerGas,\n      maxPriorityFeePerGas,\n      nonce,\n      value,\n      ...overrideConfig\n    });\n  }, [\n    accessList,\n    account,\n    abi,\n    address,\n    args,\n    chainId,\n    config.mode,\n    config.request,\n    functionName,\n    gas,\n    gasPrice,\n    maxFeePerGas,\n    maxPriorityFeePerGas,\n    mutateAsync,\n    nonce,\n    request,\n    value\n  ]);\n  return {\n    data,\n    error,\n    isError,\n    isIdle,\n    isLoading,\n    isSuccess,\n    reset,\n    status,\n    variables,\n    write,\n    writeAsync\n  };\n}\n\n// src/hooks/contracts/usePrepareContractWrite.ts\nimport { prepareWriteContract } from \"@wagmi/core\";\nimport { getCallParameters } from \"@wagmi/core/internal\";\nfunction queryKey8({\n  accessList,\n  account,\n  activeChainId,\n  args,\n  address,\n  blockNumber,\n  blockTag,\n  chainId,\n  functionName,\n  gas,\n  gasPrice,\n  maxFeePerGas,\n  maxPriorityFeePerGas,\n  nonce,\n  scopeKey,\n  walletClientAddress,\n  value\n}) {\n  return [\n    {\n      entity: \"prepareContractTransaction\",\n      accessList,\n      account,\n      activeChainId,\n      address,\n      args,\n      blockNumber,\n      blockTag,\n      chainId,\n      functionName,\n      gas,\n      gasPrice,\n      maxFeePerGas,\n      maxPriorityFeePerGas,\n      nonce,\n      scopeKey,\n      walletClientAddress,\n      value\n    }\n  ];\n}\nfunction queryFn8({\n  abi,\n  walletClient\n}) {\n  return ({\n    queryKey: [\n      {\n        accessList,\n        account,\n        args,\n        address,\n        blockNumber,\n        blockTag,\n        chainId,\n        functionName,\n        gas,\n        gasPrice,\n        maxFeePerGas,\n        maxPriorityFeePerGas,\n        nonce,\n        value\n      }\n    ]\n  }) => {\n    if (!abi)\n      throw new Error(\"abi is required\");\n    if (!address)\n      throw new Error(\"address is required\");\n    if (!functionName)\n      throw new Error(\"functionName is required\");\n    return prepareWriteContract({\n      abi,\n      accessList,\n      account,\n      args,\n      address,\n      blockNumber,\n      blockTag,\n      chainId,\n      functionName,\n      gas,\n      gasPrice,\n      maxFeePerGas,\n      maxPriorityFeePerGas,\n      nonce,\n      walletClient,\n      value\n    });\n  };\n}\nfunction usePrepareContractWrite({\n  address,\n  abi,\n  functionName,\n  chainId,\n  args,\n  cacheTime,\n  enabled = true,\n  scopeKey,\n  staleTime,\n  suspense,\n  onError,\n  onSettled,\n  onSuccess,\n  ...config\n} = {}) {\n  const { chain: activeChain } = useNetwork();\n  const { data: walletClient } = useWalletClient({ chainId });\n  const {\n    accessList,\n    account,\n    blockNumber,\n    blockTag,\n    gas,\n    gasPrice,\n    maxFeePerGas,\n    maxPriorityFeePerGas,\n    nonce,\n    value\n  } = getCallParameters(config);\n  const prepareContractWriteQuery = useQuery(\n    queryKey8({\n      accessList,\n      account,\n      activeChainId: activeChain?.id,\n      address,\n      args,\n      blockNumber,\n      blockTag,\n      chainId,\n      functionName,\n      gas,\n      gasPrice,\n      maxFeePerGas,\n      maxPriorityFeePerGas,\n      nonce,\n      scopeKey,\n      walletClientAddress: walletClient?.account.address,\n      value\n    }),\n    queryFn8({\n      abi,\n      walletClient\n    }),\n    {\n      cacheTime,\n      enabled: Boolean(\n        enabled && abi && address && functionName && walletClient\n      ),\n      staleTime,\n      suspense,\n      onError,\n      onSettled,\n      onSuccess\n    }\n  );\n  return Object.assign(prepareContractWriteQuery, {\n    config: {\n      chainId,\n      mode: \"prepared\",\n      request: void 0,\n      ...prepareContractWriteQuery.data\n    }\n  });\n}\n\n// src/hooks/contracts/useToken.ts\nimport { fetchToken } from \"@wagmi/core\";\nfunction queryKey9({\n  address,\n  chainId,\n  formatUnits,\n  scopeKey\n}) {\n  return [{ entity: \"token\", address, chainId, formatUnits, scopeKey }];\n}\nfunction queryFn9({\n  queryKey: [{ address, chainId, formatUnits }]\n}) {\n  if (!address)\n    throw new Error(\"address is required\");\n  return fetchToken({ address, chainId, formatUnits });\n}\nfunction useToken({\n  address,\n  chainId: chainId_,\n  formatUnits = \"ether\",\n  cacheTime,\n  enabled = true,\n  scopeKey,\n  staleTime = 1e3 * 60 * 60 * 24,\n  suspense,\n  onError,\n  onSettled,\n  onSuccess\n} = {}) {\n  const chainId = useChainId({ chainId: chainId_ });\n  return useQuery(\n    queryKey9({ address, chainId, formatUnits, scopeKey }),\n    queryFn9,\n    {\n      cacheTime,\n      enabled: Boolean(enabled && address),\n      staleTime,\n      suspense,\n      onError,\n      onSettled,\n      onSuccess\n    }\n  );\n}\n\n// src/hooks/ens/useEnsAddress.ts\nimport { fetchEnsAddress } from \"@wagmi/core\";\nfunction queryKey10({ chainId, name, scopeKey }) {\n  return [{ entity: \"ensAddress\", chainId, name, scopeKey }];\n}\nfunction queryFn10({\n  queryKey: [{ chainId, name }]\n}) {\n  if (!name)\n    throw new Error(\"name is required\");\n  return fetchEnsAddress({ chainId, name });\n}\nfunction useEnsAddress({\n  cacheTime,\n  chainId: chainId_,\n  enabled = true,\n  name,\n  scopeKey,\n  staleTime = 1e3 * 60 * 60 * 24,\n  suspense,\n  onError,\n  onSettled,\n  onSuccess\n} = {}) {\n  const chainId = useChainId({ chainId: chainId_ });\n  return useQuery(queryKey10({ chainId, name, scopeKey }), queryFn10, {\n    cacheTime,\n    enabled: Boolean(enabled && chainId && name),\n    staleTime,\n    suspense,\n    onError,\n    onSettled,\n    onSuccess\n  });\n}\n\n// src/hooks/ens/useEnsAvatar.ts\nimport { fetchEnsAvatar } from \"@wagmi/core\";\nfunction queryKey11({ name, chainId, scopeKey }) {\n  return [{ entity: \"ensAvatar\", name, chainId, scopeKey }];\n}\nfunction queryFn11({\n  queryKey: [{ name, chainId }]\n}) {\n  if (!name)\n    throw new Error(\"name is required\");\n  return fetchEnsAvatar({ name, chainId });\n}\nfunction useEnsAvatar({\n  cacheTime,\n  chainId: chainId_,\n  enabled = true,\n  name,\n  scopeKey,\n  staleTime = 1e3 * 60 * 60 * 24,\n  suspense,\n  onError,\n  onSettled,\n  onSuccess\n} = {}) {\n  const chainId = useChainId({ chainId: chainId_ });\n  return useQuery(queryKey11({ name, chainId, scopeKey }), queryFn11, {\n    cacheTime,\n    enabled: Boolean(enabled && name && chainId),\n    staleTime,\n    suspense,\n    onError,\n    onSettled,\n    onSuccess\n  });\n}\n\n// src/hooks/ens/useEnsName.ts\nimport { fetchEnsName } from \"@wagmi/core\";\nfunction queryKey12({\n  address,\n  chainId,\n  scopeKey\n}) {\n  return [{ entity: \"ensName\", address, chainId, scopeKey }];\n}\nfunction queryFn12({\n  queryKey: [{ address, chainId }]\n}) {\n  if (!address)\n    throw new Error(\"address is required\");\n  return fetchEnsName({ address, chainId });\n}\nfunction useEnsName({\n  address,\n  cacheTime,\n  chainId: chainId_,\n  enabled = true,\n  scopeKey,\n  staleTime = 1e3 * 60 * 60 * 24,\n  suspense,\n  onError,\n  onSettled,\n  onSuccess\n} = {}) {\n  const chainId = useChainId({ chainId: chainId_ });\n  return useQuery(queryKey12({ address, chainId, scopeKey }), queryFn12, {\n    cacheTime,\n    enabled: Boolean(enabled && address && chainId),\n    staleTime,\n    suspense,\n    onError,\n    onSettled,\n    onSuccess\n  });\n}\n\n// src/hooks/ens/useEnsResolver.ts\nimport { fetchEnsResolver } from \"@wagmi/core\";\nfunction queryKey13({ chainId, name, scopeKey }) {\n  return [\n    { entity: \"ensResolver\", chainId, name, scopeKey, persist: false }\n  ];\n}\nfunction queryFn13({\n  queryKey: [{ chainId, name }]\n}) {\n  if (!name)\n    throw new Error(\"name is required\");\n  return fetchEnsResolver({ chainId, name });\n}\nfunction useEnsResolver({\n  chainId: chainId_,\n  name,\n  enabled = true,\n  scopeKey,\n  suspense,\n  onError,\n  onSettled,\n  onSuccess\n} = {}) {\n  const chainId = useChainId({ chainId: chainId_ });\n  return useQuery(queryKey13({ chainId, name, scopeKey }), queryFn13, {\n    cacheTime: 0,\n    enabled: Boolean(enabled && chainId && name),\n    suspense,\n    onError,\n    onSettled,\n    onSuccess\n  });\n}\n\n// src/hooks/transactions/usePrepareSendTransaction.ts\nimport { prepareSendTransaction } from \"@wagmi/core\";\nfunction queryKey14({\n  accessList,\n  account,\n  activeChainId,\n  chainId,\n  data,\n  gas,\n  gasPrice,\n  maxFeePerGas,\n  maxPriorityFeePerGas,\n  nonce,\n  to,\n  value,\n  scopeKey,\n  walletClientAddress\n}) {\n  return [\n    {\n      entity: \"prepareSendTransaction\",\n      activeChainId,\n      accessList,\n      account,\n      chainId,\n      data,\n      gas,\n      gasPrice,\n      maxFeePerGas,\n      maxPriorityFeePerGas,\n      nonce,\n      to,\n      value,\n      scopeKey,\n      walletClientAddress\n    }\n  ];\n}\nfunction queryFn14({ walletClient }) {\n  return ({\n    queryKey: [\n      {\n        accessList,\n        account,\n        chainId,\n        data,\n        gas,\n        gasPrice,\n        maxFeePerGas,\n        maxPriorityFeePerGas,\n        nonce,\n        to,\n        value\n      }\n    ]\n  }) => {\n    if (!to)\n      throw new Error(\"to is required\");\n    return prepareSendTransaction({\n      accessList,\n      account,\n      chainId,\n      data,\n      gas,\n      gasPrice,\n      maxFeePerGas,\n      maxPriorityFeePerGas,\n      nonce,\n      to,\n      value,\n      walletClient\n    });\n  };\n}\nfunction usePrepareSendTransaction({\n  accessList,\n  account,\n  chainId,\n  cacheTime,\n  data,\n  enabled = true,\n  gas,\n  gasPrice,\n  maxFeePerGas,\n  maxPriorityFeePerGas,\n  nonce,\n  scopeKey,\n  staleTime,\n  suspense,\n  to,\n  value,\n  onError,\n  onSettled,\n  onSuccess\n} = {}) {\n  const { chain: activeChain } = useNetwork();\n  const { data: walletClient } = useWalletClient({ chainId });\n  const prepareSendTransactionQuery = useQuery(\n    queryKey14({\n      accessList,\n      activeChainId: activeChain?.id,\n      account,\n      chainId,\n      data,\n      gas,\n      gasPrice,\n      maxFeePerGas,\n      maxPriorityFeePerGas,\n      nonce,\n      scopeKey,\n      to,\n      value,\n      walletClientAddress: walletClient?.account.address\n    }),\n    queryFn14({ walletClient }),\n    {\n      cacheTime,\n      enabled: Boolean(enabled && walletClient && to),\n      staleTime,\n      suspense,\n      onError,\n      onSettled,\n      onSuccess\n    }\n  );\n  return Object.assign(prepareSendTransactionQuery, {\n    config: {\n      mode: \"prepared\",\n      ...prepareSendTransactionQuery.isSuccess ? prepareSendTransactionQuery.data : void 0\n    }\n  });\n}\n\n// src/hooks/transactions/useSendTransaction.ts\nimport { sendTransaction } from \"@wagmi/core\";\nimport * as React20 from \"react\";\nvar mutationKey7 = (args) => [{ entity: \"sendTransaction\", ...args }];\nvar mutationFn7 = ({\n  accessList,\n  account,\n  chainId,\n  data,\n  gas,\n  gasPrice,\n  maxFeePerGas,\n  maxPriorityFeePerGas,\n  mode,\n  nonce,\n  to,\n  value\n}) => {\n  if (!to)\n    throw new Error(\"to is required.\");\n  return sendTransaction({\n    accessList,\n    account,\n    chainId,\n    data,\n    gas,\n    gasPrice,\n    maxFeePerGas,\n    maxPriorityFeePerGas,\n    mode,\n    nonce,\n    to,\n    value\n  });\n};\nfunction useSendTransaction({\n  accessList,\n  account,\n  chainId,\n  data: data_,\n  gas,\n  gasPrice,\n  maxFeePerGas,\n  maxPriorityFeePerGas,\n  mode,\n  nonce,\n  to,\n  value,\n  onError,\n  onMutate,\n  onSettled,\n  onSuccess\n} = {}) {\n  const {\n    data,\n    error,\n    isError,\n    isIdle,\n    isLoading,\n    isSuccess,\n    mutate,\n    mutateAsync,\n    reset,\n    status,\n    variables\n  } = useMutation(\n    mutationKey7({\n      accessList,\n      account,\n      chainId,\n      data: data_,\n      gas,\n      gasPrice,\n      maxFeePerGas,\n      maxPriorityFeePerGas,\n      mode,\n      nonce,\n      to,\n      value\n    }),\n    mutationFn7,\n    {\n      onError,\n      onMutate,\n      onSettled,\n      onSuccess\n    }\n  );\n  const sendTransaction2 = React20.useCallback(\n    (args) => mutate({\n      chainId,\n      mode,\n      ...args || {\n        accessList,\n        account,\n        chainId,\n        data: data_,\n        gas,\n        gasPrice,\n        maxFeePerGas,\n        maxPriorityFeePerGas,\n        mode,\n        nonce,\n        value,\n        to\n      }\n    }),\n    [\n      accessList,\n      account,\n      chainId,\n      data_,\n      gas,\n      gasPrice,\n      maxFeePerGas,\n      maxPriorityFeePerGas,\n      mode,\n      mutate,\n      nonce,\n      to,\n      value\n    ]\n  );\n  const sendTransactionAsync = React20.useCallback(\n    (args) => mutateAsync({\n      chainId,\n      mode,\n      ...args || {\n        accessList,\n        account,\n        chainId,\n        data: data_,\n        gas,\n        gasPrice,\n        maxFeePerGas,\n        maxPriorityFeePerGas,\n        mode,\n        nonce,\n        value,\n        to\n      }\n    }),\n    [\n      accessList,\n      account,\n      chainId,\n      data_,\n      gas,\n      gasPrice,\n      maxFeePerGas,\n      maxPriorityFeePerGas,\n      mode,\n      mutateAsync,\n      nonce,\n      to,\n      value\n    ]\n  );\n  return {\n    data,\n    error,\n    isError,\n    isIdle,\n    isLoading,\n    isSuccess,\n    reset,\n    sendTransaction: mode === \"prepared\" && !to ? void 0 : sendTransaction2,\n    sendTransactionAsync: mode === \"prepared\" && !to ? void 0 : sendTransactionAsync,\n    status,\n    variables\n  };\n}\n\n// src/hooks/transactions/useTransaction.ts\nimport { fetchTransaction } from \"@wagmi/core\";\nfunction queryKey15({ chainId, hash, scopeKey }) {\n  return [{ entity: \"transaction\", chainId, hash, scopeKey }];\n}\nfunction queryFn15({\n  queryKey: [{ chainId, hash }]\n}) {\n  if (!hash)\n    throw new Error(\"hash is required\");\n  return fetchTransaction({ chainId, hash });\n}\nfunction useTransaction({\n  cacheTime = 0,\n  chainId: chainId_,\n  enabled = true,\n  hash,\n  scopeKey,\n  staleTime,\n  suspense,\n  onError,\n  onSettled,\n  onSuccess\n} = {}) {\n  const chainId = useChainId({ chainId: chainId_ });\n  return useQuery(queryKey15({ chainId, hash, scopeKey }), queryFn15, {\n    cacheTime,\n    enabled: Boolean(enabled && hash),\n    staleTime,\n    suspense,\n    onError,\n    onSettled,\n    onSuccess\n  });\n}\n\n// src/hooks/transactions/useWaitForTransaction.ts\nimport { waitForTransaction } from \"@wagmi/core\";\nfunction queryKey16({\n  confirmations,\n  chainId,\n  hash,\n  scopeKey,\n  timeout\n}) {\n  return [\n    {\n      entity: \"waitForTransaction\",\n      confirmations,\n      chainId,\n      hash,\n      scopeKey,\n      timeout\n    }\n  ];\n}\nfunction queryFn16({\n  onReplaced\n}) {\n  return ({\n    queryKey: [{ chainId, confirmations, hash, timeout }]\n  }) => {\n    if (!hash)\n      throw new Error(\"hash is required\");\n    return waitForTransaction({\n      chainId,\n      confirmations,\n      hash,\n      onReplaced,\n      timeout\n    });\n  };\n}\nfunction useWaitForTransaction({\n  chainId: chainId_,\n  confirmations,\n  hash,\n  timeout,\n  cacheTime,\n  enabled = true,\n  scopeKey,\n  staleTime,\n  suspense,\n  onError,\n  onReplaced,\n  onSettled,\n  onSuccess\n} = {}) {\n  const chainId = useChainId({ chainId: chainId_ });\n  return useQuery(\n    queryKey16({ chainId, confirmations, hash, scopeKey, timeout }),\n    queryFn16({ onReplaced }),\n    {\n      cacheTime,\n      enabled: Boolean(enabled && hash),\n      staleTime,\n      suspense,\n      onError,\n      onSettled,\n      onSuccess\n    }\n  );\n}\n\n// src/hooks/transactions/useWatchPendingTransactions.ts\nimport * as React21 from \"react\";\nfunction useWatchPendingTransactions({\n  chainId: chainId_,\n  enabled = true,\n  listener\n}) {\n  const chainId = useChainId({ chainId: chainId_ });\n  const publicClient = usePublicClient({ chainId });\n  const webSocketPublicClient = useWebSocketPublicClient({ chainId });\n  React21.useEffect(() => {\n    if (!enabled)\n      return;\n    const publicClient_ = webSocketPublicClient ?? publicClient;\n    return publicClient_.watchPendingTransactions({\n      onTransactions: listener\n    });\n  }, [enabled, listener, publicClient, webSocketPublicClient]);\n}\n\n// src/index.ts\nimport {\n  ChainMismatchError,\n  ChainNotConfiguredError,\n  Connector,\n  ConnectorAlreadyConnectedError,\n  ConnectorNotFoundError,\n  ConfigChainsNotFound,\n  SwitchChainNotSupportedError,\n  configureChains,\n  createStorage as createStorage2,\n  deepEqual as deepEqual5,\n  deserialize,\n  erc20ABI,\n  erc721ABI,\n  erc4626ABI,\n  readContracts as readContracts3,\n  serialize\n} from \"@wagmi/core\";\nimport { mainnet, sepolia } from \"viem/chains\";\nexport {\n  ChainMismatchError,\n  ChainNotConfiguredError,\n  ConfigChainsNotFound,\n  Connector,\n  ConnectorAlreadyConnectedError,\n  ConnectorNotFoundError,\n  Context,\n  SwitchChainNotSupportedError,\n  WagmiConfig,\n  configureChains,\n  createConfig,\n  createStorage2 as createStorage,\n  deepEqual5 as deepEqual,\n  deserialize,\n  erc20ABI,\n  erc4626ABI,\n  erc721ABI,\n  mainnet,\n  paginatedIndexesConfig,\n  readContracts3 as readContracts,\n  sepolia,\n  serialize,\n  useAccount,\n  useBalance,\n  useBlockNumber,\n  useChainId,\n  useConfig,\n  useConnect,\n  useContractEvent,\n  useContractInfiniteReads,\n  useContractRead,\n  useContractReads,\n  useContractWrite,\n  useDisconnect,\n  useEnsAddress,\n  useEnsAvatar,\n  useEnsName,\n  useEnsResolver,\n  useFeeData,\n  useInfiniteQuery,\n  useMutation,\n  useNetwork,\n  usePrepareContractWrite,\n  usePrepareSendTransaction,\n  usePublicClient,\n  useQuery,\n  useQueryClient2 as useQueryClient,\n  useSendTransaction,\n  useSignMessage,\n  useSignTypedData,\n  useSwitchNetwork,\n  useToken,\n  useTransaction,\n  useWaitForTransaction,\n  useWalletClient,\n  useWatchPendingTransactions,\n  useWebSocketPublicClient\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}