{"ast":null,"code":"import { InvalidAddressError } from '../../errors/address.js';\nimport { BaseError } from '../../errors/base.js';\nimport { InvalidChainIdError } from '../../errors/chain.js';\nimport { FeeCapTooHighError, TipAboveFeeCapError } from '../../errors/node.js';\nimport { isAddress } from '../../utils/address/isAddress.js';\nimport { concatHex } from '../../utils/data/concat.js';\nimport { trim } from '../../utils/data/trim.js';\nimport { toHex } from '../../utils/encoding/toHex.js';\nimport { toRlp } from '../../utils/encoding/toRlp.js';\nimport { serializeAccessList } from '../../utils/transaction/serializeAccessList.js';\nimport { serializeTransaction } from '../../utils/transaction/serializeTransaction.js';\nexport const serializeTransactionCelo = (tx, signature) => {\n  // Handle CIP-42 transactions\n  if (isCIP42(tx)) return serializeTransactionCIP42(tx, signature);\n  // Handle other transaction types\n  return serializeTransaction(tx, signature);\n};\nexport const serializersCelo = {\n  transaction: serializeTransactionCelo\n};\n// There shall be a typed transaction with the code 0x7c that has the following format:\n// 0x7c || rlp([chain_id, nonce, max_priority_fee_per_gas, max_fee_per_gas, gas_limit, feecurrency, gatewayFeeRecipient, gatewayfee, destination, amount, data, access_list, signature_y_parity, signature_r, signature_s]).\n// This will be in addition to the type 0x02 transaction as specified in EIP-1559.\nfunction serializeTransactionCIP42(transaction, signature) {\n  assertTransactionCIP42(transaction);\n  const {\n    chainId,\n    gas,\n    nonce,\n    to,\n    value,\n    maxFeePerGas,\n    maxPriorityFeePerGas,\n    accessList,\n    feeCurrency,\n    gatewayFeeRecipient,\n    gatewayFee,\n    data\n  } = transaction;\n  const serializedTransaction = [toHex(chainId), nonce ? toHex(nonce) : '0x', maxPriorityFeePerGas ? toHex(maxPriorityFeePerGas) : '0x', maxFeePerGas ? toHex(maxFeePerGas) : '0x', gas ? toHex(gas) : '0x', feeCurrency ?? '0x', gatewayFeeRecipient ?? '0x', gatewayFee ? toHex(gatewayFee) : '0x', to ?? '0x', value ? toHex(value) : '0x', data ?? '0x', serializeAccessList(accessList)];\n  if (signature) {\n    serializedTransaction.push(signature.v === 27n ? '0x' : toHex(1),\n    // yParity\n    trim(signature.r), trim(signature.s));\n  }\n  return concatHex(['0x7c', toRlp(serializedTransaction)]);\n}\n//////////////////////////////////////////////////////////////////////////////\n// Utilities\n// process as CIP42 if any of these fields are present. realistically gatewayfee is not used but is part of spec\nfunction isCIP42(transaction) {\n  if ('maxFeePerGas' in transaction && 'maxPriorityFeePerGas' in transaction && ('feeCurrency' in transaction || 'gatewayFee' in transaction || 'gatewayFeeRecipient' in transaction)) return true;\n  return false;\n}\n// maxFeePerGas must be less than 2^256 - 1: however writing like that caused exceptions to be raised\nconst MAX_MAX_FEE_PER_GAS = 115792089237316195423570985008687907853269984665640564039457584007913129639935n;\nexport function assertTransactionCIP42(transaction) {\n  const {\n    chainId,\n    maxPriorityFeePerGas,\n    gasPrice,\n    maxFeePerGas,\n    to,\n    feeCurrency,\n    gatewayFee,\n    gatewayFeeRecipient\n  } = transaction;\n  if (chainId <= 0) throw new InvalidChainIdError({\n    chainId\n  });\n  if (to && !isAddress(to)) throw new InvalidAddressError({\n    address: to\n  });\n  if (gasPrice) throw new BaseError('`gasPrice` is not a valid CIP-42 Transaction attribute.');\n  if (maxFeePerGas && maxFeePerGas > MAX_MAX_FEE_PER_GAS) throw new FeeCapTooHighError({\n    maxFeePerGas\n  });\n  if (maxPriorityFeePerGas && maxFeePerGas && maxPriorityFeePerGas > maxFeePerGas) throw new TipAboveFeeCapError({\n    maxFeePerGas,\n    maxPriorityFeePerGas\n  });\n  if (gatewayFee && !gatewayFeeRecipient || gatewayFeeRecipient && !gatewayFee) {\n    throw new BaseError('`gatewayFee` and `gatewayFeeRecipient` must be provided together.');\n  }\n  if (feeCurrency && !feeCurrency?.startsWith('0x')) {\n    throw new BaseError('`feeCurrency` MUST be a token address for CIP-42 transactions.');\n  }\n  if (!feeCurrency && !gatewayFeeRecipient) {\n    throw new BaseError('Either `feeCurrency` or `gatewayFeeRecipient` must be provided for CIP-42 transactions.');\n  }\n}","map":{"version":3,"names":["InvalidAddressError","BaseError","InvalidChainIdError","FeeCapTooHighError","TipAboveFeeCapError","isAddress","concatHex","trim","toHex","toRlp","serializeAccessList","serializeTransaction","serializeTransactionCelo","tx","signature","isCIP42","serializeTransactionCIP42","serializersCelo","transaction","assertTransactionCIP42","chainId","gas","nonce","to","value","maxFeePerGas","maxPriorityFeePerGas","accessList","feeCurrency","gatewayFeeRecipient","gatewayFee","data","serializedTransaction","push","v","r","s","MAX_MAX_FEE_PER_GAS","gasPrice","address","startsWith"],"sources":["/Users/envyhose/Desktop/programs/keepsafe_repo/keepsafe/client/node_modules/viem/chains/celo/serializers.ts"],"sourcesContent":["import { InvalidAddressError } from '../../errors/address.js'\nimport { BaseError } from '../../errors/base.js'\nimport { InvalidChainIdError } from '../../errors/chain.js'\nimport { FeeCapTooHighError, TipAboveFeeCapError } from '../../errors/node.js'\nimport type { ChainSerializers } from '../../types/chain.js'\nimport type { Signature } from '../../types/misc.js'\nimport type { TransactionSerializable } from '../../types/transaction.js'\nimport { isAddress } from '../../utils/address/isAddress.js'\nimport { concatHex } from '../../utils/data/concat.js'\nimport { trim } from '../../utils/data/trim.js'\nimport { toHex } from '../../utils/encoding/toHex.js'\nimport { toRlp } from '../../utils/encoding/toRlp.js'\nimport { serializeAccessList } from '../../utils/transaction/serializeAccessList.js'\nimport {\n  type SerializeTransactionFn,\n  serializeTransaction,\n} from '../../utils/transaction/serializeTransaction.js'\nimport type {\n  CeloTransactionSerializable,\n  TransactionSerializableCIP42,\n  TransactionSerializedCIP42,\n} from './types.js'\n\nexport const serializeTransactionCelo: SerializeTransactionFn<\n  CeloTransactionSerializable\n> = (tx, signature) => {\n  // Handle CIP-42 transactions\n  if (isCIP42(tx))\n    return serializeTransactionCIP42(\n      tx as TransactionSerializableCIP42,\n      signature,\n    )\n\n  // Handle other transaction types\n  return serializeTransaction(tx as TransactionSerializable, signature)\n}\n\nexport const serializersCelo = {\n  transaction: serializeTransactionCelo,\n} as const satisfies ChainSerializers\n\n//////////////////////////////////////////////////////////////////////////////\n// Serializers\n\nexport type SerializeTransactionCIP42ReturnType = TransactionSerializedCIP42\n\n// There shall be a typed transaction with the code 0x7c that has the following format:\n// 0x7c || rlp([chain_id, nonce, max_priority_fee_per_gas, max_fee_per_gas, gas_limit, feecurrency, gatewayFeeRecipient, gatewayfee, destination, amount, data, access_list, signature_y_parity, signature_r, signature_s]).\n// This will be in addition to the type 0x02 transaction as specified in EIP-1559.\nfunction serializeTransactionCIP42(\n  transaction: TransactionSerializableCIP42,\n  signature?: Signature,\n): SerializeTransactionCIP42ReturnType {\n  assertTransactionCIP42(transaction)\n  const {\n    chainId,\n    gas,\n    nonce,\n    to,\n    value,\n    maxFeePerGas,\n    maxPriorityFeePerGas,\n    accessList,\n    feeCurrency,\n    gatewayFeeRecipient,\n    gatewayFee,\n    data,\n  } = transaction\n\n  const serializedTransaction = [\n    toHex(chainId),\n    nonce ? toHex(nonce) : '0x',\n    maxPriorityFeePerGas ? toHex(maxPriorityFeePerGas) : '0x',\n    maxFeePerGas ? toHex(maxFeePerGas) : '0x',\n    gas ? toHex(gas) : '0x',\n    feeCurrency ?? '0x',\n    gatewayFeeRecipient ?? '0x',\n    gatewayFee ? toHex(gatewayFee) : '0x',\n    to ?? '0x',\n    value ? toHex(value) : '0x',\n    data ?? '0x',\n    serializeAccessList(accessList),\n  ]\n\n  if (signature) {\n    serializedTransaction.push(\n      signature.v === 27n ? '0x' : toHex(1), // yParity\n      trim(signature.r),\n      trim(signature.s),\n    )\n  }\n\n  return concatHex([\n    '0x7c',\n    toRlp(serializedTransaction),\n  ]) as SerializeTransactionCIP42ReturnType\n}\n\n//////////////////////////////////////////////////////////////////////////////\n// Utilities\n\n// process as CIP42 if any of these fields are present. realistically gatewayfee is not used but is part of spec\nfunction isCIP42(transaction: CeloTransactionSerializable) {\n  if (\n    'maxFeePerGas' in transaction &&\n    'maxPriorityFeePerGas' in transaction &&\n    ('feeCurrency' in transaction ||\n      'gatewayFee' in transaction ||\n      'gatewayFeeRecipient' in transaction)\n  )\n    return true\n  return false\n}\n\n// maxFeePerGas must be less than 2^256 - 1: however writing like that caused exceptions to be raised\nconst MAX_MAX_FEE_PER_GAS =\n  115792089237316195423570985008687907853269984665640564039457584007913129639935n\n\nexport function assertTransactionCIP42(\n  transaction: TransactionSerializableCIP42,\n) {\n  const {\n    chainId,\n    maxPriorityFeePerGas,\n    gasPrice,\n    maxFeePerGas,\n    to,\n    feeCurrency,\n    gatewayFee,\n    gatewayFeeRecipient,\n  } = transaction\n  if (chainId <= 0) throw new InvalidChainIdError({ chainId })\n  if (to && !isAddress(to)) throw new InvalidAddressError({ address: to })\n  if (gasPrice)\n    throw new BaseError(\n      '`gasPrice` is not a valid CIP-42 Transaction attribute.',\n    )\n\n  if (maxFeePerGas && maxFeePerGas > MAX_MAX_FEE_PER_GAS)\n    throw new FeeCapTooHighError({ maxFeePerGas })\n\n  if (\n    maxPriorityFeePerGas &&\n    maxFeePerGas &&\n    maxPriorityFeePerGas > maxFeePerGas\n  )\n    throw new TipAboveFeeCapError({ maxFeePerGas, maxPriorityFeePerGas })\n\n  if (\n    (gatewayFee && !gatewayFeeRecipient) ||\n    (gatewayFeeRecipient && !gatewayFee)\n  ) {\n    throw new BaseError(\n      '`gatewayFee` and `gatewayFeeRecipient` must be provided together.',\n    )\n  }\n\n  if (feeCurrency && !feeCurrency?.startsWith('0x')) {\n    throw new BaseError(\n      '`feeCurrency` MUST be a token address for CIP-42 transactions.',\n    )\n  }\n\n  if (!feeCurrency && !gatewayFeeRecipient) {\n    throw new BaseError(\n      'Either `feeCurrency` or `gatewayFeeRecipient` must be provided for CIP-42 transactions.',\n    )\n  }\n}\n"],"mappings":"AAAA,SAASA,mBAAmB,QAAQ,yBAAyB;AAC7D,SAASC,SAAS,QAAQ,sBAAsB;AAChD,SAASC,mBAAmB,QAAQ,uBAAuB;AAC3D,SAASC,kBAAkB,EAAEC,mBAAmB,QAAQ,sBAAsB;AAI9E,SAASC,SAAS,QAAQ,kCAAkC;AAC5D,SAASC,SAAS,QAAQ,4BAA4B;AACtD,SAASC,IAAI,QAAQ,0BAA0B;AAC/C,SAASC,KAAK,QAAQ,+BAA+B;AACrD,SAASC,KAAK,QAAQ,+BAA+B;AACrD,SAASC,mBAAmB,QAAQ,gDAAgD;AACpF,SAEEC,oBAAoB,QACf,iDAAiD;AAOxD,OAAO,MAAMC,wBAAwB,GAEjCA,CAACC,EAAE,EAAEC,SAAS,KAAI;EACpB;EACA,IAAIC,OAAO,CAACF,EAAE,CAAC,EACb,OAAOG,yBAAyB,CAC9BH,EAAkC,EAClCC,SAAS,CACV;EAEH;EACA,OAAOH,oBAAoB,CAACE,EAA6B,EAAEC,SAAS,CAAC;AACvE,CAAC;AAED,OAAO,MAAMG,eAAe,GAAG;EAC7BC,WAAW,EAAEN;CACsB;AAOrC;AACA;AACA;AACA,SAASI,yBAAyBA,CAChCE,WAAyC,EACzCJ,SAAqB;EAErBK,sBAAsB,CAACD,WAAW,CAAC;EACnC,MAAM;IACJE,OAAO;IACPC,GAAG;IACHC,KAAK;IACLC,EAAE;IACFC,KAAK;IACLC,YAAY;IACZC,oBAAoB;IACpBC,UAAU;IACVC,WAAW;IACXC,mBAAmB;IACnBC,UAAU;IACVC;EAAI,CACL,GAAGb,WAAW;EAEf,MAAMc,qBAAqB,GAAG,CAC5BxB,KAAK,CAACY,OAAO,CAAC,EACdE,KAAK,GAAGd,KAAK,CAACc,KAAK,CAAC,GAAG,IAAI,EAC3BI,oBAAoB,GAAGlB,KAAK,CAACkB,oBAAoB,CAAC,GAAG,IAAI,EACzDD,YAAY,GAAGjB,KAAK,CAACiB,YAAY,CAAC,GAAG,IAAI,EACzCJ,GAAG,GAAGb,KAAK,CAACa,GAAG,CAAC,GAAG,IAAI,EACvBO,WAAW,IAAI,IAAI,EACnBC,mBAAmB,IAAI,IAAI,EAC3BC,UAAU,GAAGtB,KAAK,CAACsB,UAAU,CAAC,GAAG,IAAI,EACrCP,EAAE,IAAI,IAAI,EACVC,KAAK,GAAGhB,KAAK,CAACgB,KAAK,CAAC,GAAG,IAAI,EAC3BO,IAAI,IAAI,IAAI,EACZrB,mBAAmB,CAACiB,UAAU,CAAC,CAChC;EAED,IAAIb,SAAS,EAAE;IACbkB,qBAAqB,CAACC,IAAI,CACxBnB,SAAS,CAACoB,CAAC,KAAK,GAAG,GAAG,IAAI,GAAG1B,KAAK,CAAC,CAAC,CAAC;IAAE;IACvCD,IAAI,CAACO,SAAS,CAACqB,CAAC,CAAC,EACjB5B,IAAI,CAACO,SAAS,CAACsB,CAAC,CAAC,CAClB;;EAGH,OAAO9B,SAAS,CAAC,CACf,MAAM,EACNG,KAAK,CAACuB,qBAAqB,CAAC,CAC7B,CAAwC;AAC3C;AAEA;AACA;AAEA;AACA,SAASjB,OAAOA,CAACG,WAAwC;EACvD,IACE,cAAc,IAAIA,WAAW,IAC7B,sBAAsB,IAAIA,WAAW,KACpC,aAAa,IAAIA,WAAW,IAC3B,YAAY,IAAIA,WAAW,IAC3B,qBAAqB,IAAIA,WAAW,CAAC,EAEvC,OAAO,IAAI;EACb,OAAO,KAAK;AACd;AAEA;AACA,MAAMmB,mBAAmB,GACvB,+EAA+E;AAEjF,OAAM,SAAUlB,sBAAsBA,CACpCD,WAAyC;EAEzC,MAAM;IACJE,OAAO;IACPM,oBAAoB;IACpBY,QAAQ;IACRb,YAAY;IACZF,EAAE;IACFK,WAAW;IACXE,UAAU;IACVD;EAAmB,CACpB,GAAGX,WAAW;EACf,IAAIE,OAAO,IAAI,CAAC,EAAE,MAAM,IAAIlB,mBAAmB,CAAC;IAAEkB;EAAO,CAAE,CAAC;EAC5D,IAAIG,EAAE,IAAI,CAAClB,SAAS,CAACkB,EAAE,CAAC,EAAE,MAAM,IAAIvB,mBAAmB,CAAC;IAAEuC,OAAO,EAAEhB;EAAE,CAAE,CAAC;EACxE,IAAIe,QAAQ,EACV,MAAM,IAAIrC,SAAS,CACjB,yDAAyD,CAC1D;EAEH,IAAIwB,YAAY,IAAIA,YAAY,GAAGY,mBAAmB,EACpD,MAAM,IAAIlC,kBAAkB,CAAC;IAAEsB;EAAY,CAAE,CAAC;EAEhD,IACEC,oBAAoB,IACpBD,YAAY,IACZC,oBAAoB,GAAGD,YAAY,EAEnC,MAAM,IAAIrB,mBAAmB,CAAC;IAAEqB,YAAY;IAAEC;EAAoB,CAAE,CAAC;EAEvE,IACGI,UAAU,IAAI,CAACD,mBAAmB,IAClCA,mBAAmB,IAAI,CAACC,UAAW,EACpC;IACA,MAAM,IAAI7B,SAAS,CACjB,mEAAmE,CACpE;;EAGH,IAAI2B,WAAW,IAAI,CAACA,WAAW,EAAEY,UAAU,CAAC,IAAI,CAAC,EAAE;IACjD,MAAM,IAAIvC,SAAS,CACjB,gEAAgE,CACjE;;EAGH,IAAI,CAAC2B,WAAW,IAAI,CAACC,mBAAmB,EAAE;IACxC,MAAM,IAAI5B,SAAS,CACjB,yFAAyF,CAC1F;;AAEL"},"metadata":{},"sourceType":"module","externalDependencies":[]}