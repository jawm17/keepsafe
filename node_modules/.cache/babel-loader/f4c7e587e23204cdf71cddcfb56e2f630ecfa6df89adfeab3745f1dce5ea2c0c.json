{"ast":null,"code":"import { extract } from '../../utils/formatters/extract.js';\nimport { formatTransactionRequest } from '../../utils/formatters/transactionRequest.js';\n/**\n * Returns the details of all transactions currently pending for inclusion in the next block(s), as well as the ones that are being scheduled for future execution only.\n *\n * - Docs: https://viem.sh/docs/actions/test/getTxpoolContent.html\n *\n * @param client - Client to use\n * @param parameters – {@link SendUnsignedTransactionParameters}\n * @returns The transaction hash. {@link SendUnsignedTransactionReturnType}\n *\n * @example\n * import { createTestClient, http } from 'viem'\n * import { foundry } from 'viem/chains'\n * import { sendUnsignedTransaction } from 'viem/test'\n *\n * const client = createTestClient({\n *   mode: 'anvil',\n *   chain: 'foundry',\n *   transport: http(),\n * })\n * const hash = await sendUnsignedTransaction(client, {\n *   from: '0xf39fd6e51aad88f6f4ce6ab8827279cfffb92266',\n *   to: '0x70997970c51812dc3a010c7d01b50e0d17dc79c8',\n *   value: 1000000000000000000n,\n * })\n */\nexport async function sendUnsignedTransaction(client, args) {\n  const {\n    accessList,\n    data,\n    from,\n    gas,\n    gasPrice,\n    maxFeePerGas,\n    maxPriorityFeePerGas,\n    nonce,\n    to,\n    value,\n    ...rest\n  } = args;\n  const format = client.chain?.formatters?.transactionRequest?.format || formatTransactionRequest;\n  const request = format({\n    // Pick out extra data that might exist on the chain's transaction request type.\n    ...extract(rest, {\n      format\n    }),\n    accessList,\n    data,\n    from,\n    gas,\n    gasPrice,\n    maxFeePerGas,\n    maxPriorityFeePerGas,\n    nonce,\n    to,\n    value\n  });\n  const hash = await client.request({\n    method: 'eth_sendUnsignedTransaction',\n    params: [request]\n  });\n  return hash;\n}","map":{"version":3,"names":["extract","formatTransactionRequest","sendUnsignedTransaction","client","args","accessList","data","from","gas","gasPrice","maxFeePerGas","maxPriorityFeePerGas","nonce","to","value","rest","format","chain","formatters","transactionRequest","request","hash","method","params"],"sources":["/Users/envyhose/Desktop/programs/keepsafe_repo/keepsafe/client/node_modules/viem/actions/test/sendUnsignedTransaction.ts"],"sourcesContent":["import type {\n  TestClient,\n  TestClientMode,\n} from '../../clients/createTestClient.js'\nimport type { Transport } from '../../clients/transports/createTransport.js'\nimport type { Account } from '../../types/account.js'\nimport type { Chain } from '../../types/chain.js'\nimport type { Hash } from '../../types/misc.js'\nimport type { TransactionRequest } from '../../types/transaction.js'\nimport { extract } from '../../utils/formatters/extract.js'\nimport {\n  type FormattedTransactionRequest,\n  formatTransactionRequest,\n} from '../../utils/formatters/transactionRequest.js'\n\nexport type SendUnsignedTransactionParameters<\n  TChain extends Chain | undefined = Chain | undefined,\n> = FormattedTransactionRequest<TChain>\n\nexport type SendUnsignedTransactionReturnType = Hash\n\n/**\n * Returns the details of all transactions currently pending for inclusion in the next block(s), as well as the ones that are being scheduled for future execution only.\n *\n * - Docs: https://viem.sh/docs/actions/test/getTxpoolContent.html\n *\n * @param client - Client to use\n * @param parameters – {@link SendUnsignedTransactionParameters}\n * @returns The transaction hash. {@link SendUnsignedTransactionReturnType}\n *\n * @example\n * import { createTestClient, http } from 'viem'\n * import { foundry } from 'viem/chains'\n * import { sendUnsignedTransaction } from 'viem/test'\n *\n * const client = createTestClient({\n *   mode: 'anvil',\n *   chain: 'foundry',\n *   transport: http(),\n * })\n * const hash = await sendUnsignedTransaction(client, {\n *   from: '0xf39fd6e51aad88f6f4ce6ab8827279cfffb92266',\n *   to: '0x70997970c51812dc3a010c7d01b50e0d17dc79c8',\n *   value: 1000000000000000000n,\n * })\n */\nexport async function sendUnsignedTransaction<\n  TChain extends Chain | undefined,\n  TAccount extends Account | undefined,\n>(\n  client: TestClient<TestClientMode, Transport, TChain, TAccount, false>,\n  args: SendUnsignedTransactionParameters<TChain>,\n): Promise<SendUnsignedTransactionReturnType> {\n  const {\n    accessList,\n    data,\n    from,\n    gas,\n    gasPrice,\n    maxFeePerGas,\n    maxPriorityFeePerGas,\n    nonce,\n    to,\n    value,\n    ...rest\n  } = args\n\n  const format =\n    client.chain?.formatters?.transactionRequest?.format ||\n    formatTransactionRequest\n  const request = format({\n    // Pick out extra data that might exist on the chain's transaction request type.\n    ...extract(rest, { format }),\n    accessList,\n    data,\n    from,\n    gas,\n    gasPrice,\n    maxFeePerGas,\n    maxPriorityFeePerGas,\n    nonce,\n    to,\n    value,\n  } as TransactionRequest)\n  const hash = await client.request({\n    method: 'eth_sendUnsignedTransaction',\n    params: [request],\n  })\n  return hash\n}\n"],"mappings":"AASA,SAASA,OAAO,QAAQ,mCAAmC;AAC3D,SAEEC,wBAAwB,QACnB,8CAA8C;AAQrD;;;;;;;;;;;;;;;;;;;;;;;;;AAyBA,OAAO,eAAeC,uBAAuBA,CAI3CC,MAAsE,EACtEC,IAA+C;EAE/C,MAAM;IACJC,UAAU;IACVC,IAAI;IACJC,IAAI;IACJC,GAAG;IACHC,QAAQ;IACRC,YAAY;IACZC,oBAAoB;IACpBC,KAAK;IACLC,EAAE;IACFC,KAAK;IACL,GAAGC;EAAI,CACR,GAAGX,IAAI;EAER,MAAMY,MAAM,GACVb,MAAM,CAACc,KAAK,EAAEC,UAAU,EAAEC,kBAAkB,EAAEH,MAAM,IACpDf,wBAAwB;EAC1B,MAAMmB,OAAO,GAAGJ,MAAM,CAAC;IACrB;IACA,GAAGhB,OAAO,CAACe,IAAI,EAAE;MAAEC;IAAM,CAAE,CAAC;IAC5BX,UAAU;IACVC,IAAI;IACJC,IAAI;IACJC,GAAG;IACHC,QAAQ;IACRC,YAAY;IACZC,oBAAoB;IACpBC,KAAK;IACLC,EAAE;IACFC;GACqB,CAAC;EACxB,MAAMO,IAAI,GAAG,MAAMlB,MAAM,CAACiB,OAAO,CAAC;IAChCE,MAAM,EAAE,6BAA6B;IACrCC,MAAM,EAAE,CAACH,OAAO;GACjB,CAAC;EACF,OAAOC,IAAI;AACb"},"metadata":{},"sourceType":"module","externalDependencies":[]}