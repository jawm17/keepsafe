{"ast":null,"code":"// Implementation forked and adapted from https://github.com/MetaMask/eth-sig-util/blob/main/src/sign-typed-data.ts\nimport { encodeAbiParameters } from '../abi/encodeAbiParameters.js';\nimport { concat } from '../data/concat.js';\nimport { toHex } from '../encoding/toHex.js';\nimport { keccak256 } from '../hash/keccak256.js';\nimport { getTypesForEIP712Domain, validateTypedData } from '../typedData.js';\nexport function hashTypedData({\n  domain: domain_,\n  message,\n  primaryType,\n  types: types_\n}) {\n  const domain = typeof domain_ === 'undefined' ? {} : domain_;\n  const types = {\n    EIP712Domain: getTypesForEIP712Domain({\n      domain\n    }),\n    ...types_\n  };\n  // Need to do a runtime validation check on addresses, byte ranges, integer ranges, etc\n  // as we can't statically check this with TypeScript.\n  validateTypedData({\n    domain,\n    message,\n    primaryType,\n    types\n  });\n  const parts = ['0x1901'];\n  if (domain) parts.push(hashDomain({\n    domain,\n    types: types\n  }));\n  if (primaryType !== 'EIP712Domain') {\n    parts.push(hashStruct({\n      data: message,\n      primaryType: primaryType,\n      types: types\n    }));\n  }\n  return keccak256(concat(parts));\n}\nexport function hashDomain({\n  domain,\n  types\n}) {\n  return hashStruct({\n    data: domain,\n    primaryType: 'EIP712Domain',\n    types\n  });\n}\nfunction hashStruct({\n  data,\n  primaryType,\n  types\n}) {\n  const encoded = encodeData({\n    data,\n    primaryType,\n    types\n  });\n  return keccak256(encoded);\n}\nfunction encodeData({\n  data,\n  primaryType,\n  types\n}) {\n  const encodedTypes = [{\n    type: 'bytes32'\n  }];\n  const encodedValues = [hashType({\n    primaryType,\n    types\n  })];\n  for (const field of types[primaryType]) {\n    const [type, value] = encodeField({\n      types,\n      name: field.name,\n      type: field.type,\n      value: data[field.name]\n    });\n    encodedTypes.push(type);\n    encodedValues.push(value);\n  }\n  return encodeAbiParameters(encodedTypes, encodedValues);\n}\nfunction hashType({\n  primaryType,\n  types\n}) {\n  const encodedHashType = toHex(encodeType({\n    primaryType,\n    types\n  }));\n  return keccak256(encodedHashType);\n}\nfunction encodeType({\n  primaryType,\n  types\n}) {\n  let result = '';\n  const unsortedDeps = findTypeDependencies({\n    primaryType,\n    types\n  });\n  unsortedDeps.delete(primaryType);\n  const deps = [primaryType, ...Array.from(unsortedDeps).sort()];\n  for (const type of deps) {\n    result += `${type}(${types[type].map(({\n      name,\n      type: t\n    }) => `${t} ${name}`).join(',')})`;\n  }\n  return result;\n}\nfunction findTypeDependencies({\n  primaryType: primaryType_,\n  types\n}, results = new Set()) {\n  const match = primaryType_.match(/^\\w*/u);\n  const primaryType = match?.[0];\n  if (results.has(primaryType) || types[primaryType] === undefined) {\n    return results;\n  }\n  results.add(primaryType);\n  for (const field of types[primaryType]) {\n    findTypeDependencies({\n      primaryType: field.type,\n      types\n    }, results);\n  }\n  return results;\n}\nfunction encodeField({\n  types,\n  name,\n  type,\n  value\n}) {\n  if (types[type] !== undefined) {\n    return [{\n      type: 'bytes32'\n    }, keccak256(encodeData({\n      data: value,\n      primaryType: type,\n      types\n    }))];\n  }\n  if (type === 'bytes') {\n    const prepend = value.length % 2 ? '0' : '';\n    value = `0x${prepend + value.slice(2)}`;\n    return [{\n      type: 'bytes32'\n    }, keccak256(value)];\n  }\n  if (type === 'string') return [{\n    type: 'bytes32'\n  }, keccak256(toHex(value))];\n  if (type.lastIndexOf(']') === type.length - 1) {\n    const parsedType = type.slice(0, type.lastIndexOf('['));\n    const typeValuePairs = value.map(item => encodeField({\n      name,\n      type: parsedType,\n      types,\n      value: item\n    }));\n    return [{\n      type: 'bytes32'\n    }, keccak256(encodeAbiParameters(typeValuePairs.map(([t]) => t), typeValuePairs.map(([, v]) => v)))];\n  }\n  return [{\n    type\n  }, value];\n}","map":{"version":3,"names":["encodeAbiParameters","concat","toHex","keccak256","getTypesForEIP712Domain","validateTypedData","hashTypedData","domain","domain_","message","primaryType","types","types_","EIP712Domain","parts","push","hashDomain","hashStruct","data","encoded","encodeData","encodedTypes","type","encodedValues","hashType","field","value","encodeField","name","encodedHashType","encodeType","result","unsortedDeps","findTypeDependencies","delete","deps","Array","from","sort","map","t","join","primaryType_","results","Set","match","has","undefined","add","prepend","length","slice","lastIndexOf","parsedType","typeValuePairs","item","v"],"sources":["/Users/envyhose/Desktop/programs/keepsafe_repo/keepsafe/client/node_modules/viem/utils/signature/hashTypedData.ts"],"sourcesContent":["// Implementation forked and adapted from https://github.com/MetaMask/eth-sig-util/blob/main/src/sign-typed-data.ts\n\nimport type { AbiParameter, TypedData, TypedDataDomain } from 'abitype'\n\nimport type { Hex } from '../../types/misc.js'\nimport type { TypedDataDefinition } from '../../types/typedData.js'\nimport { encodeAbiParameters } from '../abi/encodeAbiParameters.js'\nimport { concat } from '../data/concat.js'\nimport { toHex } from '../encoding/toHex.js'\nimport { keccak256 } from '../hash/keccak256.js'\nimport { getTypesForEIP712Domain, validateTypedData } from '../typedData.js'\n\ntype MessageTypeProperty = {\n  name: string\n  type: string\n}\n\nexport type HashTypedDataParameters<\n  TTypedData extends TypedData | { [key: string]: unknown } = TypedData,\n  TPrimaryType extends string = string,\n> = TypedDataDefinition<TTypedData, TPrimaryType>\n\nexport type HashTypedDataReturnType = Hex\n\nexport function hashTypedData<\n  const TTypedData extends TypedData | { [key: string]: unknown },\n  TPrimaryType extends string = string,\n>({\n  domain: domain_,\n  message,\n  primaryType,\n  types: types_,\n}: HashTypedDataParameters<TTypedData, TPrimaryType>): HashTypedDataReturnType {\n  const domain: TypedDataDomain = typeof domain_ === 'undefined' ? {} : domain_\n  const types = {\n    EIP712Domain: getTypesForEIP712Domain({ domain }),\n    ...(types_ as TTypedData),\n  }\n\n  // Need to do a runtime validation check on addresses, byte ranges, integer ranges, etc\n  // as we can't statically check this with TypeScript.\n  validateTypedData({\n    domain,\n    message,\n    primaryType,\n    types,\n  } as TypedDataDefinition)\n\n  const parts: Hex[] = ['0x1901']\n  if (domain)\n    parts.push(\n      hashDomain({\n        domain,\n        types: types as Record<string, MessageTypeProperty[]>,\n      }),\n    )\n\n  if (primaryType !== 'EIP712Domain') {\n    parts.push(\n      hashStruct({\n        data: message,\n        primaryType: primaryType as string,\n        types: types as Record<string, MessageTypeProperty[]>,\n      }),\n    )\n  }\n\n  return keccak256(concat(parts))\n}\n\nexport function hashDomain({\n  domain,\n  types,\n}: {\n  domain: TypedDataDomain\n  types: Record<string, MessageTypeProperty[]>\n}) {\n  return hashStruct({\n    data: domain,\n    primaryType: 'EIP712Domain',\n    types,\n  })\n}\n\nfunction hashStruct({\n  data,\n  primaryType,\n  types,\n}: {\n  data: Record<string, unknown>\n  primaryType: string\n  types: Record<string, MessageTypeProperty[]>\n}) {\n  const encoded = encodeData({\n    data,\n    primaryType,\n    types,\n  })\n  return keccak256(encoded)\n}\n\nfunction encodeData({\n  data,\n  primaryType,\n  types,\n}: {\n  data: Record<string, unknown>\n  primaryType: string\n  types: Record<string, MessageTypeProperty[]>\n}) {\n  const encodedTypes: AbiParameter[] = [{ type: 'bytes32' }]\n  const encodedValues: unknown[] = [hashType({ primaryType, types })]\n\n  for (const field of types[primaryType]) {\n    const [type, value] = encodeField({\n      types,\n      name: field.name,\n      type: field.type,\n      value: data[field.name],\n    })\n    encodedTypes.push(type)\n    encodedValues.push(value)\n  }\n\n  return encodeAbiParameters(encodedTypes, encodedValues)\n}\n\nfunction hashType({\n  primaryType,\n  types,\n}: {\n  primaryType: string\n  types: Record<string, MessageTypeProperty[]>\n}) {\n  const encodedHashType = toHex(encodeType({ primaryType, types }))\n  return keccak256(encodedHashType)\n}\n\nfunction encodeType({\n  primaryType,\n  types,\n}: {\n  primaryType: string\n  types: Record<string, MessageTypeProperty[]>\n}) {\n  let result = ''\n  const unsortedDeps = findTypeDependencies({ primaryType, types })\n  unsortedDeps.delete(primaryType)\n\n  const deps = [primaryType, ...Array.from(unsortedDeps).sort()]\n  for (const type of deps) {\n    result += `${type}(${types[type]\n      .map(({ name, type: t }) => `${t} ${name}`)\n      .join(',')})`\n  }\n\n  return result\n}\n\nfunction findTypeDependencies(\n  {\n    primaryType: primaryType_,\n    types,\n  }: {\n    primaryType: string\n    types: Record<string, MessageTypeProperty[]>\n  },\n  results: Set<string> = new Set(),\n): Set<string> {\n  const match = primaryType_.match(/^\\w*/u)\n  const primaryType = match?.[0]!\n  if (results.has(primaryType) || types[primaryType] === undefined) {\n    return results\n  }\n\n  results.add(primaryType)\n\n  for (const field of types[primaryType]) {\n    findTypeDependencies({ primaryType: field.type, types }, results)\n  }\n  return results\n}\n\nfunction encodeField({\n  types,\n  name,\n  type,\n  value,\n}: {\n  types: Record<string, MessageTypeProperty[]>\n  name: string\n  type: string\n  value: any\n}): [type: AbiParameter, value: any] {\n  if (types[type] !== undefined) {\n    return [\n      { type: 'bytes32' },\n      keccak256(encodeData({ data: value, primaryType: type, types })),\n    ]\n  }\n\n  if (type === 'bytes') {\n    const prepend = value.length % 2 ? '0' : ''\n    value = `0x${prepend + value.slice(2)}`\n    return [{ type: 'bytes32' }, keccak256(value)]\n  }\n\n  if (type === 'string') return [{ type: 'bytes32' }, keccak256(toHex(value))]\n\n  if (type.lastIndexOf(']') === type.length - 1) {\n    const parsedType = type.slice(0, type.lastIndexOf('['))\n    const typeValuePairs = (value as [AbiParameter, any][]).map((item) =>\n      encodeField({\n        name,\n        type: parsedType,\n        types,\n        value: item,\n      }),\n    )\n    return [\n      { type: 'bytes32' },\n      keccak256(\n        encodeAbiParameters(\n          typeValuePairs.map(([t]) => t),\n          typeValuePairs.map(([, v]) => v),\n        ),\n      ),\n    ]\n  }\n\n  return [{ type }, value]\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}