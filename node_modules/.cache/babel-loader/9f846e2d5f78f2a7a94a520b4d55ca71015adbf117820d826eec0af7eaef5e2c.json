{"ast":null,"code":"/**\n * Similar to [`increaseTime`](https://viem.sh/docs/actions/test/increaseTime.html), but sets a block timestamp `interval`. The timestamp of future blocks will be computed as `lastBlock_timestamp` + `interval`.\n *\n * - Docs: https://viem.sh/docs/actions/test/setBlockTimestampInterval.html\n *\n * @param client - Client to use\n * @param parameters – {@link SetBlockTimestampIntervalParameters}\n *\n * @example\n * import { createTestClient, http } from 'viem'\n * import { foundry } from 'viem/chains'\n * import { setBlockTimestampInterval } from 'viem/test'\n *\n * const client = createTestClient({\n *   mode: 'anvil',\n *   chain: 'foundry',\n *   transport: http(),\n * })\n * await setBlockTimestampInterval(client, { interval: 5 })\n */\nexport async function setBlockTimestampInterval(client, {\n  interval\n}) {\n  await client.request({\n    method: `${client.mode}_setBlockTimestampInterval`,\n    params: [interval]\n  });\n}","map":{"version":3,"names":["setBlockTimestampInterval","client","interval","request","method","mode","params"],"sources":["/Users/envyhose/Desktop/programs/keepsafe_repo/keepsafe/client/node_modules/viem/actions/test/setBlockTimestampInterval.ts"],"sourcesContent":["import type {\n  TestClient,\n  TestClientMode,\n} from '../../clients/createTestClient.js'\nimport type { Transport } from '../../clients/transports/createTransport.js'\nimport type { Account } from '../../types/account.js'\nimport type { Chain } from '../../types/chain.js'\n\nexport type SetBlockTimestampIntervalParameters = {\n  /** The interval (in seconds). */\n  interval: number\n}\n\n/**\n * Similar to [`increaseTime`](https://viem.sh/docs/actions/test/increaseTime.html), but sets a block timestamp `interval`. The timestamp of future blocks will be computed as `lastBlock_timestamp` + `interval`.\n *\n * - Docs: https://viem.sh/docs/actions/test/setBlockTimestampInterval.html\n *\n * @param client - Client to use\n * @param parameters – {@link SetBlockTimestampIntervalParameters}\n *\n * @example\n * import { createTestClient, http } from 'viem'\n * import { foundry } from 'viem/chains'\n * import { setBlockTimestampInterval } from 'viem/test'\n *\n * const client = createTestClient({\n *   mode: 'anvil',\n *   chain: 'foundry',\n *   transport: http(),\n * })\n * await setBlockTimestampInterval(client, { interval: 5 })\n */\nexport async function setBlockTimestampInterval<\n  TChain extends Chain | undefined,\n  TAccount extends Account | undefined,\n>(\n  client: TestClient<TestClientMode, Transport, TChain, TAccount, false>,\n  { interval }: SetBlockTimestampIntervalParameters,\n) {\n  await client.request({\n    method: `${client.mode}_setBlockTimestampInterval`,\n    params: [interval],\n  })\n}\n"],"mappings":"AAaA;;;;;;;;;;;;;;;;;;;;AAoBA,OAAO,eAAeA,yBAAyBA,CAI7CC,MAAsE,EACtE;EAAEC;AAAQ,CAAuC;EAEjD,MAAMD,MAAM,CAACE,OAAO,CAAC;IACnBC,MAAM,EAAE,GAAGH,MAAM,CAACI,IAAI,4BAA4B;IAClDC,MAAM,EAAE,CAACJ,QAAQ;GAClB,CAAC;AACJ"},"metadata":{},"sourceType":"module","externalDependencies":[]}