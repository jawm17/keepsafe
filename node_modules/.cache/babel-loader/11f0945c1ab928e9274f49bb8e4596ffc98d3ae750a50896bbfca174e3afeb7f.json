{"ast":null,"code":"'use client';\n\nimport { extends as _extends } from './_virtual/_rollupPluginBabelHelpers.mjs';\nimport * as React from 'react';\nimport { persistQueryClientRestore, persistQueryClientSubscribe } from '@tanstack/query-persist-client-core';\nimport { QueryClientProvider, IsRestoringProvider } from '@tanstack/react-query';\nconst PersistQueryClientProvider = ({\n  client,\n  children,\n  persistOptions,\n  onSuccess,\n  ...props\n}) => {\n  const [isRestoring, setIsRestoring] = React.useState(true);\n  const refs = React.useRef({\n    persistOptions,\n    onSuccess\n  });\n  const didRestore = React.useRef(false);\n  React.useEffect(() => {\n    refs.current = {\n      persistOptions,\n      onSuccess\n    };\n  });\n  React.useEffect(() => {\n    const options = {\n      ...refs.current.persistOptions,\n      queryClient: client\n    };\n    if (!didRestore.current) {\n      didRestore.current = true;\n      setIsRestoring(true);\n      persistQueryClientRestore(options).then(async () => {\n        try {\n          await (refs.current.onSuccess == null ? void 0 : refs.current.onSuccess());\n        } finally {\n          setIsRestoring(false);\n        }\n      });\n    }\n    return isRestoring ? undefined : persistQueryClientSubscribe(options);\n  }, [client, isRestoring]);\n  return /*#__PURE__*/React.createElement(QueryClientProvider, _extends({\n    client: client\n  }, props), /*#__PURE__*/React.createElement(IsRestoringProvider, {\n    value: isRestoring\n  }, children));\n};\nexport { PersistQueryClientProvider };","map":{"version":3,"names":["PersistQueryClientProvider","refs","React","useRef","onSuccess","didRestore","queryClient","client","current","persistQueryClientRestore","options","then","isRestoring","undefined","persistQueryClientSubscribe","createElement","QueryClientProvider","_extends","value"],"sources":["/Users/envyhose/Desktop/programs/keepsafe_repo/keepsafe/client/node_modules/@tanstack/react-query-persist-client/src/PersistQueryClientProvider.tsx"],"sourcesContent":["'use client'\nimport * as React from 'react'\n\nimport {\n  persistQueryClientRestore,\n  persistQueryClientSubscribe,\n} from '@tanstack/query-persist-client-core'\nimport { IsRestoringProvider, QueryClientProvider } from '@tanstack/react-query'\nimport type { PersistQueryClientOptions } from '@tanstack/query-persist-client-core'\nimport type { QueryClientProviderProps } from '@tanstack/react-query'\n\nexport type PersistQueryClientProviderProps = QueryClientProviderProps & {\n  persistOptions: Omit<PersistQueryClientOptions, 'queryClient'>\n  onSuccess?: () => void\n}\n\nexport const PersistQueryClientProvider = ({\n  client,\n  children,\n  persistOptions,\n  onSuccess,\n  ...props\n}: PersistQueryClientProviderProps): JSX.Element => {\n  const [isRestoring, setIsRestoring] = React.useState(true)\n  const refs = React.useRef({ persistOptions, onSuccess })\n  const didRestore = React.useRef(false)\n\n  React.useEffect(() => {\n    refs.current = { persistOptions, onSuccess }\n  })\n\n  React.useEffect(() => {\n    const options = {\n      ...refs.current.persistOptions,\n      queryClient: client,\n    }\n    if (!didRestore.current) {\n      didRestore.current = true\n      setIsRestoring(true)\n      persistQueryClientRestore(options).then(async () => {\n        try {\n          await refs.current.onSuccess?.()\n        } finally {\n          setIsRestoring(false)\n        }\n      })\n    }\n    return isRestoring ? undefined : persistQueryClientSubscribe(options)\n  }, [client, isRestoring])\n\n  return (\n    <QueryClientProvider client={client} {...props}>\n      <IsRestoringProvider value={isRestoring}>{children}</IsRestoringProvider>\n    </QueryClientProvider>\n  )\n}\n"],"mappings":";;;;;;AAgBO,MAAAA,0BAAA,GAAAA,CAAA;;;;;;AAAoC;;EAQzC,MAAAC,IAAA,GAAAC,KAAA,CAAAC,MAAA;;IAA4CC;EAAlB;EAC1B,MAAAC,UAAA,GAAAH,KAAA,CAAAC,MAAA;;;;MAGmCC;;;;;;MAM/BE,WAAA,EAAAC;;IAEF,KAAAF,UAAA,CAAAG,OAAA;;;MAGEC,yBAAA,CAAAC,OAAA,EAAAC,IAAA;;;QAGG;;QAEA;;IAEJ;IACD,OAAAC,WAAA,GAAAC,SAAA,GAAAC,2BAAA,CAAAJ,OAAA;EACD,IAAAH,MAAA,EAAAK,WAAA;EAED,oBAAAV,KAAA,CAAAa,aAAA,CAAAC,mBAAA,EAAAC,QAAA;IACuBV,MAAA,EAAAA;;IACEW,KAAA,EAAAN;;AAG1B"},"metadata":{},"sourceType":"module","externalDependencies":[]}