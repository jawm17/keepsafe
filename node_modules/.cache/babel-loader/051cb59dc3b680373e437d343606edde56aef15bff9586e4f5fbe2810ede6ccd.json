{"ast":null,"code":"import '../../types/chain.js';\nimport '../../types/rpc.js';\nimport { hexToBigInt } from '../../utils/encoding/fromHex.js';\nimport { defineBlock } from '../../utils/formatters/block.js';\nimport { defineTransaction, formatTransaction } from '../../utils/formatters/transaction.js';\nimport { defineTransactionReceipt } from '../../utils/formatters/transactionReceipt.js';\nexport const formattersOptimism = {\n  block: /*#__PURE__*/defineBlock({\n    format(args) {\n      const transactions = args.transactions?.map(transaction => {\n        if (typeof transaction === 'string') return transaction;\n        const formatted = formatTransaction(transaction);\n        if (formatted.typeHex === '0x7e') {\n          formatted.isSystemTx = transaction.isSystemTx;\n          formatted.mint = transaction.mint ? hexToBigInt(transaction.mint) : undefined;\n          formatted.sourceHash = transaction.sourceHash;\n          formatted.type = 'deposit';\n        }\n        return formatted;\n      });\n      return {\n        transactions,\n        stateRoot: args.stateRoot\n      };\n    }\n  }),\n  transaction: /*#__PURE__*/defineTransaction({\n    format(args) {\n      const transaction = {};\n      if (args.type === '0x7e') {\n        transaction.isSystemTx = args.isSystemTx;\n        transaction.mint = args.mint ? hexToBigInt(args.mint) : undefined;\n        transaction.sourceHash = args.sourceHash;\n        transaction.type = 'deposit';\n      }\n      return transaction;\n    }\n  }),\n  transactionReceipt: /*#__PURE__*/defineTransactionReceipt({\n    format(args) {\n      return {\n        l1GasPrice: args.l1GasPrice ? hexToBigInt(args.l1GasPrice) : null,\n        l1GasUsed: args.l1GasUsed ? hexToBigInt(args.l1GasUsed) : null,\n        l1Fee: args.l1Fee ? hexToBigInt(args.l1Fee) : null,\n        l1FeeScalar: args.l1FeeScalar ? Number(args.l1FeeScalar) : null\n      };\n    }\n  })\n};","map":{"version":3,"names":["hexToBigInt","defineBlock","defineTransaction","formatTransaction","defineTransactionReceipt","formattersOptimism","block","format","args","transactions","map","transaction","formatted","typeHex","isSystemTx","mint","undefined","sourceHash","type","stateRoot","transactionReceipt","l1GasPrice","l1GasUsed","l1Fee","l1FeeScalar","Number"],"sources":["/Users/envyhose/Desktop/programs/keepsafe_repo/keepsafe/client/node_modules/viem/chains/optimism/formatters.ts"],"sourcesContent":["import { type ChainFormatters } from '../../types/chain.js'\nimport type { Hash } from '../../types/misc.js'\nimport { type RpcTransaction } from '../../types/rpc.js'\nimport { hexToBigInt } from '../../utils/encoding/fromHex.js'\nimport { defineBlock } from '../../utils/formatters/block.js'\nimport {\n  defineTransaction,\n  formatTransaction,\n} from '../../utils/formatters/transaction.js'\nimport { defineTransactionReceipt } from '../../utils/formatters/transactionReceipt.js'\nimport type {\n  OptimismBlockOverrides,\n  OptimismRpcBlockOverrides,\n  OptimismRpcTransaction,\n  OptimismRpcTransactionReceiptOverrides,\n  OptimismTransaction,\n  OptimismTransactionReceiptOverrides,\n} from './types.js'\n\nexport const formattersOptimism = {\n  block: /*#__PURE__*/ defineBlock({\n    format(\n      args: OptimismRpcBlockOverrides & {\n        transactions: Hash[] | OptimismRpcTransaction[]\n      },\n    ): OptimismBlockOverrides & {\n      transactions: Hash[] | OptimismTransaction[]\n    } {\n      const transactions = args.transactions?.map((transaction) => {\n        if (typeof transaction === 'string') return transaction\n        const formatted = formatTransaction(\n          transaction as RpcTransaction,\n        ) as OptimismTransaction\n        if (formatted.typeHex === '0x7e') {\n          formatted.isSystemTx = transaction.isSystemTx\n          formatted.mint = transaction.mint\n            ? hexToBigInt(transaction.mint)\n            : undefined\n          formatted.sourceHash = transaction.sourceHash\n          formatted.type = 'deposit'\n        }\n        return formatted\n      }) as Hash[] | OptimismTransaction[]\n      return {\n        transactions,\n        stateRoot: args.stateRoot,\n      }\n    },\n  }),\n  transaction: /*#__PURE__*/ defineTransaction({\n    format(args: OptimismRpcTransaction): OptimismTransaction {\n      const transaction = {} as OptimismTransaction\n      if (args.type === '0x7e') {\n        transaction.isSystemTx = args.isSystemTx\n        transaction.mint = args.mint ? hexToBigInt(args.mint) : undefined\n        transaction.sourceHash = args.sourceHash\n        transaction.type = 'deposit'\n      }\n      return transaction\n    },\n  }),\n  transactionReceipt: /*#__PURE__*/ defineTransactionReceipt({\n    format(\n      args: OptimismRpcTransactionReceiptOverrides,\n    ): OptimismTransactionReceiptOverrides {\n      return {\n        l1GasPrice: args.l1GasPrice ? hexToBigInt(args.l1GasPrice) : null,\n        l1GasUsed: args.l1GasUsed ? hexToBigInt(args.l1GasUsed) : null,\n        l1Fee: args.l1Fee ? hexToBigInt(args.l1Fee) : null,\n        l1FeeScalar: args.l1FeeScalar ? Number(args.l1FeeScalar) : null,\n      }\n    },\n  }),\n} as const satisfies ChainFormatters\n"],"mappings":"AAAA,OAAqC,sBAAsB;AAE3D,OAAoC,oBAAoB;AACxD,SAASA,WAAW,QAAQ,iCAAiC;AAC7D,SAASC,WAAW,QAAQ,iCAAiC;AAC7D,SACEC,iBAAiB,EACjBC,iBAAiB,QACZ,uCAAuC;AAC9C,SAASC,wBAAwB,QAAQ,8CAA8C;AAUvF,OAAO,MAAMC,kBAAkB,GAAG;EAChCC,KAAK,EAAE,aAAcL,WAAW,CAAC;IAC/BM,MAAMA,CACJC,IAEC;MAID,MAAMC,YAAY,GAAGD,IAAI,CAACC,YAAY,EAAEC,GAAG,CAAEC,WAAW,IAAI;QAC1D,IAAI,OAAOA,WAAW,KAAK,QAAQ,EAAE,OAAOA,WAAW;QACvD,MAAMC,SAAS,GAAGT,iBAAiB,CACjCQ,WAA6B,CACP;QACxB,IAAIC,SAAS,CAACC,OAAO,KAAK,MAAM,EAAE;UAChCD,SAAS,CAACE,UAAU,GAAGH,WAAW,CAACG,UAAU;UAC7CF,SAAS,CAACG,IAAI,GAAGJ,WAAW,CAACI,IAAI,GAC7Bf,WAAW,CAACW,WAAW,CAACI,IAAI,CAAC,GAC7BC,SAAS;UACbJ,SAAS,CAACK,UAAU,GAAGN,WAAW,CAACM,UAAU;UAC7CL,SAAS,CAACM,IAAI,GAAG,SAAS;;QAE5B,OAAON,SAAS;MAClB,CAAC,CAAmC;MACpC,OAAO;QACLH,YAAY;QACZU,SAAS,EAAEX,IAAI,CAACW;OACjB;IACH;GACD,CAAC;EACFR,WAAW,EAAE,aAAcT,iBAAiB,CAAC;IAC3CK,MAAMA,CAACC,IAA4B;MACjC,MAAMG,WAAW,GAAG,EAAyB;MAC7C,IAAIH,IAAI,CAACU,IAAI,KAAK,MAAM,EAAE;QACxBP,WAAW,CAACG,UAAU,GAAGN,IAAI,CAACM,UAAU;QACxCH,WAAW,CAACI,IAAI,GAAGP,IAAI,CAACO,IAAI,GAAGf,WAAW,CAACQ,IAAI,CAACO,IAAI,CAAC,GAAGC,SAAS;QACjEL,WAAW,CAACM,UAAU,GAAGT,IAAI,CAACS,UAAU;QACxCN,WAAW,CAACO,IAAI,GAAG,SAAS;;MAE9B,OAAOP,WAAW;IACpB;GACD,CAAC;EACFS,kBAAkB,EAAE,aAAchB,wBAAwB,CAAC;IACzDG,MAAMA,CACJC,IAA4C;MAE5C,OAAO;QACLa,UAAU,EAAEb,IAAI,CAACa,UAAU,GAAGrB,WAAW,CAACQ,IAAI,CAACa,UAAU,CAAC,GAAG,IAAI;QACjEC,SAAS,EAAEd,IAAI,CAACc,SAAS,GAAGtB,WAAW,CAACQ,IAAI,CAACc,SAAS,CAAC,GAAG,IAAI;QAC9DC,KAAK,EAAEf,IAAI,CAACe,KAAK,GAAGvB,WAAW,CAACQ,IAAI,CAACe,KAAK,CAAC,GAAG,IAAI;QAClDC,WAAW,EAAEhB,IAAI,CAACgB,WAAW,GAAGC,MAAM,CAACjB,IAAI,CAACgB,WAAW,CAAC,GAAG;OAC5D;IACH;GACD;CACiC"},"metadata":{},"sourceType":"module","externalDependencies":[]}