{"ast":null,"code":"import { observe } from '../../utils/observe.js';\nimport { poll } from '../../utils/poll.js';\nimport { stringify } from '../../utils/stringify.js';\nimport { DecodeLogDataMismatch, DecodeLogTopicsMismatch } from '../../errors/abi.js';\nimport { InvalidInputRpcError } from '../../errors/rpc.js';\nimport { decodeEventLog, encodeEventTopics, formatLog } from '../../utils/index.js';\nimport { createEventFilter } from './createEventFilter.js';\nimport { getBlockNumber } from './getBlockNumber.js';\nimport { getFilterChanges } from './getFilterChanges.js';\nimport { getLogs } from './getLogs.js';\nimport { uninstallFilter } from './uninstallFilter.js';\n/**\n * Watches and returns emitted [Event Logs](https://viem.sh/docs/glossary/terms.html#event-log).\n *\n * - Docs: https://viem.sh/docs/actions/public/watchEvent.html\n * - JSON-RPC Methods:\n *   - **RPC Provider supports `eth_newFilter`:**\n *     - Calls [`eth_newFilter`](https://ethereum.org/en/developers/docs/apis/json-rpc/#eth_newfilter) to create a filter (called on initialize).\n *     - On a polling interval, it will call [`eth_getFilterChanges`](https://ethereum.org/en/developers/docs/apis/json-rpc/#eth_getfilterchanges).\n *   - **RPC Provider does not support `eth_newFilter`:**\n *     - Calls [`eth_getLogs`](https://ethereum.org/en/developers/docs/apis/json-rpc/#eth_getlogs) for each block between the polling interval.\n *\n * This Action will batch up all the Event Logs found within the [`pollingInterval`](https://viem.sh/docs/actions/public/watchEvent.html#pollinginterval-optional), and invoke them via [`onLogs`](https://viem.sh/docs/actions/public/watchEvent.html#onLogs).\n *\n * `watchEvent` will attempt to create an [Event Filter](https://viem.sh/docs/actions/public/createEventFilter.html) and listen to changes to the Filter per polling interval, however, if the RPC Provider does not support Filters (e.g. `eth_newFilter`), then `watchEvent` will fall back to using [`getLogs`](https://viem.sh/docs/actions/public/getLogs.html) instead.\n *\n * @param client - Client to use\n * @param parameters - {@link WatchEventParameters}\n * @returns A function that can be invoked to stop watching for new Event Logs. {@link WatchEventReturnType}\n *\n * @example\n * import { createPublicClient, http } from 'viem'\n * import { mainnet } from 'viem/chains'\n * import { watchEvent } from 'viem/public'\n *\n * const client = createPublicClient({\n *   chain: mainnet,\n *   transport: http(),\n * })\n * const unwatch = watchEvent(client, {\n *   onLogs: (logs) => console.log(logs),\n * })\n */\nexport function watchEvent(client, {\n  address,\n  args,\n  batch = true,\n  event,\n  events,\n  onError,\n  onLogs,\n  poll: poll_,\n  pollingInterval = client.pollingInterval,\n  strict: strict_\n}) {\n  const enablePolling = typeof poll_ !== 'undefined' ? poll_ : client.transport.type !== 'webSocket';\n  const strict = strict_ ?? false;\n  const pollEvent = () => {\n    const observerId = stringify(['watchEvent', address, args, batch, client.uid, event, pollingInterval]);\n    return observe(observerId, {\n      onLogs,\n      onError\n    }, emit => {\n      let previousBlockNumber;\n      let filter;\n      let initialized = false;\n      const unwatch = poll(async () => {\n        if (!initialized) {\n          try {\n            filter = await createEventFilter(client, {\n              address,\n              args,\n              event: event,\n              events,\n              strict\n            });\n          } catch {}\n          initialized = true;\n          return;\n        }\n        try {\n          let logs;\n          if (filter) {\n            logs = await getFilterChanges(client, {\n              filter\n            });\n          } else {\n            // If the filter doesn't exist, we will fall back to use `getLogs`.\n            // The fall back exists because some RPC Providers do not support filters.\n            // Fetch the block number to use for `getLogs`.\n            const blockNumber = await getBlockNumber(client);\n            // If the block number has changed, we will need to fetch the logs.\n            // If the block number doesn't exist, we are yet to reach the first poll interval,\n            // so do not emit any logs.\n            if (previousBlockNumber && previousBlockNumber !== blockNumber) {\n              logs = await getLogs(client, {\n                address,\n                args,\n                event: event,\n                events,\n                fromBlock: previousBlockNumber + 1n,\n                toBlock: blockNumber\n              });\n            } else {\n              logs = [];\n            }\n            previousBlockNumber = blockNumber;\n          }\n          if (logs.length === 0) return;\n          if (batch) emit.onLogs(logs);else logs.forEach(log => emit.onLogs([log]));\n        } catch (err) {\n          // If a filter has been set and gets uninstalled, providers will throw an InvalidInput error.\n          // Reinitalize the filter when this occurs\n          if (filter && err instanceof InvalidInputRpcError) initialized = false;\n          emit.onError?.(err);\n        }\n      }, {\n        emitOnBegin: true,\n        interval: pollingInterval\n      });\n      return async () => {\n        if (filter) await uninstallFilter(client, {\n          filter\n        });\n        unwatch();\n      };\n    });\n  };\n  const subscribeEvent = () => {\n    let active = true;\n    let unsubscribe = () => active = false;\n    (async () => {\n      try {\n        const events_ = events ?? (event ? [event] : undefined);\n        let topics = [];\n        if (events_) {\n          topics = [events_.flatMap(event => encodeEventTopics({\n            abi: [event],\n            eventName: event.name,\n            args\n          }))];\n          if (event) topics = topics[0];\n        }\n        const {\n          unsubscribe: unsubscribe_\n        } = await client.transport.subscribe({\n          params: ['logs', {\n            address,\n            topics\n          }],\n          onData(data) {\n            if (!active) return;\n            const log = data.result;\n            try {\n              const {\n                eventName,\n                args\n              } = decodeEventLog({\n                abi: events_,\n                data: log.data,\n                topics: log.topics,\n                strict\n              });\n              const formatted = formatLog(log, {\n                args,\n                eventName: eventName\n              });\n              onLogs([formatted]);\n            } catch (err) {\n              let eventName;\n              let isUnnamed;\n              if (err instanceof DecodeLogDataMismatch || err instanceof DecodeLogTopicsMismatch) {\n                // If strict mode is on, and log data/topics do not match event definition, skip.\n                if (strict_) return;\n                eventName = err.abiItem.name;\n                isUnnamed = err.abiItem.inputs?.some(x => !('name' in x && x.name));\n              }\n              // Set args to empty if there is an error decoding (e.g. indexed/non-indexed params mismatch).\n              const formatted = formatLog(log, {\n                args: isUnnamed ? [] : {},\n                eventName\n              });\n              onLogs([formatted]);\n            }\n          },\n          onError(error) {\n            onError?.(error);\n          }\n        });\n        unsubscribe = unsubscribe_;\n        if (!active) unsubscribe();\n      } catch (err) {\n        onError?.(err);\n      }\n    })();\n    return unsubscribe;\n  };\n  return enablePolling ? pollEvent() : subscribeEvent();\n}","map":{"version":3,"names":["observe","poll","stringify","DecodeLogDataMismatch","DecodeLogTopicsMismatch","InvalidInputRpcError","decodeEventLog","encodeEventTopics","formatLog","createEventFilter","getBlockNumber","getFilterChanges","getLogs","uninstallFilter","watchEvent","client","address","args","batch","event","events","onError","onLogs","poll_","pollingInterval","strict","strict_","enablePolling","transport","type","pollEvent","observerId","uid","emit","previousBlockNumber","filter","initialized","unwatch","logs","blockNumber","fromBlock","toBlock","length","forEach","log","err","emitOnBegin","interval","subscribeEvent","active","unsubscribe","events_","undefined","topics","flatMap","abi","eventName","name","unsubscribe_","subscribe","params","onData","data","result","formatted","isUnnamed","abiItem","inputs","some","x","error"],"sources":["/Users/envyhose/Desktop/programs/keepsafe_repo/keepsafe/client/node_modules/viem/actions/public/watchEvent.ts"],"sourcesContent":["import type { Abi, AbiEvent, Address } from 'abitype'\n\nimport type { Client } from '../../clients/createClient.js'\nimport type { Transport } from '../../clients/transports/createTransport.js'\nimport type { Chain } from '../../types/chain.js'\nimport type {\n  MaybeAbiEventName,\n  MaybeExtractEventArgsFromAbi,\n} from '../../types/contract.js'\nimport type { Filter } from '../../types/filter.js'\nimport type { Log } from '../../types/log.js'\nimport type { LogTopic } from '../../types/misc.js'\nimport type { GetTransportConfig } from '../../types/transport.js'\nimport type { EncodeEventTopicsParameters } from '../../utils/index.js'\nimport { observe } from '../../utils/observe.js'\nimport { poll } from '../../utils/poll.js'\nimport { stringify } from '../../utils/stringify.js'\n\nimport {\n  DecodeLogDataMismatch,\n  DecodeLogTopicsMismatch,\n} from '../../errors/abi.js'\nimport { InvalidInputRpcError } from '../../errors/rpc.js'\nimport {\n  decodeEventLog,\n  encodeEventTopics,\n  formatLog,\n} from '../../utils/index.js'\nimport {\n  type CreateEventFilterParameters,\n  createEventFilter,\n} from './createEventFilter.js'\nimport { getBlockNumber } from './getBlockNumber.js'\nimport { getFilterChanges } from './getFilterChanges.js'\nimport { type GetLogsParameters, getLogs } from './getLogs.js'\nimport { uninstallFilter } from './uninstallFilter.js'\n\ntype PollOptions = {\n  /**\n   * Whether or not the transaction hashes should be batched on each invocation.\n   * @default true\n   */\n  batch?: boolean\n  /**\n   * Polling frequency (in ms). Defaults to Client's pollingInterval config.\n   * @default client.pollingInterval\n   */\n  pollingInterval?: number\n}\n\nexport type WatchEventOnLogsParameter<\n  TAbiEvent extends AbiEvent | undefined = undefined,\n  TAbiEvents extends\n    | readonly AbiEvent[]\n    | readonly unknown[]\n    | undefined = TAbiEvent extends AbiEvent ? [TAbiEvent] : undefined,\n  TStrict extends boolean | undefined = undefined,\n  TEventName extends string | undefined = MaybeAbiEventName<TAbiEvent>,\n> = Log<bigint, number, false, TAbiEvent, TStrict, TAbiEvents, TEventName>[]\nexport type WatchEventOnLogsFn<\n  TAbiEvent extends AbiEvent | undefined = undefined,\n  TAbiEvents extends\n    | readonly AbiEvent[]\n    | readonly unknown[]\n    | undefined = TAbiEvent extends AbiEvent ? [TAbiEvent] : undefined,\n  TStrict extends boolean | undefined = undefined,\n  _EventName extends string | undefined = MaybeAbiEventName<TAbiEvent>,\n> = (\n  logs: WatchEventOnLogsParameter<TAbiEvent, TAbiEvents, TStrict, _EventName>,\n) => void\n\nexport type WatchEventParameters<\n  TAbiEvent extends AbiEvent | undefined = undefined,\n  TAbiEvents extends\n    | readonly AbiEvent[]\n    | readonly unknown[]\n    | undefined = TAbiEvent extends AbiEvent ? [TAbiEvent] : undefined,\n  TStrict extends boolean | undefined = undefined,\n  _EventName extends string | undefined = MaybeAbiEventName<TAbiEvent>,\n> = {\n  /** The address of the contract. */\n  address?: Address | Address[]\n  /** The callback to call when an error occurred when trying to get for a new block. */\n  onError?: (error: Error) => void\n  /** The callback to call when new event logs are received. */\n  onLogs: WatchEventOnLogsFn<TAbiEvent, TAbiEvents, TStrict, _EventName>\n} & (GetTransportConfig<Transport>['type'] extends 'webSocket'\n  ?\n      | {\n          batch?: never\n          /**\n           * Whether or not the WebSocket Transport should poll the JSON-RPC, rather than using `eth_subscribe`.\n           * @default false\n           */\n          poll?: false\n          pollingInterval?: never\n        }\n      | (PollOptions & {\n          /**\n           * Whether or not the WebSocket Transport should poll the JSON-RPC, rather than using `eth_subscribe`.\n           * @default true\n           */\n          poll?: true\n        })\n  : PollOptions & {\n      poll?: true\n    }) &\n  (\n    | {\n        event: TAbiEvent\n        events?: never\n        args?: MaybeExtractEventArgsFromAbi<TAbiEvents, _EventName>\n        /**\n         * Whether or not the logs must match the indexed/non-indexed arguments on `event`.\n         * @default false\n         */\n        strict?: TStrict\n      }\n    | {\n        event?: never\n        events?: TAbiEvents\n        args?: never\n        /**\n         * Whether or not the logs must match the indexed/non-indexed arguments on `event`.\n         * @default false\n         */\n        strict?: TStrict\n      }\n    | {\n        event?: never\n        events?: never\n        args?: never\n        strict?: never\n      }\n  )\n\nexport type WatchEventReturnType = () => void\n\n/**\n * Watches and returns emitted [Event Logs](https://viem.sh/docs/glossary/terms.html#event-log).\n *\n * - Docs: https://viem.sh/docs/actions/public/watchEvent.html\n * - JSON-RPC Methods:\n *   - **RPC Provider supports `eth_newFilter`:**\n *     - Calls [`eth_newFilter`](https://ethereum.org/en/developers/docs/apis/json-rpc/#eth_newfilter) to create a filter (called on initialize).\n *     - On a polling interval, it will call [`eth_getFilterChanges`](https://ethereum.org/en/developers/docs/apis/json-rpc/#eth_getfilterchanges).\n *   - **RPC Provider does not support `eth_newFilter`:**\n *     - Calls [`eth_getLogs`](https://ethereum.org/en/developers/docs/apis/json-rpc/#eth_getlogs) for each block between the polling interval.\n *\n * This Action will batch up all the Event Logs found within the [`pollingInterval`](https://viem.sh/docs/actions/public/watchEvent.html#pollinginterval-optional), and invoke them via [`onLogs`](https://viem.sh/docs/actions/public/watchEvent.html#onLogs).\n *\n * `watchEvent` will attempt to create an [Event Filter](https://viem.sh/docs/actions/public/createEventFilter.html) and listen to changes to the Filter per polling interval, however, if the RPC Provider does not support Filters (e.g. `eth_newFilter`), then `watchEvent` will fall back to using [`getLogs`](https://viem.sh/docs/actions/public/getLogs.html) instead.\n *\n * @param client - Client to use\n * @param parameters - {@link WatchEventParameters}\n * @returns A function that can be invoked to stop watching for new Event Logs. {@link WatchEventReturnType}\n *\n * @example\n * import { createPublicClient, http } from 'viem'\n * import { mainnet } from 'viem/chains'\n * import { watchEvent } from 'viem/public'\n *\n * const client = createPublicClient({\n *   chain: mainnet,\n *   transport: http(),\n * })\n * const unwatch = watchEvent(client, {\n *   onLogs: (logs) => console.log(logs),\n * })\n */\nexport function watchEvent<\n  TChain extends Chain | undefined,\n  const TAbiEvent extends AbiEvent | undefined = undefined,\n  const TAbiEvents extends\n    | readonly AbiEvent[]\n    | readonly unknown[]\n    | undefined = TAbiEvent extends AbiEvent ? [TAbiEvent] : undefined,\n  TStrict extends boolean | undefined = undefined,\n  _EventName extends string | undefined = undefined,\n>(\n  client: Client<Transport, TChain>,\n  {\n    address,\n    args,\n    batch = true,\n    event,\n    events,\n    onError,\n    onLogs,\n    poll: poll_,\n    pollingInterval = client.pollingInterval,\n    strict: strict_,\n  }: WatchEventParameters<TAbiEvent, TAbiEvents, TStrict>,\n): WatchEventReturnType {\n  const enablePolling =\n    typeof poll_ !== 'undefined' ? poll_ : client.transport.type !== 'webSocket'\n  const strict = strict_ ?? false\n\n  const pollEvent = () => {\n    const observerId = stringify([\n      'watchEvent',\n      address,\n      args,\n      batch,\n      client.uid,\n      event,\n      pollingInterval,\n    ])\n\n    return observe(observerId, { onLogs, onError }, (emit) => {\n      let previousBlockNumber: bigint\n      let filter: Filter<'event', TAbiEvents, _EventName, any>\n      let initialized = false\n\n      const unwatch = poll(\n        async () => {\n          if (!initialized) {\n            try {\n              filter = (await createEventFilter(client, {\n                address,\n                args,\n                event: event!,\n                events,\n                strict,\n              } as unknown as CreateEventFilterParameters)) as unknown as Filter<\n                'event',\n                TAbiEvents,\n                _EventName\n              >\n            } catch {}\n            initialized = true\n            return\n          }\n\n          try {\n            let logs: Log[]\n            if (filter) {\n              logs = await getFilterChanges(client, { filter })\n            } else {\n              // If the filter doesn't exist, we will fall back to use `getLogs`.\n              // The fall back exists because some RPC Providers do not support filters.\n\n              // Fetch the block number to use for `getLogs`.\n              const blockNumber = await getBlockNumber(client)\n\n              // If the block number has changed, we will need to fetch the logs.\n              // If the block number doesn't exist, we are yet to reach the first poll interval,\n              // so do not emit any logs.\n              if (previousBlockNumber && previousBlockNumber !== blockNumber) {\n                logs = await getLogs(client, {\n                  address,\n                  args,\n                  event: event!,\n                  events,\n                  fromBlock: previousBlockNumber + 1n,\n                  toBlock: blockNumber,\n                } as unknown as GetLogsParameters)\n              } else {\n                logs = []\n              }\n              previousBlockNumber = blockNumber\n            }\n\n            if (logs.length === 0) return\n            if (batch) emit.onLogs(logs as any)\n            else logs.forEach((log) => emit.onLogs([log] as any))\n          } catch (err) {\n            // If a filter has been set and gets uninstalled, providers will throw an InvalidInput error.\n            // Reinitalize the filter when this occurs\n            if (filter && err instanceof InvalidInputRpcError)\n              initialized = false\n            emit.onError?.(err as Error)\n          }\n        },\n        {\n          emitOnBegin: true,\n          interval: pollingInterval,\n        },\n      )\n\n      return async () => {\n        if (filter) await uninstallFilter(client, { filter })\n        unwatch()\n      }\n    })\n  }\n\n  const subscribeEvent = () => {\n    let active = true\n    let unsubscribe = () => (active = false)\n    ;(async () => {\n      try {\n        const events_ = events ?? (event ? [event] : undefined)\n        let topics: LogTopic[] = []\n        if (events_) {\n          topics = [\n            (events_ as AbiEvent[]).flatMap((event) =>\n              encodeEventTopics({\n                abi: [event],\n                eventName: (event as AbiEvent).name,\n                args,\n              } as EncodeEventTopicsParameters),\n            ),\n          ]\n          if (event) topics = topics[0] as LogTopic[]\n        }\n\n        const { unsubscribe: unsubscribe_ } = await client.transport.subscribe({\n          params: ['logs', { address, topics }],\n          onData(data: any) {\n            if (!active) return\n            const log = data.result\n            try {\n              const { eventName, args } = decodeEventLog({\n                abi: events_ as Abi,\n                data: log.data,\n                topics: log.topics as any,\n                strict,\n              })\n              const formatted = formatLog(log, {\n                args,\n                eventName: eventName as string,\n              })\n              onLogs([formatted] as any)\n            } catch (err) {\n              let eventName\n              let isUnnamed\n              if (\n                err instanceof DecodeLogDataMismatch ||\n                err instanceof DecodeLogTopicsMismatch\n              ) {\n                // If strict mode is on, and log data/topics do not match event definition, skip.\n                if (strict_) return\n                eventName = err.abiItem.name\n                isUnnamed = err.abiItem.inputs?.some(\n                  (x) => !('name' in x && x.name),\n                )\n              }\n\n              // Set args to empty if there is an error decoding (e.g. indexed/non-indexed params mismatch).\n              const formatted = formatLog(log, {\n                args: isUnnamed ? [] : {},\n                eventName,\n              })\n              onLogs([formatted] as any)\n            }\n          },\n          onError(error: Error) {\n            onError?.(error)\n          },\n        })\n        unsubscribe = unsubscribe_\n        if (!active) unsubscribe()\n      } catch (err) {\n        onError?.(err as Error)\n      }\n    })()\n    return unsubscribe\n  }\n\n  return enablePolling ? pollEvent() : subscribeEvent()\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}